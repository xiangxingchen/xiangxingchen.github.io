{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/landscape/.gitignore","hash":"ea2b285a29690f1eabbad0f3a158e34e9ccd1d86","modified":1528941334752},{"_id":"themes/landscape/Gruntfile.js","hash":"412e30530784993c8997aa8b1319c669b83b91c2","modified":1528941334753},{"_id":"themes/landscape/_config.yml","hash":"ce9d2939245209b8f5c5bbbdadc917d86057d032","modified":1528941334755},{"_id":"themes/landscape/LICENSE","hash":"82ce1e15ddeabeaaca60e2186b5a3ce42b1a9c49","modified":1528941334753},{"_id":"themes/landscape/README.md","hash":"67fedfb66304f103c412f6be110bf3c40c75d4ac","modified":1528941334754},{"_id":"themes/landscape/package.json","hash":"6e567a9654e61eb3f548c75edef380c2e135c433","modified":1528941334799},{"_id":"source/_posts/hello-world.md","hash":"029f91fccbe8f87c0f3ea10c4042300d2fa7edc0","modified":1528941233442},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1528941334793},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1528941334792},{"_id":"themes/landscape/layout/layout.ejs","hash":"5d86bc48b0f1bdce9a2bb548c2f8e7a4f50d499a","modified":1528941334795},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1528941334794},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1528941334798},{"_id":"themes/landscape/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1528941334758},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1528941334797},{"_id":"themes/landscape/languages/de.yml","hash":"d45cea36c5c83d7d09afcd1c26fff4a4c513c25b","modified":1528941334757},{"_id":"themes/landscape/languages/ja.yml","hash":"3e2fedca096678c0c234ebffa4637828979296fa","modified":1528941334761},{"_id":"themes/landscape/languages/fr.yml","hash":"8cb0fe4b6913b4d5b662cdd0108a923c90025f85","modified":1528941334760},{"_id":"themes/landscape/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1528941334764},{"_id":"themes/landscape/languages/ko.yml","hash":"11330316e3c1262474a2b496e40dbc29f93fe01b","modified":1528941334762},{"_id":"themes/landscape/languages/es.yml","hash":"e3b4937da4cd2d0393b8a0ba310e70fc605cc431","modified":1528941334759},{"_id":"themes/landscape/languages/pt.yml","hash":"ae2c61b30e638f74f1a42c9ce39ac08d063b30f5","modified":1528941334765},{"_id":"themes/landscape/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1528941334764},{"_id":"themes/landscape/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1528941334766},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1528941334796},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1528941334768},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1528941334769},{"_id":"themes/landscape/scripts/fancybox.js","hash":"4c130fc242cf9b59b5df6ca5eae3b14302311e8c","modified":1528941334800},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"0fe1e52c291c9499bd05b966e0b9aac5be351c58","modified":1528941334787},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"866790acc13fed44b7ef74c3e19c300a3d6180d8","modified":1528941334788},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"6017c54a8c3c8ff8db491cfbea3100c139da75d6","modified":1528941334790},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"16800f85ffb036d2644a26e02facd61acb3706e9","modified":1528941334789},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"7259c179aa0c41c02e467ad892292e90430aaabc","modified":1528941334791},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"5e3b70c028d518b8f765e29a5e2020e7ba6ed589","modified":1528941334771},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"5062c723721d8497eebad372f57092ade45041f4","modified":1528941334772},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"5cf2b8a1148e6f8c4bd9ca9e3b84c7e5a59d56bc","modified":1528941334774},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"017c412bd3d60d22e493f02918e436a32d96bb84","modified":1528941334773},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"ace3000bd3e01d03041d5be24f7640b6c003a5b5","modified":1528941334776},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"6faefe07f3d64e21c7743276e0f55ee1544f9d86","modified":1528941334775},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"a36cec48782782bac92622f369c750e5c7396510","modified":1528941334778},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"cf755454675d13a0813a922b575c06b6b74ab9fd","modified":1528941334778},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"347cf1befd2ea637c24bd5901929d8e36e359e75","modified":1528941334779},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1528941334777},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"c70869569749a8f48cce202fa57926c06b55fdab","modified":1528941334786},{"_id":"themes/landscape/source/css/_variables.styl","hash":"57bb02270eef16b4823a64ba663ccf2f247f34e5","modified":1528941334816},{"_id":"themes/landscape/source/css/style.styl","hash":"4a3e64ee8dad5834860c30b4176882eff628ca6b","modified":1528941334830},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1528941334831},{"_id":"themes/landscape/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1528941334802},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1528941334832},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1528941334833},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1528941334834},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1528941334835},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1528941334836},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"2e54d51d21e68ebc4bb870f6e57d3bfb660d4f9c","modified":1528941334842},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1528941334845},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8","modified":1528941334844},{"_id":"themes/landscape/source/js/script.js","hash":"c0d368681c687258b628bacc84cc30d353de6d47","modified":1528941334846},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"16128d2422645e18d1b6882d4c4df17d895bd76e","modified":1528941334781},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"947f513f7a85fbcf085624e46dc2ae6de8185eec","modified":1528941334782},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1528941334782},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1528941334784},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1528941334785},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"cbb3819ce512bd24db8bad41b8617d46eba82fdc","modified":1528941334783},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"9e574d8eb1a5285ec3b4346607414770d2f7e0ff","modified":1528941334803},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"e291bc8c5f0c21080baa549d5d9ef2f39a871ea7","modified":1528941334804},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"2834870661e490775f9154d71638bfdc72e640a6","modified":1528941334805},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"6f7aa810f296d6a1a4486637b5a853d35a198938","modified":1528941334806},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1528941334807},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"ac19f1621305ca9f6a7b74acd211a4c0d88690bd","modified":1528941334808},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"680c7b809b62cd3ad294e822793fbd0b1a32cc33","modified":1528941334809},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"1fb15f13ba70d5b954f62920c6b63d26e2fb2985","modified":1528941334811},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"4132e25ba9680c4b911a01abc75f501cda3fa4f1","modified":1528941334812},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"8d971a00e644a600179b04815688d188f094012e","modified":1528941334813},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1528941334818},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1528941334819},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1528941334825},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1528941334837},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1528941334839},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1528941334840},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1528941334841},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1528941334841},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1528941334838},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1528941334814},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1528941334815},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1528941334824},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1528941334829},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1528941334822},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1528942501353},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1528942501355},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1528942501356},{"_id":"themes/next/.gitignore","hash":"b935cc0e5b099ebd343ca1766e02f65138c13dd0","modified":1528942501361},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1528942501363},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1528942501362},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1528942501364},{"_id":"themes/next/.travis.yml","hash":"360f38044910e74bf628b0799e19db90718b2cbe","modified":1528942501365},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1528942501364},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1528942501366},{"_id":"themes/next/README.en.md","hash":"fd7a00ae9026fb4f87dd7eed9ce049d0db447140","modified":1528942501367},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1528942501368},{"_id":"themes/next/bower.json","hash":"63c38f50fb54b25bf5101f566189f9e5b3a6ef0e","modified":1528942501370},{"_id":"themes/next/_config.yml","hash":"2b1b44d034f1d1d1a6c6127f63c5fdcb97bd2f33","modified":1528955565096},{"_id":"themes/next/package.json","hash":"85a77bafb3d1e958b82e52528b7a95fcd59efda9","modified":1528942501454},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1528942501371},{"_id":"themes/next/.git/HEAD","hash":"75173e2dd18a6221ff84742ff53d01ac5c6e04b0","modified":1528942501333},{"_id":"themes/next/.git/config","hash":"0e5ba51fc991719ca8f04439939b2ebd368e853e","modified":1528942038233},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1528942035042},{"_id":"themes/next/.git/index","hash":"027b3f4d24622c18964c376ae8aee6be8df4e9b9","modified":1528969405331},{"_id":"themes/next/.git/packed-refs","hash":"8e36811256ee380c2c65692f1b8f8e77c5bc33c9","modified":1528942501317},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1528942501357},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"3178cadcec94bfad651bdf320d83946b4e0ac932","modified":1528942501359},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"55091b1aab0b472d3f3e239c8d93306c751e4c1c","modified":1528942501360},{"_id":"themes/next/languages/de.yml","hash":"4be3e7d296d5592e0d111dfa6cbbff02602c972d","modified":1528942501373},{"_id":"themes/next/languages/en.yml","hash":"b3ee45143bc014578db6b8ac0573f7c7b143a743","modified":1528942501375},{"_id":"themes/next/languages/default.yml","hash":"d912814caac150da1611c96843371a87714e52f9","modified":1528942501374},{"_id":"themes/next/languages/fr-FR.yml","hash":"0d5bd8bbbeafb72506124ed35e7509debc753612","modified":1528942501376},{"_id":"themes/next/languages/id.yml","hash":"c0848e93bf33a1333ff232905b6b392b1e056dd1","modified":1528942501377},{"_id":"themes/next/languages/ja.yml","hash":"1a608dc799c0f9c36b626bac6fe3404acb45b86d","modified":1528942501378},{"_id":"themes/next/languages/pt-BR.yml","hash":"cc8b5a67ec87b0d5aec6e253bab67ec3cfe3069c","modified":1528942501380},{"_id":"themes/next/languages/ko.yml","hash":"5c811514aef401317a9ec38b95679d6d2ef0ad42","modified":1528942501379},{"_id":"themes/next/languages/ru.yml","hash":"84d41a111e497236b2c1fa16e9b91668a1f37037","modified":1528942501382},{"_id":"themes/next/languages/zh-hk.yml","hash":"b58c0d85daa4d62b0c9753a59de0739aa0120735","modified":1528942501384},{"_id":"themes/next/languages/pt.yml","hash":"943475a7d681f37ede579cd62da9c50568ca0f8d","modified":1528942501381},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3111ce4cc5f30868b3628f9f805d2aef3b75d1c1","modified":1528942815300},{"_id":"themes/next/layout/_layout.swig","hash":"b88585f9e1b7071f6670b20b77b656edd087ccc9","modified":1528942501389},{"_id":"themes/next/languages/zh-tw.yml","hash":"8ce0a32411de111ae39d08e4bc936767dacdeb08","modified":1528942501385},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1528942501449},{"_id":"themes/next/layout/archive.swig","hash":"c2be7c95af6205c7501a261f2fc9702c57107f89","modified":1528942501448},{"_id":"themes/next/layout/post.swig","hash":"182a99b1f6db0350106c6bb480fede0bbdb7e40f","modified":1528942501452},{"_id":"themes/next/layout/index.swig","hash":"4bf29f44ca9519a005671f2f2a79a48a148b435b","modified":1528942501450},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1528942501453},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1528942501453},{"_id":"themes/next/layout/page.swig","hash":"dbff0302b4bfabb51556a197bf65190eb30361f0","modified":1528942501451},{"_id":"themes/next/scripts/merge-configs.js","hash":"3ce1be32bb77ee19da25e8dae7dc04e2afc46ca1","modified":1528942501455},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1528942501457},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1528942501714},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1528942501715},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1528942501716},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1528942501574},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1528942035044},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1528942035045},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1528942035048},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1528942035046},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1528942035050},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1528942035055},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1528942035056},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1528942035057},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1528942035060},{"_id":"themes/next/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1528942035058},{"_id":"themes/next/.git/logs/HEAD","hash":"0e64e488c2b003d9bab83d337f0aa161fe8bdfd8","modified":1528942501334},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1528942501387},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1528942501387},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1528942501390},{"_id":"themes/next/layout/_macro/post.swig","hash":"b6b86a199f5a3692ec492123fe8cb53a8ca08169","modified":1528942501392},{"_id":"themes/next/layout/_macro/reward.swig","hash":"5b1e91c2f6f88fbecd426cd0727e7b7854c6cc1d","modified":1528942501393},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"0f59a51b5cea3e8a7c078db486626cddc2978622","modified":1528942501391},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"f10ca698e8ea0c31ff72a6cffa832c3cd703a133","modified":1528942501394},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1528942501395},{"_id":"themes/next/layout/_partials/comments.swig","hash":"7a229b569743555215a4f2561997ad496d81e938","modified":1528942501396},{"_id":"themes/next/layout/_partials/footer.swig","hash":"683616f4a80796051e2346d80acf838a589450b0","modified":1528942501397},{"_id":"themes/next/layout/_partials/header.swig","hash":"d6bf1d1554d91eaf1bfc40ba8905ae81673e5f45","modified":1528942501401},{"_id":"themes/next/layout/_partials/head.swig","hash":"476e6c2452732c2741f518004d336bc348e710d7","modified":1528942501398},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1528942501402},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1528942501403},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1528942501404},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1528942501413},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1528942501414},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"53c894e6f3573c662dc4e4f7b5a6f1a32f1a8c94","modified":1528942501419},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1528942501436},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1528942501437},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1528942501437},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1528942501438},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1528942501439},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1528942501440},{"_id":"themes/next/scripts/tags/button.js","hash":"aaf71be6b483fca7a65cd6296c2cf1c2271c26a6","modified":1528942501458},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1528942501459},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1528942501460},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1528942501461},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1528942501462},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1528942501463},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1528942501464},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1528942501465},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1528942501465},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1528942501576},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1528942501573},{"_id":"themes/next/source/images/avatar.gif","hash":"0b23ebb92ec3cdb95c993a53ed9a277fc3476830","modified":1528949581782},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1528942501579},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1528942501580},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1528942501578},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1528942501581},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1528942501582},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1528942501583},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1528942501584},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1528942501585},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1528942501586},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1528942501587},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1528942501586},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1528942501588},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1528942501417},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1528942501417},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1528942501540},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1528942501541},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1528942501543},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1528942501569},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1528942501572},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1528942501399},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1528942501400},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1528942501405},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1528942501407},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1528942501406},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1528942501409},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1528942501408},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1528942501415},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1528942501416},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1528942501410},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1528942501418},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1528942501421},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1528942501422},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1528942501423},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1528942501424},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1528942501425},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"441f1a1b4e2f652d3b975995bd9d44ff4866f057","modified":1528942501426},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1528942501411},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1528942501427},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1528942501428},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1528942501428},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1528942501429},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1528942501430},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1528942501431},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1528942501432},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"be2aaeb8f05979e2ba501248480d5294256d61f2","modified":1528942501434},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1528942501434},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1528942501433},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1528942501435},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1528942501422},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1528942501445},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1528942501444},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1528942501446},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1528942501448},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1528942501539},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1528942501540},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"bf009e85212749405c27d89b49f401911355ecc7","modified":1528942501542},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1528942501543},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1528942501569},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"89f88b9c9a191dd980f799fc36b83b63290d3ac9","modified":1528942501570},{"_id":"themes/next/source/css/_variables/base.styl","hash":"a627633d3bb70b8501572b18037def478beb7017","modified":1528942501571},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"2a4e844dec690365774c2f6e8984706fee39ea63","modified":1528942501568},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1528942501590},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1528942501591},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1528942501593},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"96c8b5fe1999de1b3a46730d9812787dfcd65884","modified":1528942501592},{"_id":"themes/next/source/js/src/motion.js","hash":"dda8c76fce91d7f140c06de2583ba806810f12c2","modified":1528942501597},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1528942501596},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1528942501595},{"_id":"themes/next/source/js/src/post-details.js","hash":"50fa390554f0fb467d8eb84ac8eff2cffb13fe67","modified":1528942501598},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1528942501601},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1528942501600},{"_id":"themes/next/source/js/src/utils.js","hash":"f90c7611dc665b5e321cb81c0bd689445bab438a","modified":1528942501602},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1528942501614},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1528942501619},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1528942501623},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1528942501622},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"82fee688910efc644d3d1c3305c6ae28ba3f38f9","modified":1528942501621},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1528942501639},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1528942501642},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1528942501640},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1528942501641},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1528942501671},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1528942501675},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1528942501676},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1528942501677},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1528942501678},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1528942501679},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1528942501646},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1528942501648},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1528942501647},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1528942501649},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1528942501650},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1528942501674},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1528942501680},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1528942501682},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1528942501681},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1528942501683},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1528942501685},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1528942501686},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1528942501687},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1528942501688},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1528942501684},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1528942501689},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1528942501690},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1528942501692},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1528942501691},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1528942501694},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1528942501695},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1528942501696},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1528942501697},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1528942501707},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1528942501706},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1528942501711},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1528942501712},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1528942501713},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1528942501672},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1528942501442},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1528942501444},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1528942501326},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1528942501471},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"b0e2a0e27a32f72cb283fe4b33d010d485113379","modified":1528942501468},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1528942501470},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1528942501469},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1528942501472},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1528942501487},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1528942501513},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1528942501531},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"a509016ac0227a1903d7f0ca3a825cf9ac7fde33","modified":1528942501545},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1528942501533},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"eec22651977ea25b5e65e8cb1b4906eef69ec588","modified":1528942501532},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1528942501535},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"9a45ed506274f655b11995c408cc566b16dada79","modified":1528942501534},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1528942501538},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1528942501546},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1528942501536},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1528942501547},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1528942501549},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1528942501548},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"ce272226a1570f5f7c70243b751a5b0fe1671a88","modified":1528942501550},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1528942501550},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1528942501551},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1528942501555},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1528942501556},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"f23ac53ab901c48859dd29eee6e386b60ff956ba","modified":1528942501558},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1528942501559},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1528942501559},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1528942501562},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1528942501563},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1528942501564},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1528942501564},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"c48d4a561d047b3705924949b3ab7b57bee94ecd","modified":1528942501565},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1528942501566},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"c4358416f0a116d7f4037542fa3b385947e80908","modified":1528942501599},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1528942501609},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1528942501612},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1528942501611},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1528942501624},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1528942501625},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1528942501627},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1528942501626},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1528942501628},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1528942501629},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1528942501637},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1528942501636},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1528942501638},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1528942501643},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1528942501645},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1528942501652},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1528942501651},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1528942501653},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1528942501704},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1528942501703},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1528942501610},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1528942501668},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1528942501670},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1528942501710},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"cf00f5ce379ba855fdd2339c74cc351c29812e15","modified":1528942501331},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1528942501476},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1528942501473},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1528942501476},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1528942501477},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1528942501475},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1528942501480},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"b3b783511bbd94af7e941abf8ff411885db7395b","modified":1528942501480},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1528942501478},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1528942501481},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1528942501483},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1528942501483},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1528942501484},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1528942501485},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"4783f85872bc7e218c1522a5c1c68cd27a5922db","modified":1528942501488},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1528942501489},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1528942501486},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1528942501490},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1528942501493},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1528942501491},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"658accf8e196721f295003da66941e6d1f7b81b0","modified":1528942501494},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1528942501495},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"58f9e6aba94733244a87d2ba5966c5a009486509","modified":1528942501492},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1528942501497},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1528942501496},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"f363a544aa800a2a5ed97c40887fe9743f67b03b","modified":1528942501496},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1528942501498},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1528942501499},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"2cb09973d29a8e34e2a3425ac6e0938296970d8e","modified":1528942501500},{"_id":"themes/next/source/css/_common/components/post/post-wordcount.styl","hash":"268c9704481fdb0b4d1e646196386143990fe235","modified":1528942501500},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"efc65bba7f2423439e9bca7d32ef7728c21e5c97","modified":1528942501501},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1528942501504},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"5f3510419161ec22ca88cce6a181ddad61de9e86","modified":1528942501503},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"ac060861b27b764bc4012fc362a25a332df4045a","modified":1528942501505},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1528942501506},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1528942501506},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"28a8737c090fbffd188d73a00b42e90b9ee57df2","modified":1528942501508},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1528942501507},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1528942501510},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"8e00d9a0bdf35ffc0a7fa387fa294b953c2d28fc","modified":1528942501511},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1528942501512},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1528942501515},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1528942501517},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1528942501514},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1528942501517},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"3159b55f35c40bd08e55b00148c523760a708c51","modified":1528942501516},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"962b654f8f7cbd18a298126a403d236ed4540516","modified":1528942501518},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1528942501519},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1528942501520},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1528942501521},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1528942501523},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1528942501524},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1528942501525},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1528942501526},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1528942501527},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1528942501528},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1528942501529},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"37e406ec42b7a53c72395bdbaa434270019e7179","modified":1528942501530},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1528942501554},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1528942501553},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1528942501561},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1528942501606},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1528942501605},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1528942501607},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1528942501608},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1528942501630},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1528942501632},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1528942501633},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1528942501631},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1528942501634},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1528942501635},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1528942501656},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1528942501659},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1528942501667},{"_id":"themes/next/.git/objects/pack/pack-de11fe68e359cdf1ae6e6ee69d7f5d0172a92739.idx","hash":"a52e84d61b433f547bfbcd32894dc01a2ac79c61","modified":1528942501273},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1528942501618},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1528942501701},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1528942501664},{"_id":"themes/next/.git/objects/pack/pack-de11fe68e359cdf1ae6e6ee69d7f5d0172a92739.pack","hash":"2e005fb7731adfcffbd7904e37e3dbbad47391cf","modified":1528942501277},{"_id":"source/tags/index.md","hash":"cb5521d97f4491f81ee80e782002180d0f366d26","modified":1528943445966},{"_id":"source/categories/index.md","hash":"a70d24d951d01ae39cb3382bc7e6a07a4f2ec315","modified":1528943557113},{"_id":"source/_posts/20188-06-14/brand5.png","hash":"f01007a76eae99c6c7cab38dcfd6fe9a107b0ed1","modified":1528946043508},{"_id":"source/_posts/2018-06-14/brand5.png","hash":"f01007a76eae99c6c7cab38dcfd6fe9a107b0ed1","modified":1528946043508},{"_id":"source/_posts/2018-06-14.md","hash":"4ec42adbe839c132fd6d12f3f3405af7241b6131","modified":1529024209928},{"_id":"source/_posts/2018-06-12.md","hash":"7f8313bfed75a07f590a4ca258349bc9450f8168","modified":1528955938840},{"_id":"source/_posts/2018-06-13.md","hash":"68a04e5240851b22296dd8e21115becdb9999179","modified":1529024740202},{"_id":"source/_posts/2018-06-13/brand5.png","hash":"f01007a76eae99c6c7cab38dcfd6fe9a107b0ed1","modified":1528946043508},{"_id":"public/tags/index.html","hash":"6fef6af44605e362d34a057bcc26b4b153644670","modified":1528955979343},{"_id":"public/categories/index.html","hash":"95a7be666786e9d5b7a7cc58b25ed2e0e1a437d8","modified":1528955979343},{"_id":"public/archives/index.html","hash":"6eb28df60df71b3f2733e300910ba312055fae1b","modified":1528955979343},{"_id":"public/archives/2018/index.html","hash":"b4120750fb77318eb49792f57c81f86944595ae4","modified":1528955979343},{"_id":"public/archives/2018/06/index.html","hash":"0f103086f919b5371b6fd420856944acd41bb45f","modified":1528955979343},{"_id":"public/tags/前端/index.html","hash":"d7349004c1a0a987364142c41da3932caa0dc489","modified":1528955979343},{"_id":"public/tags/缓存/index.html","hash":"c41c333dc7c70996208308901ba635e9f88593b7","modified":1528955979343},{"_id":"public/tags/hexo/index.html","hash":"b0266d17208d7550156a4abe7bf97abc88ba490a","modified":1528955979344},{"_id":"public/2018/06/13/2018-06-13/index.html","hash":"3c54dbf6d83a2b438ae561454e64f307291bf793","modified":1528955979344},{"_id":"public/2018/06/12/2018-06-12/index.html","hash":"f225aea23d357b884c92acbd93f39d989b81faac","modified":1528955979344},{"_id":"public/index.html","hash":"f4fa25f8a18961a47f5c206dc233841af3785dc1","modified":1528955979344},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1528955979352},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1528955979352},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1528955979352},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1528955979352},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1528955979352},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1528955979352},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1528955979352},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1528955979352},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1528955979352},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1528955979352},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1528955979352},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1528955979352},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1528955979352},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1528955979352},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1528955979353},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1528955979353},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1528955979353},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1528955979353},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1528955979353},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1528955979353},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1528955979353},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1528955979353},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1528955979353},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1528955979353},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1528955979353},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1528955979353},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1528955979353},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1528955979353},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1528955979353},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1528955979353},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1528955979353},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1528955979353},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1528955979353},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1528955979354},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1528955979354},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1528955979354},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1528955979354},{"_id":"public/2018/06/13/2018-06-13/brand5.png","hash":"f01007a76eae99c6c7cab38dcfd6fe9a107b0ed1","modified":1528955979354},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1528955981443},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1528955981445},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1528955981453},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1528955981459},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1528955981459},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1528955981459},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1528955981459},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1528955981459},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1528955981460},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1528955981460},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1528955981460},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1528955981460},{"_id":"public/js/src/bootstrap.js","hash":"6117f97b4984b8e33f21c726132da64ba678e4ed","modified":1528955981460},{"_id":"public/js/src/motion.js","hash":"dc0365b2fb315a8b43d3ef19b59d3a82a366fcc1","modified":1528955981460},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1528955981460},{"_id":"public/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1528955981460},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1528955981460},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1528955981460},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1528955981460},{"_id":"public/js/src/utils.js","hash":"2917c39c75b14b6dab7e1c46ab4d87b4df9fcd5d","modified":1528955981460},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1528955981460},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1528955981460},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1528955981460},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1528955981460},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1528955981460},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1528955981460},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1528955981460},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1528955981460},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1528955981461},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1528955981461},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1528955981461},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1528955981461},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1528955981461},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1528955981461},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1528955981461},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1528955981461},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1528955981461},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1528955981461},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1528955981462},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1528955981462},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1528955981462},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1528955981462},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1528955981462},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1528955981462},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1528955981462},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1528955981462},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1528955981462},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1528955981462},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1528955981462},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1528955981462},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1528955981462},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1528955981462},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1528955981462},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1528955981462},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1528955981462},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1528955981462},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1528955981462},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1528955981463},{"_id":"public/css/style.css","hash":"5f8dadd37d0052c557061018fe6f568f64fced9b","modified":1528955981463},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1528955981463},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1528955981463},{"_id":"public/css/main.css","hash":"f716241e5ffa1c29ed8c1707bc80559883faacc4","modified":1528955981463},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1528955981463},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1528955981463},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1528955981463},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1528955981463},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1528955981463},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1528955981463},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1528955981463},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1528955981463},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1528955981463},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1528955981464},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1528955981464},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1528955981464},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1528955981464},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1528955981464},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1528955981464},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1528955981464},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1528955981464},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1528955981464},{"_id":"public/images/avatar.gif","hash":"0b23ebb92ec3cdb95c993a53ed9a277fc3476830","modified":1528955981465},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1528955981465},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1528955981465},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1528955981465},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1528955981472},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1528955981472},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1528955981589},{"_id":"source/_posts/2018-06-05.md","hash":"dee0013540ca63f901b510bcb9ceef7a86591511","modified":1528968907177},{"_id":"source/_posts/2018-06-11.md","hash":"d04dd7e9bebb7637244cf120b44a6305a015c4ba","modified":1528968436411},{"_id":"source/_posts/2018-06-13/1.PNG","hash":"2f3dfbea4976839f8941f85ec80ba69f3ccff37b","modified":1529024651414},{"_id":"source/_posts/git实用命令.md","hash":"4b210fbfe33eaf3787b37aaf57c7bb65d55fab68","modified":1531124277027},{"_id":"source/_posts/hexo注意事项.md","hash":"f54e369e23403c06e5e337211b152d62699c2b1c","modified":1529044456895},{"_id":"source/_posts/linux下使用docker搭建sentry.md","hash":"1ea0386beaf581885e6852ea4c16cadbb949dcb3","modified":1529044436653},{"_id":"source/_posts/webpack分模块打包.md","hash":"120d53f67a636f778c787bccb314876e2fbb5cbc","modified":1531203327121},{"_id":"source/_posts/webpack打包原理.md","hash":"fa6366159cdafa88c15ac423a2d523819dbf375d","modified":1531201873565},{"_id":"source/_posts/前端异常监控.md","hash":"d0778a297159cc84503f877d790b9fd4a096bd25","modified":1529044479360},{"_id":"source/_posts/前端缓存.md","hash":"a82685733abb96157e2dc88ab2838d83d1640644","modified":1529044390570},{"_id":"source/_posts/前端静态资源缓存策略.md","hash":"d343c0aa7a04a41eda243a63584b1432d20d2422","modified":1530865882851},{"_id":"source/_posts/缓存策略三要素分解法.md","hash":"fa9325b8b27c0b31abff0416a0bd1f7d0b4e26ac","modified":1529043333027},{"_id":"source/_posts/实用工具.md","hash":"cfae41084259ca3a1db2eb637d1b34322e134986","modified":1529055409302},{"_id":"source/_posts/webpack分模块打包/index2.js","hash":"069e845329913d3455d9c27b5bafc9fefa7844f4","modified":1531124372078},{"_id":"source/_posts/webpack分模块打包/index.js","hash":"14a272da8df2fa995095745e9a65df889ada035e","modified":1531124346082},{"_id":"source/_posts/webpack分模块打包/package.json","hash":"4cab055cc35012633959f239f7e1905fbc5cf6de","modified":1531206018141},{"_id":"source/_posts/webpack分模块打包/pageA.js","hash":"c62fa44df0349f4a13297190f296a4d574bb7306","modified":1531188369642},{"_id":"source/_posts/webpack分模块打包/util.js","hash":"8605c17b88452c71d7cc19a9afb30a991faa2f02","modified":1531124395005},{"_id":"source/_posts/webpack分模块打包/webpack.config.js","hash":"6775cb4944c8ade2407ed9c7cd76cfd341b307a6","modified":1531207249806},{"_id":"source/_posts/webpack分模块打包/webpack.config.dev.js","hash":"d600182d731166d0a44ad19f58f02053c1c8b864","modified":1531189172821},{"_id":"source/_posts/webpack分模块打包/pageB.js","hash":"c377d22a2b065484283e2b689b0f59fcce5c5c66","modified":1531188434806},{"_id":"source/_posts/前端缓存/2.png","hash":"215c9c5c6418ccc91625f9d1738446940b972f53","modified":1529026289636},{"_id":"source/_posts/前端缓存/1.PNG","hash":"2f3dfbea4976839f8941f85ec80ba69f3ccff37b","modified":1529024651414},{"_id":"source/_posts/前端缓存/5.png","hash":"0fd34594118157391804a7e9f412b01b66df73f2","modified":1529026880331},{"_id":"source/_posts/前端缓存/4.png","hash":"cf0af203a01cbebf5850ad6f40cd3b3526b39eab","modified":1529026863289},{"_id":"source/_posts/前端缓存/7.png","hash":"968636bdf68fa44a91bf275683e14238498ce56c","modified":1529027678271},{"_id":"source/_posts/前端缓存/3.png","hash":"b65c7c732bf1965a852c54c0372cef7264a065b3","modified":1529026846944},{"_id":"source/_posts/前端缓存/6.png","hash":"0d8cb8a4b075dcf315edea5f4924172ac9430b39","modified":1529027420713},{"_id":"source/_posts/前端缓存/8.png","hash":"1da645cfe64015af1ca3cca35e7dfb90a5fd82ad","modified":1529027811794},{"_id":"source/_posts/前端静态资源缓存策略/md5.png","hash":"d43b0efe63b73877343c6dd1ae00a3cbef05b754","modified":1529052789700},{"_id":"source/_posts/前端静态资源缓存策略/deploy.png","hash":"73b5784722c0866813de92778d90a9b6d24ebbb2","modified":1529051755965},{"_id":"source/_posts/前端缓存/10.png","hash":"e9866b54d4768300b874e545b0d9a49ecfb64eec","modified":1529029049634},{"_id":"source/_posts/前端缓存/9.png","hash":"1143ee3a2f14b583e88345c1ab81e7f79f66f045","modified":1529028146970},{"_id":"source/_posts/linux下使用docker搭建sentry/11.png","hash":"79109b4a9d085bebd81a218ae259f69761a1437a","modified":1529042775897},{"_id":"source/_posts/webpack分模块打包/js/utilA.js","hash":"ee258a37c9635b3cbce1c6c1b132b7f52d476585","modified":1531186335550},{"_id":"source/_posts/webpack分模块打包/js/utilC.js","hash":"4b8e540d8ec5f476595b4aa56443bbe456b046bb","modified":1531186383917},{"_id":"source/_posts/webpack分模块打包/js/utilB.js","hash":"b4e5366e18ef4278f23f254f52d3cdfe9c9e6fcb","modified":1531186352394},{"_id":"source/_posts/webpack分模块打包/src/index.js","hash":"c4feeadeec64be1c8b98afb6a569a3a714aefdee","modified":1531204019676},{"_id":"source/_posts/webpack分模块打包/src/page.js","hash":"c1de6e63d12a0bc2587151927254cbc196e31a8d","modified":1531192087450}],"Category":[{"name":"前端","_id":"cjif9ve8700025sxd7nvyp3dl"},{"name":"前端工程","_id":"cjjfde8rs00075kxdrwqpmd7g"}],"Data":[],"Page":[{"title":"All tags","date":"2018-06-14T02:29:47.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: All tags\ndate: 2018-06-14 10:29:47\ntype: \"tags\"\n---\n","updated":"2018-06-14T02:30:45.966Z","path":"tags/index.html","_id":"cjidxezuv0000cgxdm42rjztr","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2018-06-14T02:31:52.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-06-14 10:31:52\ntype: \"categories\"\n---\n","updated":"2018-06-14T02:32:37.113Z","path":"categories/index.html","_id":"cjidxhob60001cgxds25piupb","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"git实用命令","date":"2018-07-06T11:23:00.000Z","_content":"\n回退命令：\n\n```bash\n$ git reset --hard HEAD^         回退到上个版本\n$ git reset --hard HEAD~3        回退到前3次提交之前，以此类推，回退到n次提交之前\n$ git reset --hard commit_id     退到/进到 指定commit的sha码\n```\n强推到远程：\n```bash\n$ git push origin HEAD --force\n```","source":"_posts/git实用命令.md","raw":"---\ntitle: git实用命令\ndate: 2018-07-06 19:23:00\ntags: [git]\n---\n\n回退命令：\n\n```bash\n$ git reset --hard HEAD^         回退到上个版本\n$ git reset --hard HEAD~3        回退到前3次提交之前，以此类推，回退到n次提交之前\n$ git reset --hard commit_id     退到/进到 指定commit的sha码\n```\n强推到远程：\n```bash\n$ git push origin HEAD --force\n```","slug":"git实用命令","published":1,"updated":"2018-07-09T08:17:57.027Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjfde8rg00005kxda9dgr29n","content":"<p>回退命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reset --hard HEAD^         回退到上个版本</span><br><span class=\"line\">$ git reset --hard HEAD~3        回退到前3次提交之前，以此类推，回退到n次提交之前</span><br><span class=\"line\">$ git reset --hard commit_id     退到/进到 指定commit的sha码</span><br></pre></td></tr></table></figure>\n<p>强推到远程：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin HEAD --force</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>回退命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reset --hard HEAD^         回退到上个版本</span><br><span class=\"line\">$ git reset --hard HEAD~3        回退到前3次提交之前，以此类推，回退到n次提交之前</span><br><span class=\"line\">$ git reset --hard commit_id     退到/进到 指定commit的sha码</span><br></pre></td></tr></table></figure>\n<p>强推到远程：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin HEAD --force</span><br></pre></td></tr></table></figure></p>\n"},{"title":"hexo注意事项","date":"2018-06-01T02:31:52.000Z","_content":"\n### 图片问题\n\n修改`_config.yml`配置文件`post_asset_folder`项为`true`。\n创建博客命令\n```bash\nhexo new \"这是一个新的博客\"\n```\n使用完命令之后，在source/_post文件夹里面就会出现一个“这是一个新的博客.md”的文件和一个“这是一个新的博客”的文件夹。\n下一步就是把需要的图片放到新创建的那个文件夹里面去。\n**引用图片的方法**\n```\n{% asset_img 这是一个新的博客的图片.jpg 这是一个新的博客的图片的说明 %}\n```\n> hexo3以上使用\n\n### 头像更换\n更换主题下的source/images/avatar.gif\n\n### 段落缩进\n```bash\n半方大的空白&ensp;或&#8194;\n全方大的空白&emsp;或&#8195;\n不断行的空白格&nbsp;或&#160;\n```\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hexo注意事项.md","raw":"---\ntitle: hexo注意事项\ndate: 2018-06-01 10:31:52\ntag: hexo\n---\n\n### 图片问题\n\n修改`_config.yml`配置文件`post_asset_folder`项为`true`。\n创建博客命令\n```bash\nhexo new \"这是一个新的博客\"\n```\n使用完命令之后，在source/_post文件夹里面就会出现一个“这是一个新的博客.md”的文件和一个“这是一个新的博客”的文件夹。\n下一步就是把需要的图片放到新创建的那个文件夹里面去。\n**引用图片的方法**\n```\n{% asset_img 这是一个新的博客的图片.jpg 这是一个新的博客的图片的说明 %}\n```\n> hexo3以上使用\n\n### 头像更换\n更换主题下的source/images/avatar.gif\n\n### 段落缩进\n```bash\n半方大的空白&ensp;或&#8194;\n全方大的空白&emsp;或&#8195;\n不断行的空白格&nbsp;或&#160;\n```\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hexo注意事项","published":1,"updated":"2018-07-10T07:30:18.913Z","_id":"cjjfde8rk00015kxd8jnp5ugc","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"图片问题\"><a href=\"#图片问题\" class=\"headerlink\" title=\"图片问题\"></a>图片问题</h3><p>修改<code>_config.yml</code>配置文件<code>post_asset_folder</code>项为<code>true</code>。<br>创建博客命令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new <span class=\"string\">\"这是一个新的博客\"</span></span><br></pre></td></tr></table></figure></p>\n<p>使用完命令之后，在source/_post文件夹里面就会出现一个“这是一个新的博客.md”的文件和一个“这是一个新的博客”的文件夹。<br>下一步就是把需要的图片放到新创建的那个文件夹里面去。<br><strong>引用图片的方法</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% asset_img 这是一个新的博客的图片.jpg 这是一个新的博客的图片的说明 %&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>hexo3以上使用</p>\n</blockquote>\n<h3 id=\"头像更换\"><a href=\"#头像更换\" class=\"headerlink\" title=\"头像更换\"></a>头像更换</h3><p>更换主题下的source/images/avatar.gif</p>\n<h3 id=\"段落缩进\"><a href=\"#段落缩进\" class=\"headerlink\" title=\"段落缩进\"></a>段落缩进</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">半方大的空白&amp;ensp;或&amp;<span class=\"comment\">#8194;</span></span><br><span class=\"line\">全方大的空白&amp;emsp;或&amp;<span class=\"comment\">#8195;</span></span><br><span class=\"line\">不断行的空白格&amp;nbsp;或&amp;<span class=\"comment\">#160;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"图片问题\"><a href=\"#图片问题\" class=\"headerlink\" title=\"图片问题\"></a>图片问题</h3><p>修改<code>_config.yml</code>配置文件<code>post_asset_folder</code>项为<code>true</code>。<br>创建博客命令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new <span class=\"string\">\"这是一个新的博客\"</span></span><br></pre></td></tr></table></figure></p>\n<p>使用完命令之后，在source/_post文件夹里面就会出现一个“这是一个新的博客.md”的文件和一个“这是一个新的博客”的文件夹。<br>下一步就是把需要的图片放到新创建的那个文件夹里面去。<br><strong>引用图片的方法</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% asset_img 这是一个新的博客的图片.jpg 这是一个新的博客的图片的说明 %&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>hexo3以上使用</p>\n</blockquote>\n<h3 id=\"头像更换\"><a href=\"#头像更换\" class=\"headerlink\" title=\"头像更换\"></a>头像更换</h3><p>更换主题下的source/images/avatar.gif</p>\n<h3 id=\"段落缩进\"><a href=\"#段落缩进\" class=\"headerlink\" title=\"段落缩进\"></a>段落缩进</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">半方大的空白&amp;ensp;或&amp;<span class=\"comment\">#8194;</span></span><br><span class=\"line\">全方大的空白&amp;emsp;或&amp;<span class=\"comment\">#8195;</span></span><br><span class=\"line\">不断行的空白格&amp;nbsp;或&amp;<span class=\"comment\">#160;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"linux下使用docker搭建sentry","date":"2018-06-11T11:31:52.000Z","_content":"\n# 准备工作\n## 安装docker\n可以通过apt-get或者wget安装\n```bash\n$ wget -qO- https://get.docker.com/ | sh\n```\n通过docker --version可以查看版本号并确认是否安装成功。\n## 安装docker-compose\nCompose是用于定义和运行复杂Docker应用的工具。你可以在一个文件中定义一个多容器的应用，然后使用一条命令来启动你的应用，然后所有相关的操作都会被自动完成。\n通过curl从github上获取最新的版本，**这个命令需要使用sudo -i切换到root用户**。\n```bash\ncurl -L https://github.com/docker/compose/releases/download/1.9.0/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose\nchmod +x /usr/local/bin/docker-compose\n```\n执行完成后通过`exit`退出root用户。\n可以通过`docker-compose --version`查看版本号并确定是否安装成功。\n\n# 正式搭建sentry\n## 获取sentry\n从github上可以获取最新的sentry。\n```bash\ngit clone https://github.com/getsentry/onpremise.git\n```\n## 搭建sentry\n第一步: 制作我们的本地数据库和sentry配置目录。\n```bash\nmkdir  -p data/{sentry,postgres}\n```\n第二步: 生成一个密钥。将其作为SENTRY_SECRET_KEY添加到dock中的docker-compose.yml中。\n```bash\ndocker-compose run --rm web config generate-secret-key\n```\n第三步：建立数据库。使用交互式提示创建用户帐户。\n```bash\ndocker-compose run --rm web upgrade\n```\n第四步：启动所有服务\n```bash\ndocker-compose up -d\n```\n至此，就可以访问本机的9000端口，使用之前填写的邮箱和口令进入sentry平台了。\n{% asset_img 11.png  sentry效果图 %}\n\n# 邮箱配置\n修改 sentry.config.py文件的配置\n\n```bash\n#email = env('SENTRY_EMAIL_HOST') or (env('SMTP_PORT_25_TCP_ADDR') and 'smtp')\n#if email:\n#    SENTRY_OPTIONS['mail.backend'] = 'smtp'\n#    SENTRY_OPTIONS['mail.host'] = email\n#    SENTRY_OPTIONS['mail.password'] = env('SENTRY_EMAIL_PASSWORD') or ''\n#    SENTRY_OPTIONS['mail.username'] = env('SENTRY_EMAIL_USER') or ''\n#    SENTRY_OPTIONS['mail.port'] = int(env('SENTRY_EMAIL_PORT') or 25)\n#    SENTRY_OPTIONS['mail.use-tls'] = env('SENTRY_EMAIL_USE_TLS', False)\n\nSENTRY_OPTIONS['mail.backend'] = 'smtp'\nSENTRY_OPTIONS['mail.host'] = 'smtp.qq.com'\nSENTRY_OPTIONS['mail.password'] = '*******'\nSENTRY_OPTIONS['mail.username'] = 'sentry@**.com'\nSENTRY_OPTIONS['mail.port'] = 587\nSENTRY_OPTIONS['mail.use-tls'] = True\n```\n然后重新启动服务\n```bash\ndocker-compose down（关闭删除容器）\ndocker-compose build （重新编译镜像）\nmake build （拷贝配置文件，可以不需要）\ndocker-compose up -d  （运行）\n```\n\n# 参考\n[linux和mac下搭建前端监控系统(基于sentry)](https://blog.csdn.net/itkingone/article/details/79005959)","source":"_posts/linux下使用docker搭建sentry.md","raw":"---\ntitle: linux下使用docker搭建sentry\ndate: 2018-06-11 19:31:52\ntags: [linux, docker, sentry]\n---\n\n# 准备工作\n## 安装docker\n可以通过apt-get或者wget安装\n```bash\n$ wget -qO- https://get.docker.com/ | sh\n```\n通过docker --version可以查看版本号并确认是否安装成功。\n## 安装docker-compose\nCompose是用于定义和运行复杂Docker应用的工具。你可以在一个文件中定义一个多容器的应用，然后使用一条命令来启动你的应用，然后所有相关的操作都会被自动完成。\n通过curl从github上获取最新的版本，**这个命令需要使用sudo -i切换到root用户**。\n```bash\ncurl -L https://github.com/docker/compose/releases/download/1.9.0/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose\nchmod +x /usr/local/bin/docker-compose\n```\n执行完成后通过`exit`退出root用户。\n可以通过`docker-compose --version`查看版本号并确定是否安装成功。\n\n# 正式搭建sentry\n## 获取sentry\n从github上可以获取最新的sentry。\n```bash\ngit clone https://github.com/getsentry/onpremise.git\n```\n## 搭建sentry\n第一步: 制作我们的本地数据库和sentry配置目录。\n```bash\nmkdir  -p data/{sentry,postgres}\n```\n第二步: 生成一个密钥。将其作为SENTRY_SECRET_KEY添加到dock中的docker-compose.yml中。\n```bash\ndocker-compose run --rm web config generate-secret-key\n```\n第三步：建立数据库。使用交互式提示创建用户帐户。\n```bash\ndocker-compose run --rm web upgrade\n```\n第四步：启动所有服务\n```bash\ndocker-compose up -d\n```\n至此，就可以访问本机的9000端口，使用之前填写的邮箱和口令进入sentry平台了。\n{% asset_img 11.png  sentry效果图 %}\n\n# 邮箱配置\n修改 sentry.config.py文件的配置\n\n```bash\n#email = env('SENTRY_EMAIL_HOST') or (env('SMTP_PORT_25_TCP_ADDR') and 'smtp')\n#if email:\n#    SENTRY_OPTIONS['mail.backend'] = 'smtp'\n#    SENTRY_OPTIONS['mail.host'] = email\n#    SENTRY_OPTIONS['mail.password'] = env('SENTRY_EMAIL_PASSWORD') or ''\n#    SENTRY_OPTIONS['mail.username'] = env('SENTRY_EMAIL_USER') or ''\n#    SENTRY_OPTIONS['mail.port'] = int(env('SENTRY_EMAIL_PORT') or 25)\n#    SENTRY_OPTIONS['mail.use-tls'] = env('SENTRY_EMAIL_USE_TLS', False)\n\nSENTRY_OPTIONS['mail.backend'] = 'smtp'\nSENTRY_OPTIONS['mail.host'] = 'smtp.qq.com'\nSENTRY_OPTIONS['mail.password'] = '*******'\nSENTRY_OPTIONS['mail.username'] = 'sentry@**.com'\nSENTRY_OPTIONS['mail.port'] = 587\nSENTRY_OPTIONS['mail.use-tls'] = True\n```\n然后重新启动服务\n```bash\ndocker-compose down（关闭删除容器）\ndocker-compose build （重新编译镜像）\nmake build （拷贝配置文件，可以不需要）\ndocker-compose up -d  （运行）\n```\n\n# 参考\n[linux和mac下搭建前端监控系统(基于sentry)](https://blog.csdn.net/itkingone/article/details/79005959)","slug":"linux下使用docker搭建sentry","published":1,"updated":"2018-06-15T06:33:56.653Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjfde8rn00035kxdlmg7bg2m","content":"<h1 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h1><h2 id=\"安装docker\"><a href=\"#安装docker\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h2><p>可以通过apt-get或者wget安装<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget -qO- https://get.docker.com/ | sh</span><br></pre></td></tr></table></figure></p>\n<p>通过docker –version可以查看版本号并确认是否安装成功。</p>\n<h2 id=\"安装docker-compose\"><a href=\"#安装docker-compose\" class=\"headerlink\" title=\"安装docker-compose\"></a>安装docker-compose</h2><p>Compose是用于定义和运行复杂Docker应用的工具。你可以在一个文件中定义一个多容器的应用，然后使用一条命令来启动你的应用，然后所有相关的操作都会被自动完成。<br>通过curl从github上获取最新的版本，<strong>这个命令需要使用sudo -i切换到root用户</strong>。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -L https://github.com/docker/compose/releases/download/1.9.0/docker-compose-`uname -s`-`uname -m` &gt; /usr/<span class=\"built_in\">local</span>/bin/docker-compose</span><br><span class=\"line\">chmod +x /usr/<span class=\"built_in\">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure></p>\n<p>执行完成后通过<code>exit</code>退出root用户。<br>可以通过<code>docker-compose --version</code>查看版本号并确定是否安装成功。</p>\n<h1 id=\"正式搭建sentry\"><a href=\"#正式搭建sentry\" class=\"headerlink\" title=\"正式搭建sentry\"></a>正式搭建sentry</h1><h2 id=\"获取sentry\"><a href=\"#获取sentry\" class=\"headerlink\" title=\"获取sentry\"></a>获取sentry</h2><p>从github上可以获取最新的sentry。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/getsentry/onpremise.git</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"搭建sentry\"><a href=\"#搭建sentry\" class=\"headerlink\" title=\"搭建sentry\"></a>搭建sentry</h2><p>第一步: 制作我们的本地数据库和sentry配置目录。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir  -p data/&#123;sentry,postgres&#125;</span><br></pre></td></tr></table></figure></p>\n<p>第二步: 生成一个密钥。将其作为SENTRY_SECRET_KEY添加到dock中的docker-compose.yml中。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose run --rm web config generate-secret-key</span><br></pre></td></tr></table></figure></p>\n<p>第三步：建立数据库。使用交互式提示创建用户帐户。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose run --rm web upgrade</span><br></pre></td></tr></table></figure></p>\n<p>第四步：启动所有服务<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure></p>\n<p>至此，就可以访问本机的9000端口，使用之前填写的邮箱和口令进入sentry平台了。<br><img src=\"/2018/06/11/linux下使用docker搭建sentry/11.png\" title=\"sentry效果图\"></p>\n<h1 id=\"邮箱配置\"><a href=\"#邮箱配置\" class=\"headerlink\" title=\"邮箱配置\"></a>邮箱配置</h1><p>修改 sentry.config.py文件的配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#email = env('SENTRY_EMAIL_HOST') or (env('SMTP_PORT_25_TCP_ADDR') and 'smtp')</span></span><br><span class=\"line\"><span class=\"comment\">#if email:</span></span><br><span class=\"line\"><span class=\"comment\">#    SENTRY_OPTIONS['mail.backend'] = 'smtp'</span></span><br><span class=\"line\"><span class=\"comment\">#    SENTRY_OPTIONS['mail.host'] = email</span></span><br><span class=\"line\"><span class=\"comment\">#    SENTRY_OPTIONS['mail.password'] = env('SENTRY_EMAIL_PASSWORD') or ''</span></span><br><span class=\"line\"><span class=\"comment\">#    SENTRY_OPTIONS['mail.username'] = env('SENTRY_EMAIL_USER') or ''</span></span><br><span class=\"line\"><span class=\"comment\">#    SENTRY_OPTIONS['mail.port'] = int(env('SENTRY_EMAIL_PORT') or 25)</span></span><br><span class=\"line\"><span class=\"comment\">#    SENTRY_OPTIONS['mail.use-tls'] = env('SENTRY_EMAIL_USE_TLS', False)</span></span><br><span class=\"line\"></span><br><span class=\"line\">SENTRY_OPTIONS[<span class=\"string\">'mail.backend'</span>] = <span class=\"string\">'smtp'</span></span><br><span class=\"line\">SENTRY_OPTIONS[<span class=\"string\">'mail.host'</span>] = <span class=\"string\">'smtp.qq.com'</span></span><br><span class=\"line\">SENTRY_OPTIONS[<span class=\"string\">'mail.password'</span>] = <span class=\"string\">'*******'</span></span><br><span class=\"line\">SENTRY_OPTIONS[<span class=\"string\">'mail.username'</span>] = <span class=\"string\">'sentry@**.com'</span></span><br><span class=\"line\">SENTRY_OPTIONS[<span class=\"string\">'mail.port'</span>] = 587</span><br><span class=\"line\">SENTRY_OPTIONS[<span class=\"string\">'mail.use-tls'</span>] = True</span><br></pre></td></tr></table></figure>\n<p>然后重新启动服务<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose down（关闭删除容器）</span><br><span class=\"line\">docker-compose build （重新编译镜像）</span><br><span class=\"line\">make build （拷贝配置文件，可以不需要）</span><br><span class=\"line\">docker-compose up -d  （运行）</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://blog.csdn.net/itkingone/article/details/79005959\" target=\"_blank\" rel=\"noopener\">linux和mac下搭建前端监控系统(基于sentry)</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h1><h2 id=\"安装docker\"><a href=\"#安装docker\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h2><p>可以通过apt-get或者wget安装<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget -qO- https://get.docker.com/ | sh</span><br></pre></td></tr></table></figure></p>\n<p>通过docker –version可以查看版本号并确认是否安装成功。</p>\n<h2 id=\"安装docker-compose\"><a href=\"#安装docker-compose\" class=\"headerlink\" title=\"安装docker-compose\"></a>安装docker-compose</h2><p>Compose是用于定义和运行复杂Docker应用的工具。你可以在一个文件中定义一个多容器的应用，然后使用一条命令来启动你的应用，然后所有相关的操作都会被自动完成。<br>通过curl从github上获取最新的版本，<strong>这个命令需要使用sudo -i切换到root用户</strong>。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -L https://github.com/docker/compose/releases/download/1.9.0/docker-compose-`uname -s`-`uname -m` &gt; /usr/<span class=\"built_in\">local</span>/bin/docker-compose</span><br><span class=\"line\">chmod +x /usr/<span class=\"built_in\">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure></p>\n<p>执行完成后通过<code>exit</code>退出root用户。<br>可以通过<code>docker-compose --version</code>查看版本号并确定是否安装成功。</p>\n<h1 id=\"正式搭建sentry\"><a href=\"#正式搭建sentry\" class=\"headerlink\" title=\"正式搭建sentry\"></a>正式搭建sentry</h1><h2 id=\"获取sentry\"><a href=\"#获取sentry\" class=\"headerlink\" title=\"获取sentry\"></a>获取sentry</h2><p>从github上可以获取最新的sentry。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/getsentry/onpremise.git</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"搭建sentry\"><a href=\"#搭建sentry\" class=\"headerlink\" title=\"搭建sentry\"></a>搭建sentry</h2><p>第一步: 制作我们的本地数据库和sentry配置目录。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir  -p data/&#123;sentry,postgres&#125;</span><br></pre></td></tr></table></figure></p>\n<p>第二步: 生成一个密钥。将其作为SENTRY_SECRET_KEY添加到dock中的docker-compose.yml中。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose run --rm web config generate-secret-key</span><br></pre></td></tr></table></figure></p>\n<p>第三步：建立数据库。使用交互式提示创建用户帐户。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose run --rm web upgrade</span><br></pre></td></tr></table></figure></p>\n<p>第四步：启动所有服务<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure></p>\n<p>至此，就可以访问本机的9000端口，使用之前填写的邮箱和口令进入sentry平台了。<br><img src=\"/2018/06/11/linux下使用docker搭建sentry/11.png\" title=\"sentry效果图\"></p>\n<h1 id=\"邮箱配置\"><a href=\"#邮箱配置\" class=\"headerlink\" title=\"邮箱配置\"></a>邮箱配置</h1><p>修改 sentry.config.py文件的配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#email = env('SENTRY_EMAIL_HOST') or (env('SMTP_PORT_25_TCP_ADDR') and 'smtp')</span></span><br><span class=\"line\"><span class=\"comment\">#if email:</span></span><br><span class=\"line\"><span class=\"comment\">#    SENTRY_OPTIONS['mail.backend'] = 'smtp'</span></span><br><span class=\"line\"><span class=\"comment\">#    SENTRY_OPTIONS['mail.host'] = email</span></span><br><span class=\"line\"><span class=\"comment\">#    SENTRY_OPTIONS['mail.password'] = env('SENTRY_EMAIL_PASSWORD') or ''</span></span><br><span class=\"line\"><span class=\"comment\">#    SENTRY_OPTIONS['mail.username'] = env('SENTRY_EMAIL_USER') or ''</span></span><br><span class=\"line\"><span class=\"comment\">#    SENTRY_OPTIONS['mail.port'] = int(env('SENTRY_EMAIL_PORT') or 25)</span></span><br><span class=\"line\"><span class=\"comment\">#    SENTRY_OPTIONS['mail.use-tls'] = env('SENTRY_EMAIL_USE_TLS', False)</span></span><br><span class=\"line\"></span><br><span class=\"line\">SENTRY_OPTIONS[<span class=\"string\">'mail.backend'</span>] = <span class=\"string\">'smtp'</span></span><br><span class=\"line\">SENTRY_OPTIONS[<span class=\"string\">'mail.host'</span>] = <span class=\"string\">'smtp.qq.com'</span></span><br><span class=\"line\">SENTRY_OPTIONS[<span class=\"string\">'mail.password'</span>] = <span class=\"string\">'*******'</span></span><br><span class=\"line\">SENTRY_OPTIONS[<span class=\"string\">'mail.username'</span>] = <span class=\"string\">'sentry@**.com'</span></span><br><span class=\"line\">SENTRY_OPTIONS[<span class=\"string\">'mail.port'</span>] = 587</span><br><span class=\"line\">SENTRY_OPTIONS[<span class=\"string\">'mail.use-tls'</span>] = True</span><br></pre></td></tr></table></figure>\n<p>然后重新启动服务<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose down（关闭删除容器）</span><br><span class=\"line\">docker-compose build （重新编译镜像）</span><br><span class=\"line\">make build （拷贝配置文件，可以不需要）</span><br><span class=\"line\">docker-compose up -d  （运行）</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://blog.csdn.net/itkingone/article/details/79005959\" target=\"_blank\" rel=\"noopener\">linux和mac下搭建前端监控系统(基于sentry)</a></p>\n"},{"title":"webpack代码分离的三种常用方法","date":"2018-07-06T11:23:00.000Z","_content":"\n\n> 代码分离是 webpack 中最引人注目的特性之一。此特性能够把代码分离到不同的 bundle 中，然后可以按需加载或并行加载这些文件。代码分离可以用于获取更小的 bundle，以及控制资源加载优先级，如果使用合理，会极大影响加载时间。\n\n有三种常用的代码分离方法：\n\n- **入口起点**：使用 entry 配置手动地分离代码。\n- **防止重复**：使用 CommonsChunkPlugin 去重和分离 chunk。\n- **动态导入**：通过模块的内联函数调用来分离代码。\n\n\n# 入口起点\n这是迄今为止最简单、最直观的分离代码的方式。不过，这种方式手动配置较多，并有一些陷阱，我们将会解决这些问题。先来看看如何从 main bundle 中分离另一个模块：\n\n```js\n\n// ./src/index.js\nimport _ from 'lodash';\n\nconsole.log(\n  _.join(['index', 'module', 'loaded!'], ' ')\n);\n\n// ./src/page.js\nimport _ from 'lodash';\n\nconsole.log(\n  _.join(['Another', 'module', 'loaded!'], ' ')\n);\n\n// webpack.config.js\nconst path = require('path');\n\nmodule.exports = {\n  entry: {\n    index: './src/index.js',\n    another: './src/page.js'\n  },\n  output: {\n    filename: '[name].bundle.js',\n    path: path.resolve(__dirname, 'dist')\n  }\n};\n```\n\n\n这将生成如下构建结果：\n```js\nHash: 36042176e77df9eaa36e\nVersion: webpack 4.15.1\nTime: 2944ms\nBuilt at: 2018-07-10 11:09:19\n            Asset      Size  Chunks             Chunk Names\nanother.bundle.js  70.4 KiB       0  [emitted]  another\n  index.bundle.js  70.4 KiB       1  [emitted]  index\n[1] (webpack)/buildin/module.js 497 bytes {0} {1} [built]\n[2] (webpack)/buildin/global.js 489 bytes {0} {1} [built]\n[3] ./src/page.js 92 bytes {0} [built]\n[4] ./src/index.js 90 bytes {1} [built]\n    + 1 hidden module\n```\n正如前面提到的，这种方法存在一些问题:\n- 如果入口 chunks 之间包含重复的模块，那些重复模块都会被引入到各个 bundle 中。\n- 这种方法不够灵活，并且不能将核心应用程序逻辑进行动态拆分代码。\n\n以上两点中，第一点对我们的示例来说无疑是个问题，因为之前我们在 `./src/index.js` 中也引入过 lodash，这样就在两个 bundle 中造成重复引用。接着，我们通过使用 CommonsChunkPlugin 来移除重复的模块。\n\n# 防止重复(CommonsChunkPlugin)\n[CommonsChunkPlugin](https://webpack.docschina.org/plugins/commons-chunk-plugin) 插件可以将公共的依赖模块提取到已有的入口 chunk 中，或者提取到一个新生成的 chunk。让我们使用这个插件，将之前的示例中重复的 lodash 模块去除：\n\n```js\nconst path = require('path');\nconst webpack = require('webpack');\n\nmodule.exports = {\n    entry: {\n      index: './src/index.js',\n      another: './src/page.js'\n    },\n    plugins: [\n      new webpack.optimize.CommonsChunkPlugin({\n        name: 'common' // 指定公共 bundle 的名称。\n      })\n    ],\n    output: {\n      filename: '[name].bundle.js',\n      path: path.resolve(__dirname, 'dist')\n    }\n};\n```\n\n```js\nHash: 39c6f28cf331e187e2ee\nVersion: webpack 3.12.0\nTime: 353ms\n            Asset       Size  Chunks                    Chunk Names\nanother.bundle.js  541 bytes       0  [emitted]         another\n  index.bundle.js  545 bytes       1  [emitted]         index\n common.bundle.js     545 kB       2  [emitted]  [big]  common\n   [1] ./src/index.js 90 bytes {1} [built]\n   [2] (webpack)/buildin/global.js 509 bytes {2} [built]\n   [3] (webpack)/buildin/module.js 517 bytes {2} [built]\n   [4] ./src/page.js 92 bytes {0} [built]\n    + 1 hidden module\n```\n# 动态导入(dynamic imports)\n\n当涉及到动态代码拆分时，`webpack` 提供了两个类似的技术。对于动态导入，第一种，也是优先选择的方式是，使用符合 [ECMAScript](https://github.com/tc39/proposal-dynamic-import) 提案 的 [import()](https://webpack.docschina.org/api/module-methods#import-) 语法。第二种，则是使用 webpack 特定的 [require.ensure](https://webpack.docschina.org/api/module-methods#require-ensure)。让我们先尝试使用第一种……\n\n```js\n// src/index.js\nfunction getComponent() {\n    return import ( /* webpackChunkName: \"lodash\" */ 'lodash').then(_ => {\n        var element = document.createElement('div');\n        element.innerHTML = _.join(['Hello', 'webpack'], ' ');\n        return element;\n    }).catch(error => 'An error occurred while loading the component');\n}\n\ngetComponent().then(component => {\n    document.body.appendChild(component);\n})\n```\n\n```js\n// webpack.config.js\nconst path = require('path');\nconst webpack = require('webpack');\n\nmodule.exports = {\n    entry: {\n        index: './src/index.js',\n    },\n    output: {\n        filename: '[name].bundle.js',\n        chunkFilename: '[name].bundle.js',\n        path: path.resolve(__dirname, 'dist')\n    }\n};\n```\n> import() 调用会在内部用到 promises。如果在旧有版本浏览器中使用 import()，记得使用 一个 polyfill 库（例如 es6-promise 或 promise-polyfill），来 shim Promise。\n\n```js\nHash: 35f38da1baf5b177d685\nVersion: webpack 3.12.0\nTime: 327ms\n           Asset     Size  Chunks                    Chunk Names\nlodash.bundle.js   541 kB       0  [emitted]  [big]  lodash\n index.bundle.js  6.24 kB       1  [emitted]         index\n   [0] ./src/index.js 407 bytes {1} [built]\n   [2] (webpack)/buildin/global.js 509 bytes {0} [built]\n   [3] (webpack)/buildin/module.js 517 bytes {0} [built]\n    + 1 hidden module\n```\n由于 import() 会返回一个 promise，因此它可以和 async 函数一起使用。但是，需要使用像 Babel 这样的预处理器和[Syntax Dynamic Import Babel Plugin](https://babeljs.io/docs/en/babel-plugin-syntax-dynamic-import/#installation)。下面是如何通过 async 函数简化代码：\n\n\n\n> 注意，这里使用了 chunkFilename，它决定非入口 chunk 的名称。想了解 chunkFilename 更多信息，请查看 [output 相关文档](https://webpack.docschina.org/configuration/output/#output-chunkfilename)。接着，更新我们的项目，移除掉那些现在不会用到的文件:\n\n```js\nasync function getComponent() {\n    var element = document.createElement('div');\n    const _ = await import ( /* webpackChunkName: \"lodash\" */ 'lodash');\n    element.innerHTML = _.join(['Hello', 'webpack'], ' ');\n    return element;\n}\n\ngetComponent().then(component => {\n    document.body.appendChild(component);\n})\n```\n\n\n\n\n# 动态导入集合react-router\n首先我们要看一看一个加载函数\n```js\nrequire.ensure(dependencies, callback, chunkName)\n```\n这个方法可以实现js的按需加载，分开打包，webpack 管包叫 chunk，为了打包能正常输出，我们先给webpack配置文件配置一下chunk文件输出路径\n```js\n// webpack.config.js\nmodule.exports = {\n  ...\n  output: {\n    ...\n    chunkFilename: '[name].[chunkhash:5].chunk.js',\n    publicPath: '/dist/'\n  }\n  ...\n}\n```\n每个chunk 都会有一个ID，会在webpack内部生成，当然我们也可以给chunk指定一个名字，就是 require.ensure 的第三个参数\n\n配置文件中\n\n- [name] 默认是 ID，如果指定了chunkName则为指定的名字。\n- [chunkhash] 是对当前chunk 经过hash后得到的值，可以保证在chunk没有变化的时候hash不变，文件不需要更新，chunk变了后，可保证hash唯一，由于hash太长，这里我截取了hash的5个字符足矣\n## 根路由\n跟路由有点特殊，它一定要先加载一个组件才能渲染，也就是说，在跟路由不能使用按需加载方式，不过这个没关系，根路由用于基础路径，在所有模块都必须加载，所以他的 \"需\" 其实作用不大。\n\n# jsx 定义按需加载路由\n\n虽然官方推荐使用对象去定义，但是jsx语法看上去更清晰点，所以还是使用jsx演示，方法很简单，就是把 组件的 props.component 换成 props.getComponent ，函数还是上述例子的函数（记得根路由不要使用getComponent）。\n\n```js\n<Router history={history}>\n  <Route path=\"/\" component={App}>\n    <Route path=\"home\" getComponent={(location, callback) => {\n      require.ensure([], require => {\n        callback(null, require('modules/home'))\n      }, 'home')  \n    }}></Route>\n    <Route path=\"blog\" getComponent={(location, callback) => {\n      require.ensure([], require => {\n        callback(null, require('modules/blog'))\n      }, 'blog')  \n    }}></Route>\n  </Route>\n</Router>\n\n```\n\n看上去很乱有木有，在jsx中写那么多 js 感觉真难看，把 js 独立出来就是：\n\n```js\nconst home = (location, callback) => {\n  require.ensure([], require => {\n    callback(null, require('modules/home'))\n  }, 'home')  \n}\n\nconst blog = (location, callback) => {\n  require.ensure([], require => {\n    callback(null, require('modules/blog'))\n  }, 'blog')  \n}\n\n<Router history={history}>\n  <Route path=\"/\" component={App}>\n    <Route path=\"home\" getComponent={home}></Route>\n    <Route path=\"blog\" getComponent={blog}></Route>\n  </Route>\n</Router>\n```\n这样整理一下，就好看多了\n\n--------------------------------------\n**注意**: 或许有人会想，上面重复代码超级多，能不能用一个函数生成器去生成这些重复的函数呢？代码更进一步优化，比如:\n```js\nconst ensureModule = (name, entry) => (location, callback) => {\n  require.ensure([], require => {\n    callback(null, require(entry))\n  }, name)\n}\n\n<Router history={history}>\n  <Route path=\"/\" component={App}>\n    <Route path=\"home\" getComponent={ensureModule('home', 'modules/home')}></Route>\n    <Route path=\"blog\" getComponent={ensureModule('blog', 'modules/blog')}></Route>\n  </Route>\n</Router>\n```\n答案是：不能。这样看起来代码没有任何问题，好像更优雅的样子，但是经过亲自实践后，不行！！因为 require函数太特别了，他是webpack底层用于加载模块，所以必须明确的声明模块名，**require函数在这里只能接受字符串，不能接受变量** 。所以还是忍忍算了\n\n## 参考\n[webpack官网](https://webpack.docschina.org/guides/code-splitting/)\n","source":"_posts/webpack分模块打包.md","raw":"---\ntitle: webpack代码分离的三种常用方法\ndate: 2018-07-06 19:23:00\ntags: [webpack]\ncategories: 前端工程\n---\n\n\n> 代码分离是 webpack 中最引人注目的特性之一。此特性能够把代码分离到不同的 bundle 中，然后可以按需加载或并行加载这些文件。代码分离可以用于获取更小的 bundle，以及控制资源加载优先级，如果使用合理，会极大影响加载时间。\n\n有三种常用的代码分离方法：\n\n- **入口起点**：使用 entry 配置手动地分离代码。\n- **防止重复**：使用 CommonsChunkPlugin 去重和分离 chunk。\n- **动态导入**：通过模块的内联函数调用来分离代码。\n\n\n# 入口起点\n这是迄今为止最简单、最直观的分离代码的方式。不过，这种方式手动配置较多，并有一些陷阱，我们将会解决这些问题。先来看看如何从 main bundle 中分离另一个模块：\n\n```js\n\n// ./src/index.js\nimport _ from 'lodash';\n\nconsole.log(\n  _.join(['index', 'module', 'loaded!'], ' ')\n);\n\n// ./src/page.js\nimport _ from 'lodash';\n\nconsole.log(\n  _.join(['Another', 'module', 'loaded!'], ' ')\n);\n\n// webpack.config.js\nconst path = require('path');\n\nmodule.exports = {\n  entry: {\n    index: './src/index.js',\n    another: './src/page.js'\n  },\n  output: {\n    filename: '[name].bundle.js',\n    path: path.resolve(__dirname, 'dist')\n  }\n};\n```\n\n\n这将生成如下构建结果：\n```js\nHash: 36042176e77df9eaa36e\nVersion: webpack 4.15.1\nTime: 2944ms\nBuilt at: 2018-07-10 11:09:19\n            Asset      Size  Chunks             Chunk Names\nanother.bundle.js  70.4 KiB       0  [emitted]  another\n  index.bundle.js  70.4 KiB       1  [emitted]  index\n[1] (webpack)/buildin/module.js 497 bytes {0} {1} [built]\n[2] (webpack)/buildin/global.js 489 bytes {0} {1} [built]\n[3] ./src/page.js 92 bytes {0} [built]\n[4] ./src/index.js 90 bytes {1} [built]\n    + 1 hidden module\n```\n正如前面提到的，这种方法存在一些问题:\n- 如果入口 chunks 之间包含重复的模块，那些重复模块都会被引入到各个 bundle 中。\n- 这种方法不够灵活，并且不能将核心应用程序逻辑进行动态拆分代码。\n\n以上两点中，第一点对我们的示例来说无疑是个问题，因为之前我们在 `./src/index.js` 中也引入过 lodash，这样就在两个 bundle 中造成重复引用。接着，我们通过使用 CommonsChunkPlugin 来移除重复的模块。\n\n# 防止重复(CommonsChunkPlugin)\n[CommonsChunkPlugin](https://webpack.docschina.org/plugins/commons-chunk-plugin) 插件可以将公共的依赖模块提取到已有的入口 chunk 中，或者提取到一个新生成的 chunk。让我们使用这个插件，将之前的示例中重复的 lodash 模块去除：\n\n```js\nconst path = require('path');\nconst webpack = require('webpack');\n\nmodule.exports = {\n    entry: {\n      index: './src/index.js',\n      another: './src/page.js'\n    },\n    plugins: [\n      new webpack.optimize.CommonsChunkPlugin({\n        name: 'common' // 指定公共 bundle 的名称。\n      })\n    ],\n    output: {\n      filename: '[name].bundle.js',\n      path: path.resolve(__dirname, 'dist')\n    }\n};\n```\n\n```js\nHash: 39c6f28cf331e187e2ee\nVersion: webpack 3.12.0\nTime: 353ms\n            Asset       Size  Chunks                    Chunk Names\nanother.bundle.js  541 bytes       0  [emitted]         another\n  index.bundle.js  545 bytes       1  [emitted]         index\n common.bundle.js     545 kB       2  [emitted]  [big]  common\n   [1] ./src/index.js 90 bytes {1} [built]\n   [2] (webpack)/buildin/global.js 509 bytes {2} [built]\n   [3] (webpack)/buildin/module.js 517 bytes {2} [built]\n   [4] ./src/page.js 92 bytes {0} [built]\n    + 1 hidden module\n```\n# 动态导入(dynamic imports)\n\n当涉及到动态代码拆分时，`webpack` 提供了两个类似的技术。对于动态导入，第一种，也是优先选择的方式是，使用符合 [ECMAScript](https://github.com/tc39/proposal-dynamic-import) 提案 的 [import()](https://webpack.docschina.org/api/module-methods#import-) 语法。第二种，则是使用 webpack 特定的 [require.ensure](https://webpack.docschina.org/api/module-methods#require-ensure)。让我们先尝试使用第一种……\n\n```js\n// src/index.js\nfunction getComponent() {\n    return import ( /* webpackChunkName: \"lodash\" */ 'lodash').then(_ => {\n        var element = document.createElement('div');\n        element.innerHTML = _.join(['Hello', 'webpack'], ' ');\n        return element;\n    }).catch(error => 'An error occurred while loading the component');\n}\n\ngetComponent().then(component => {\n    document.body.appendChild(component);\n})\n```\n\n```js\n// webpack.config.js\nconst path = require('path');\nconst webpack = require('webpack');\n\nmodule.exports = {\n    entry: {\n        index: './src/index.js',\n    },\n    output: {\n        filename: '[name].bundle.js',\n        chunkFilename: '[name].bundle.js',\n        path: path.resolve(__dirname, 'dist')\n    }\n};\n```\n> import() 调用会在内部用到 promises。如果在旧有版本浏览器中使用 import()，记得使用 一个 polyfill 库（例如 es6-promise 或 promise-polyfill），来 shim Promise。\n\n```js\nHash: 35f38da1baf5b177d685\nVersion: webpack 3.12.0\nTime: 327ms\n           Asset     Size  Chunks                    Chunk Names\nlodash.bundle.js   541 kB       0  [emitted]  [big]  lodash\n index.bundle.js  6.24 kB       1  [emitted]         index\n   [0] ./src/index.js 407 bytes {1} [built]\n   [2] (webpack)/buildin/global.js 509 bytes {0} [built]\n   [3] (webpack)/buildin/module.js 517 bytes {0} [built]\n    + 1 hidden module\n```\n由于 import() 会返回一个 promise，因此它可以和 async 函数一起使用。但是，需要使用像 Babel 这样的预处理器和[Syntax Dynamic Import Babel Plugin](https://babeljs.io/docs/en/babel-plugin-syntax-dynamic-import/#installation)。下面是如何通过 async 函数简化代码：\n\n\n\n> 注意，这里使用了 chunkFilename，它决定非入口 chunk 的名称。想了解 chunkFilename 更多信息，请查看 [output 相关文档](https://webpack.docschina.org/configuration/output/#output-chunkfilename)。接着，更新我们的项目，移除掉那些现在不会用到的文件:\n\n```js\nasync function getComponent() {\n    var element = document.createElement('div');\n    const _ = await import ( /* webpackChunkName: \"lodash\" */ 'lodash');\n    element.innerHTML = _.join(['Hello', 'webpack'], ' ');\n    return element;\n}\n\ngetComponent().then(component => {\n    document.body.appendChild(component);\n})\n```\n\n\n\n\n# 动态导入集合react-router\n首先我们要看一看一个加载函数\n```js\nrequire.ensure(dependencies, callback, chunkName)\n```\n这个方法可以实现js的按需加载，分开打包，webpack 管包叫 chunk，为了打包能正常输出，我们先给webpack配置文件配置一下chunk文件输出路径\n```js\n// webpack.config.js\nmodule.exports = {\n  ...\n  output: {\n    ...\n    chunkFilename: '[name].[chunkhash:5].chunk.js',\n    publicPath: '/dist/'\n  }\n  ...\n}\n```\n每个chunk 都会有一个ID，会在webpack内部生成，当然我们也可以给chunk指定一个名字，就是 require.ensure 的第三个参数\n\n配置文件中\n\n- [name] 默认是 ID，如果指定了chunkName则为指定的名字。\n- [chunkhash] 是对当前chunk 经过hash后得到的值，可以保证在chunk没有变化的时候hash不变，文件不需要更新，chunk变了后，可保证hash唯一，由于hash太长，这里我截取了hash的5个字符足矣\n## 根路由\n跟路由有点特殊，它一定要先加载一个组件才能渲染，也就是说，在跟路由不能使用按需加载方式，不过这个没关系，根路由用于基础路径，在所有模块都必须加载，所以他的 \"需\" 其实作用不大。\n\n# jsx 定义按需加载路由\n\n虽然官方推荐使用对象去定义，但是jsx语法看上去更清晰点，所以还是使用jsx演示，方法很简单，就是把 组件的 props.component 换成 props.getComponent ，函数还是上述例子的函数（记得根路由不要使用getComponent）。\n\n```js\n<Router history={history}>\n  <Route path=\"/\" component={App}>\n    <Route path=\"home\" getComponent={(location, callback) => {\n      require.ensure([], require => {\n        callback(null, require('modules/home'))\n      }, 'home')  \n    }}></Route>\n    <Route path=\"blog\" getComponent={(location, callback) => {\n      require.ensure([], require => {\n        callback(null, require('modules/blog'))\n      }, 'blog')  \n    }}></Route>\n  </Route>\n</Router>\n\n```\n\n看上去很乱有木有，在jsx中写那么多 js 感觉真难看，把 js 独立出来就是：\n\n```js\nconst home = (location, callback) => {\n  require.ensure([], require => {\n    callback(null, require('modules/home'))\n  }, 'home')  \n}\n\nconst blog = (location, callback) => {\n  require.ensure([], require => {\n    callback(null, require('modules/blog'))\n  }, 'blog')  \n}\n\n<Router history={history}>\n  <Route path=\"/\" component={App}>\n    <Route path=\"home\" getComponent={home}></Route>\n    <Route path=\"blog\" getComponent={blog}></Route>\n  </Route>\n</Router>\n```\n这样整理一下，就好看多了\n\n--------------------------------------\n**注意**: 或许有人会想，上面重复代码超级多，能不能用一个函数生成器去生成这些重复的函数呢？代码更进一步优化，比如:\n```js\nconst ensureModule = (name, entry) => (location, callback) => {\n  require.ensure([], require => {\n    callback(null, require(entry))\n  }, name)\n}\n\n<Router history={history}>\n  <Route path=\"/\" component={App}>\n    <Route path=\"home\" getComponent={ensureModule('home', 'modules/home')}></Route>\n    <Route path=\"blog\" getComponent={ensureModule('blog', 'modules/blog')}></Route>\n  </Route>\n</Router>\n```\n答案是：不能。这样看起来代码没有任何问题，好像更优雅的样子，但是经过亲自实践后，不行！！因为 require函数太特别了，他是webpack底层用于加载模块，所以必须明确的声明模块名，**require函数在这里只能接受字符串，不能接受变量** 。所以还是忍忍算了\n\n## 参考\n[webpack官网](https://webpack.docschina.org/guides/code-splitting/)\n","slug":"webpack分模块打包","published":1,"updated":"2018-07-10T06:15:27.121Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjfde8rq00055kxd86njzjea","content":"<blockquote>\n<p>代码分离是 webpack 中最引人注目的特性之一。此特性能够把代码分离到不同的 bundle 中，然后可以按需加载或并行加载这些文件。代码分离可以用于获取更小的 bundle，以及控制资源加载优先级，如果使用合理，会极大影响加载时间。</p>\n</blockquote>\n<p>有三种常用的代码分离方法：</p>\n<ul>\n<li><strong>入口起点</strong>：使用 entry 配置手动地分离代码。</li>\n<li><strong>防止重复</strong>：使用 CommonsChunkPlugin 去重和分离 chunk。</li>\n<li><strong>动态导入</strong>：通过模块的内联函数调用来分离代码。</li>\n</ul>\n<h1 id=\"入口起点\"><a href=\"#入口起点\" class=\"headerlink\" title=\"入口起点\"></a>入口起点</h1><p>这是迄今为止最简单、最直观的分离代码的方式。不过，这种方式手动配置较多，并有一些陷阱，我们将会解决这些问题。先来看看如何从 main bundle 中分离另一个模块：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ./src/index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> _ <span class=\"keyword\">from</span> <span class=\"string\">'lodash'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">  _.join([<span class=\"string\">'index'</span>, <span class=\"string\">'module'</span>, <span class=\"string\">'loaded!'</span>], <span class=\"string\">' '</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ./src/page.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> _ <span class=\"keyword\">from</span> <span class=\"string\">'lodash'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">  _.join([<span class=\"string\">'Another'</span>, <span class=\"string\">'module'</span>, <span class=\"string\">'loaded!'</span>], <span class=\"string\">' '</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    index: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">    another: <span class=\"string\">'./src/page.js'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'[name].bundle.js'</span>,</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>这将生成如下构建结果：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hash: <span class=\"number\">36042176e77</span>df9eaa36e</span><br><span class=\"line\">Version: webpack <span class=\"number\">4.15</span><span class=\"number\">.1</span></span><br><span class=\"line\">Time: <span class=\"number\">2944</span>ms</span><br><span class=\"line\">Built at: <span class=\"number\">2018</span><span class=\"number\">-07</span><span class=\"number\">-10</span> <span class=\"number\">11</span>:<span class=\"number\">09</span>:<span class=\"number\">19</span></span><br><span class=\"line\">            Asset      Size  Chunks             Chunk Names</span><br><span class=\"line\">another.bundle.js  <span class=\"number\">70.4</span> KiB       <span class=\"number\">0</span>  [emitted]  another</span><br><span class=\"line\">  index.bundle.js  <span class=\"number\">70.4</span> KiB       <span class=\"number\">1</span>  [emitted]  index</span><br><span class=\"line\">[<span class=\"number\">1</span>] (webpack)/buildin/<span class=\"built_in\">module</span>.js <span class=\"number\">497</span> bytes &#123;<span class=\"number\">0</span>&#125; &#123;<span class=\"number\">1</span>&#125; [built]</span><br><span class=\"line\">[<span class=\"number\">2</span>] (webpack)/buildin/global.js <span class=\"number\">489</span> bytes &#123;<span class=\"number\">0</span>&#125; &#123;<span class=\"number\">1</span>&#125; [built]</span><br><span class=\"line\">[<span class=\"number\">3</span>] ./src/page.js <span class=\"number\">92</span> bytes &#123;<span class=\"number\">0</span>&#125; [built]</span><br><span class=\"line\">[<span class=\"number\">4</span>] ./src/index.js <span class=\"number\">90</span> bytes &#123;<span class=\"number\">1</span>&#125; [built]</span><br><span class=\"line\">    + <span class=\"number\">1</span> hidden <span class=\"built_in\">module</span></span><br></pre></td></tr></table></figure></p>\n<p>正如前面提到的，这种方法存在一些问题:</p>\n<ul>\n<li>如果入口 chunks 之间包含重复的模块，那些重复模块都会被引入到各个 bundle 中。</li>\n<li>这种方法不够灵活，并且不能将核心应用程序逻辑进行动态拆分代码。</li>\n</ul>\n<p>以上两点中，第一点对我们的示例来说无疑是个问题，因为之前我们在 <code>./src/index.js</code> 中也引入过 lodash，这样就在两个 bundle 中造成重复引用。接着，我们通过使用 CommonsChunkPlugin 来移除重复的模块。</p>\n<h1 id=\"防止重复-CommonsChunkPlugin\"><a href=\"#防止重复-CommonsChunkPlugin\" class=\"headerlink\" title=\"防止重复(CommonsChunkPlugin)\"></a>防止重复(CommonsChunkPlugin)</h1><p><a href=\"https://webpack.docschina.org/plugins/commons-chunk-plugin\" target=\"_blank\" rel=\"noopener\">CommonsChunkPlugin</a> 插件可以将公共的依赖模块提取到已有的入口 chunk 中，或者提取到一个新生成的 chunk。让我们使用这个插件，将之前的示例中重复的 lodash 模块去除：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">      index: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">      another: <span class=\"string\">'./src/page.js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">      <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class=\"line\">        name: <span class=\"string\">'common'</span> <span class=\"comment\">// 指定公共 bundle 的名称。</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">      filename: <span class=\"string\">'[name].bundle.js'</span>,</span><br><span class=\"line\">      path: path.resolve(__dirname, <span class=\"string\">'dist'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hash: <span class=\"number\">39</span>c6f28cf331e187e2ee</span><br><span class=\"line\">Version: webpack <span class=\"number\">3.12</span><span class=\"number\">.0</span></span><br><span class=\"line\">Time: <span class=\"number\">353</span>ms</span><br><span class=\"line\">            Asset       Size  Chunks                    Chunk Names</span><br><span class=\"line\">another.bundle.js  <span class=\"number\">541</span> bytes       <span class=\"number\">0</span>  [emitted]         another</span><br><span class=\"line\">  index.bundle.js  <span class=\"number\">545</span> bytes       <span class=\"number\">1</span>  [emitted]         index</span><br><span class=\"line\"> common.bundle.js     <span class=\"number\">545</span> kB       <span class=\"number\">2</span>  [emitted]  [big]  common</span><br><span class=\"line\">   [<span class=\"number\">1</span>] ./src/index.js <span class=\"number\">90</span> bytes &#123;<span class=\"number\">1</span>&#125; [built]</span><br><span class=\"line\">   [<span class=\"number\">2</span>] (webpack)/buildin/global.js <span class=\"number\">509</span> bytes &#123;<span class=\"number\">2</span>&#125; [built]</span><br><span class=\"line\">   [<span class=\"number\">3</span>] (webpack)/buildin/<span class=\"built_in\">module</span>.js <span class=\"number\">517</span> bytes &#123;<span class=\"number\">2</span>&#125; [built]</span><br><span class=\"line\">   [<span class=\"number\">4</span>] ./src/page.js <span class=\"number\">92</span> bytes &#123;<span class=\"number\">0</span>&#125; [built]</span><br><span class=\"line\">    + <span class=\"number\">1</span> hidden <span class=\"built_in\">module</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"动态导入-dynamic-imports\"><a href=\"#动态导入-dynamic-imports\" class=\"headerlink\" title=\"动态导入(dynamic imports)\"></a>动态导入(dynamic imports)</h1><p>当涉及到动态代码拆分时，<code>webpack</code> 提供了两个类似的技术。对于动态导入，第一种，也是优先选择的方式是，使用符合 <a href=\"https://github.com/tc39/proposal-dynamic-import\" target=\"_blank\" rel=\"noopener\">ECMAScript</a> 提案 的 <a href=\"https://webpack.docschina.org/api/module-methods#import-\" target=\"_blank\" rel=\"noopener\">import()</a> 语法。第二种，则是使用 webpack 特定的 <a href=\"https://webpack.docschina.org/api/module-methods#require-ensure\" target=\"_blank\" rel=\"noopener\">require.ensure</a>。让我们先尝试使用第一种……</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/index.js</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getComponent</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">import</span> ( <span class=\"comment\">/* webpackChunkName: \"lodash\" */</span> <span class=\"string\">'lodash'</span>).then(<span class=\"function\"><span class=\"params\">_</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> element = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">        element.innerHTML = _.join([<span class=\"string\">'Hello'</span>, <span class=\"string\">'webpack'</span>], <span class=\"string\">' '</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> element;</span><br><span class=\"line\">    &#125;).catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> <span class=\"string\">'An error occurred while loading the component'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getComponent().then(<span class=\"function\"><span class=\"params\">component</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.appendChild(component);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">        index: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename: <span class=\"string\">'[name].bundle.js'</span>,</span><br><span class=\"line\">        chunkFilename: <span class=\"string\">'[name].bundle.js'</span>,</span><br><span class=\"line\">        path: path.resolve(__dirname, <span class=\"string\">'dist'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>import() 调用会在内部用到 promises。如果在旧有版本浏览器中使用 import()，记得使用 一个 polyfill 库（例如 es6-promise 或 promise-polyfill），来 shim Promise。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hash: <span class=\"number\">35</span>f38da1baf5b177d685</span><br><span class=\"line\">Version: webpack <span class=\"number\">3.12</span><span class=\"number\">.0</span></span><br><span class=\"line\">Time: <span class=\"number\">327</span>ms</span><br><span class=\"line\">           Asset     Size  Chunks                    Chunk Names</span><br><span class=\"line\">lodash.bundle.js   <span class=\"number\">541</span> kB       <span class=\"number\">0</span>  [emitted]  [big]  lodash</span><br><span class=\"line\"> index.bundle.js  <span class=\"number\">6.24</span> kB       <span class=\"number\">1</span>  [emitted]         index</span><br><span class=\"line\">   [<span class=\"number\">0</span>] ./src/index.js <span class=\"number\">407</span> bytes &#123;<span class=\"number\">1</span>&#125; [built]</span><br><span class=\"line\">   [<span class=\"number\">2</span>] (webpack)/buildin/global.js <span class=\"number\">509</span> bytes &#123;<span class=\"number\">0</span>&#125; [built]</span><br><span class=\"line\">   [<span class=\"number\">3</span>] (webpack)/buildin/<span class=\"built_in\">module</span>.js <span class=\"number\">517</span> bytes &#123;<span class=\"number\">0</span>&#125; [built]</span><br><span class=\"line\">    + <span class=\"number\">1</span> hidden <span class=\"built_in\">module</span></span><br></pre></td></tr></table></figure>\n<p>由于 import() 会返回一个 promise，因此它可以和 async 函数一起使用。但是，需要使用像 Babel 这样的预处理器和<a href=\"https://babeljs.io/docs/en/babel-plugin-syntax-dynamic-import/#installation\" target=\"_blank\" rel=\"noopener\">Syntax Dynamic Import Babel Plugin</a>。下面是如何通过 async 函数简化代码：</p>\n<blockquote>\n<p>注意，这里使用了 chunkFilename，它决定非入口 chunk 的名称。想了解 chunkFilename 更多信息，请查看 <a href=\"https://webpack.docschina.org/configuration/output/#output-chunkfilename\" target=\"_blank\" rel=\"noopener\">output 相关文档</a>。接着，更新我们的项目，移除掉那些现在不会用到的文件:</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getComponent</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> element = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> _ = <span class=\"keyword\">await</span> <span class=\"keyword\">import</span> ( <span class=\"comment\">/* webpackChunkName: \"lodash\" */</span> <span class=\"string\">'lodash'</span>);</span><br><span class=\"line\">    element.innerHTML = _.join([<span class=\"string\">'Hello'</span>, <span class=\"string\">'webpack'</span>], <span class=\"string\">' '</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> element;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getComponent().then(<span class=\"function\"><span class=\"params\">component</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.appendChild(component);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h1 id=\"动态导入集合react-router\"><a href=\"#动态导入集合react-router\" class=\"headerlink\" title=\"动态导入集合react-router\"></a>动态导入集合react-router</h1><p>首先我们要看一看一个加载函数<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>.ensure(dependencies, callback, chunkName)</span><br></pre></td></tr></table></figure></p>\n<p>这个方法可以实现js的按需加载，分开打包，webpack 管包叫 chunk，为了打包能正常输出，我们先给webpack配置文件配置一下chunk文件输出路径<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    chunkFilename: <span class=\"string\">'[name].[chunkhash:5].chunk.js'</span>,</span><br><span class=\"line\">    publicPath: <span class=\"string\">'/dist/'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>每个chunk 都会有一个ID，会在webpack内部生成，当然我们也可以给chunk指定一个名字，就是 require.ensure 的第三个参数</p>\n<p>配置文件中</p>\n<ul>\n<li>[name] 默认是 ID，如果指定了chunkName则为指定的名字。</li>\n<li>[chunkhash] 是对当前chunk 经过hash后得到的值，可以保证在chunk没有变化的时候hash不变，文件不需要更新，chunk变了后，可保证hash唯一，由于hash太长，这里我截取了hash的5个字符足矣<h2 id=\"根路由\"><a href=\"#根路由\" class=\"headerlink\" title=\"根路由\"></a>根路由</h2>跟路由有点特殊，它一定要先加载一个组件才能渲染，也就是说，在跟路由不能使用按需加载方式，不过这个没关系，根路由用于基础路径，在所有模块都必须加载，所以他的 “需” 其实作用不大。</li>\n</ul>\n<h1 id=\"jsx-定义按需加载路由\"><a href=\"#jsx-定义按需加载路由\" class=\"headerlink\" title=\"jsx 定义按需加载路由\"></a>jsx 定义按需加载路由</h1><p>虽然官方推荐使用对象去定义，但是jsx语法看上去更清晰点，所以还是使用jsx演示，方法很简单，就是把 组件的 props.component 换成 props.getComponent ，函数还是上述例子的函数（记得根路由不要使用getComponent）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Router history=&#123;history&#125;&gt;</span><br><span class=\"line\">  &lt;Route path=<span class=\"string\">\"/\"</span> component=&#123;App&#125;&gt;</span><br><span class=\"line\">    &lt;Route path=<span class=\"string\">\"home\"</span> getComponent=&#123;(location, callback) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"built_in\">require</span>.ensure([], <span class=\"built_in\">require</span> =&gt; &#123;</span><br><span class=\"line\">        callback(<span class=\"literal\">null</span>, <span class=\"built_in\">require</span>(<span class=\"string\">'modules/home'</span>))</span><br><span class=\"line\">      &#125;, <span class=\"string\">'home'</span>)  </span><br><span class=\"line\">    &#125;&#125;&gt;&lt;/Route&gt;</span><br><span class=\"line\">    &lt;Route path=<span class=\"string\">\"blog\"</span> getComponent=&#123;(location, callback) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"built_in\">require</span>.ensure([], <span class=\"built_in\">require</span> =&gt; &#123;</span><br><span class=\"line\">        callback(<span class=\"literal\">null</span>, <span class=\"built_in\">require</span>(<span class=\"string\">'modules/blog'</span>))</span><br><span class=\"line\">      &#125;, <span class=\"string\">'blog'</span>)  </span><br><span class=\"line\">    &#125;&#125;&gt;&lt;/Route&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/Route&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>Router&gt;</span><br></pre></td></tr></table></figure>\n<p>看上去很乱有木有，在jsx中写那么多 js 感觉真难看，把 js 独立出来就是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> home = <span class=\"function\">(<span class=\"params\">location, callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">require</span>.ensure([], <span class=\"built_in\">require</span> =&gt; &#123;</span><br><span class=\"line\">    callback(<span class=\"literal\">null</span>, <span class=\"built_in\">require</span>(<span class=\"string\">'modules/home'</span>))</span><br><span class=\"line\">  &#125;, <span class=\"string\">'home'</span>)  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> blog = <span class=\"function\">(<span class=\"params\">location, callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">require</span>.ensure([], <span class=\"built_in\">require</span> =&gt; &#123;</span><br><span class=\"line\">    callback(<span class=\"literal\">null</span>, <span class=\"built_in\">require</span>(<span class=\"string\">'modules/blog'</span>))</span><br><span class=\"line\">  &#125;, <span class=\"string\">'blog'</span>)  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;Router history=&#123;history&#125;&gt;</span><br><span class=\"line\">  &lt;Route path=<span class=\"string\">\"/\"</span> component=&#123;App&#125;&gt;</span><br><span class=\"line\">    &lt;Route path=<span class=\"string\">\"home\"</span> getComponent=&#123;home&#125;&gt;&lt;/Route&gt;</span><br><span class=\"line\">    &lt;Route path=<span class=\"string\">\"blog\"</span> getComponent=&#123;blog&#125;&gt;&lt;/Route&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/Route&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>Router&gt;</span><br></pre></td></tr></table></figure>\n<p>这样整理一下，就好看多了</p>\n<hr>\n<p><strong>注意</strong>: 或许有人会想，上面重复代码超级多，能不能用一个函数生成器去生成这些重复的函数呢？代码更进一步优化，比如:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ensureModule = <span class=\"function\">(<span class=\"params\">name, entry</span>) =&gt;</span> (location, callback) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">require</span>.ensure([], <span class=\"built_in\">require</span> =&gt; &#123;</span><br><span class=\"line\">    callback(<span class=\"literal\">null</span>, <span class=\"built_in\">require</span>(entry))</span><br><span class=\"line\">  &#125;, name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;Router history=&#123;history&#125;&gt;</span><br><span class=\"line\">  &lt;Route path=<span class=\"string\">\"/\"</span> component=&#123;App&#125;&gt;</span><br><span class=\"line\">    &lt;Route path=<span class=\"string\">\"home\"</span> getComponent=&#123;ensureModule(<span class=\"string\">'home'</span>, <span class=\"string\">'modules/home'</span>)&#125;&gt;&lt;/Route&gt;</span><br><span class=\"line\">    &lt;Route path=<span class=\"string\">\"blog\"</span> getComponent=&#123;ensureModule(<span class=\"string\">'blog'</span>, <span class=\"string\">'modules/blog'</span>)&#125;&gt;&lt;/Route&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/Route&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>Router&gt;</span><br></pre></td></tr></table></figure></p>\n<p>答案是：不能。这样看起来代码没有任何问题，好像更优雅的样子，但是经过亲自实践后，不行！！因为 require函数太特别了，他是webpack底层用于加载模块，所以必须明确的声明模块名，<strong>require函数在这里只能接受字符串，不能接受变量</strong> 。所以还是忍忍算了</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://webpack.docschina.org/guides/code-splitting/\" target=\"_blank\" rel=\"noopener\">webpack官网</a></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>代码分离是 webpack 中最引人注目的特性之一。此特性能够把代码分离到不同的 bundle 中，然后可以按需加载或并行加载这些文件。代码分离可以用于获取更小的 bundle，以及控制资源加载优先级，如果使用合理，会极大影响加载时间。</p>\n</blockquote>\n<p>有三种常用的代码分离方法：</p>\n<ul>\n<li><strong>入口起点</strong>：使用 entry 配置手动地分离代码。</li>\n<li><strong>防止重复</strong>：使用 CommonsChunkPlugin 去重和分离 chunk。</li>\n<li><strong>动态导入</strong>：通过模块的内联函数调用来分离代码。</li>\n</ul>\n<h1 id=\"入口起点\"><a href=\"#入口起点\" class=\"headerlink\" title=\"入口起点\"></a>入口起点</h1><p>这是迄今为止最简单、最直观的分离代码的方式。不过，这种方式手动配置较多，并有一些陷阱，我们将会解决这些问题。先来看看如何从 main bundle 中分离另一个模块：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ./src/index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> _ <span class=\"keyword\">from</span> <span class=\"string\">'lodash'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">  _.join([<span class=\"string\">'index'</span>, <span class=\"string\">'module'</span>, <span class=\"string\">'loaded!'</span>], <span class=\"string\">' '</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ./src/page.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> _ <span class=\"keyword\">from</span> <span class=\"string\">'lodash'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">  _.join([<span class=\"string\">'Another'</span>, <span class=\"string\">'module'</span>, <span class=\"string\">'loaded!'</span>], <span class=\"string\">' '</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    index: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">    another: <span class=\"string\">'./src/page.js'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'[name].bundle.js'</span>,</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>这将生成如下构建结果：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hash: <span class=\"number\">36042176e77</span>df9eaa36e</span><br><span class=\"line\">Version: webpack <span class=\"number\">4.15</span><span class=\"number\">.1</span></span><br><span class=\"line\">Time: <span class=\"number\">2944</span>ms</span><br><span class=\"line\">Built at: <span class=\"number\">2018</span><span class=\"number\">-07</span><span class=\"number\">-10</span> <span class=\"number\">11</span>:<span class=\"number\">09</span>:<span class=\"number\">19</span></span><br><span class=\"line\">            Asset      Size  Chunks             Chunk Names</span><br><span class=\"line\">another.bundle.js  <span class=\"number\">70.4</span> KiB       <span class=\"number\">0</span>  [emitted]  another</span><br><span class=\"line\">  index.bundle.js  <span class=\"number\">70.4</span> KiB       <span class=\"number\">1</span>  [emitted]  index</span><br><span class=\"line\">[<span class=\"number\">1</span>] (webpack)/buildin/<span class=\"built_in\">module</span>.js <span class=\"number\">497</span> bytes &#123;<span class=\"number\">0</span>&#125; &#123;<span class=\"number\">1</span>&#125; [built]</span><br><span class=\"line\">[<span class=\"number\">2</span>] (webpack)/buildin/global.js <span class=\"number\">489</span> bytes &#123;<span class=\"number\">0</span>&#125; &#123;<span class=\"number\">1</span>&#125; [built]</span><br><span class=\"line\">[<span class=\"number\">3</span>] ./src/page.js <span class=\"number\">92</span> bytes &#123;<span class=\"number\">0</span>&#125; [built]</span><br><span class=\"line\">[<span class=\"number\">4</span>] ./src/index.js <span class=\"number\">90</span> bytes &#123;<span class=\"number\">1</span>&#125; [built]</span><br><span class=\"line\">    + <span class=\"number\">1</span> hidden <span class=\"built_in\">module</span></span><br></pre></td></tr></table></figure></p>\n<p>正如前面提到的，这种方法存在一些问题:</p>\n<ul>\n<li>如果入口 chunks 之间包含重复的模块，那些重复模块都会被引入到各个 bundle 中。</li>\n<li>这种方法不够灵活，并且不能将核心应用程序逻辑进行动态拆分代码。</li>\n</ul>\n<p>以上两点中，第一点对我们的示例来说无疑是个问题，因为之前我们在 <code>./src/index.js</code> 中也引入过 lodash，这样就在两个 bundle 中造成重复引用。接着，我们通过使用 CommonsChunkPlugin 来移除重复的模块。</p>\n<h1 id=\"防止重复-CommonsChunkPlugin\"><a href=\"#防止重复-CommonsChunkPlugin\" class=\"headerlink\" title=\"防止重复(CommonsChunkPlugin)\"></a>防止重复(CommonsChunkPlugin)</h1><p><a href=\"https://webpack.docschina.org/plugins/commons-chunk-plugin\" target=\"_blank\" rel=\"noopener\">CommonsChunkPlugin</a> 插件可以将公共的依赖模块提取到已有的入口 chunk 中，或者提取到一个新生成的 chunk。让我们使用这个插件，将之前的示例中重复的 lodash 模块去除：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">      index: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">      another: <span class=\"string\">'./src/page.js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">      <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class=\"line\">        name: <span class=\"string\">'common'</span> <span class=\"comment\">// 指定公共 bundle 的名称。</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">      filename: <span class=\"string\">'[name].bundle.js'</span>,</span><br><span class=\"line\">      path: path.resolve(__dirname, <span class=\"string\">'dist'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hash: <span class=\"number\">39</span>c6f28cf331e187e2ee</span><br><span class=\"line\">Version: webpack <span class=\"number\">3.12</span><span class=\"number\">.0</span></span><br><span class=\"line\">Time: <span class=\"number\">353</span>ms</span><br><span class=\"line\">            Asset       Size  Chunks                    Chunk Names</span><br><span class=\"line\">another.bundle.js  <span class=\"number\">541</span> bytes       <span class=\"number\">0</span>  [emitted]         another</span><br><span class=\"line\">  index.bundle.js  <span class=\"number\">545</span> bytes       <span class=\"number\">1</span>  [emitted]         index</span><br><span class=\"line\"> common.bundle.js     <span class=\"number\">545</span> kB       <span class=\"number\">2</span>  [emitted]  [big]  common</span><br><span class=\"line\">   [<span class=\"number\">1</span>] ./src/index.js <span class=\"number\">90</span> bytes &#123;<span class=\"number\">1</span>&#125; [built]</span><br><span class=\"line\">   [<span class=\"number\">2</span>] (webpack)/buildin/global.js <span class=\"number\">509</span> bytes &#123;<span class=\"number\">2</span>&#125; [built]</span><br><span class=\"line\">   [<span class=\"number\">3</span>] (webpack)/buildin/<span class=\"built_in\">module</span>.js <span class=\"number\">517</span> bytes &#123;<span class=\"number\">2</span>&#125; [built]</span><br><span class=\"line\">   [<span class=\"number\">4</span>] ./src/page.js <span class=\"number\">92</span> bytes &#123;<span class=\"number\">0</span>&#125; [built]</span><br><span class=\"line\">    + <span class=\"number\">1</span> hidden <span class=\"built_in\">module</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"动态导入-dynamic-imports\"><a href=\"#动态导入-dynamic-imports\" class=\"headerlink\" title=\"动态导入(dynamic imports)\"></a>动态导入(dynamic imports)</h1><p>当涉及到动态代码拆分时，<code>webpack</code> 提供了两个类似的技术。对于动态导入，第一种，也是优先选择的方式是，使用符合 <a href=\"https://github.com/tc39/proposal-dynamic-import\" target=\"_blank\" rel=\"noopener\">ECMAScript</a> 提案 的 <a href=\"https://webpack.docschina.org/api/module-methods#import-\" target=\"_blank\" rel=\"noopener\">import()</a> 语法。第二种，则是使用 webpack 特定的 <a href=\"https://webpack.docschina.org/api/module-methods#require-ensure\" target=\"_blank\" rel=\"noopener\">require.ensure</a>。让我们先尝试使用第一种……</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/index.js</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getComponent</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">import</span> ( <span class=\"comment\">/* webpackChunkName: \"lodash\" */</span> <span class=\"string\">'lodash'</span>).then(<span class=\"function\"><span class=\"params\">_</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> element = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">        element.innerHTML = _.join([<span class=\"string\">'Hello'</span>, <span class=\"string\">'webpack'</span>], <span class=\"string\">' '</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> element;</span><br><span class=\"line\">    &#125;).catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> <span class=\"string\">'An error occurred while loading the component'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getComponent().then(<span class=\"function\"><span class=\"params\">component</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.appendChild(component);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">        index: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename: <span class=\"string\">'[name].bundle.js'</span>,</span><br><span class=\"line\">        chunkFilename: <span class=\"string\">'[name].bundle.js'</span>,</span><br><span class=\"line\">        path: path.resolve(__dirname, <span class=\"string\">'dist'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>import() 调用会在内部用到 promises。如果在旧有版本浏览器中使用 import()，记得使用 一个 polyfill 库（例如 es6-promise 或 promise-polyfill），来 shim Promise。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hash: <span class=\"number\">35</span>f38da1baf5b177d685</span><br><span class=\"line\">Version: webpack <span class=\"number\">3.12</span><span class=\"number\">.0</span></span><br><span class=\"line\">Time: <span class=\"number\">327</span>ms</span><br><span class=\"line\">           Asset     Size  Chunks                    Chunk Names</span><br><span class=\"line\">lodash.bundle.js   <span class=\"number\">541</span> kB       <span class=\"number\">0</span>  [emitted]  [big]  lodash</span><br><span class=\"line\"> index.bundle.js  <span class=\"number\">6.24</span> kB       <span class=\"number\">1</span>  [emitted]         index</span><br><span class=\"line\">   [<span class=\"number\">0</span>] ./src/index.js <span class=\"number\">407</span> bytes &#123;<span class=\"number\">1</span>&#125; [built]</span><br><span class=\"line\">   [<span class=\"number\">2</span>] (webpack)/buildin/global.js <span class=\"number\">509</span> bytes &#123;<span class=\"number\">0</span>&#125; [built]</span><br><span class=\"line\">   [<span class=\"number\">3</span>] (webpack)/buildin/<span class=\"built_in\">module</span>.js <span class=\"number\">517</span> bytes &#123;<span class=\"number\">0</span>&#125; [built]</span><br><span class=\"line\">    + <span class=\"number\">1</span> hidden <span class=\"built_in\">module</span></span><br></pre></td></tr></table></figure>\n<p>由于 import() 会返回一个 promise，因此它可以和 async 函数一起使用。但是，需要使用像 Babel 这样的预处理器和<a href=\"https://babeljs.io/docs/en/babel-plugin-syntax-dynamic-import/#installation\" target=\"_blank\" rel=\"noopener\">Syntax Dynamic Import Babel Plugin</a>。下面是如何通过 async 函数简化代码：</p>\n<blockquote>\n<p>注意，这里使用了 chunkFilename，它决定非入口 chunk 的名称。想了解 chunkFilename 更多信息，请查看 <a href=\"https://webpack.docschina.org/configuration/output/#output-chunkfilename\" target=\"_blank\" rel=\"noopener\">output 相关文档</a>。接着，更新我们的项目，移除掉那些现在不会用到的文件:</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getComponent</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> element = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> _ = <span class=\"keyword\">await</span> <span class=\"keyword\">import</span> ( <span class=\"comment\">/* webpackChunkName: \"lodash\" */</span> <span class=\"string\">'lodash'</span>);</span><br><span class=\"line\">    element.innerHTML = _.join([<span class=\"string\">'Hello'</span>, <span class=\"string\">'webpack'</span>], <span class=\"string\">' '</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> element;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getComponent().then(<span class=\"function\"><span class=\"params\">component</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.appendChild(component);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h1 id=\"动态导入集合react-router\"><a href=\"#动态导入集合react-router\" class=\"headerlink\" title=\"动态导入集合react-router\"></a>动态导入集合react-router</h1><p>首先我们要看一看一个加载函数<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>.ensure(dependencies, callback, chunkName)</span><br></pre></td></tr></table></figure></p>\n<p>这个方法可以实现js的按需加载，分开打包，webpack 管包叫 chunk，为了打包能正常输出，我们先给webpack配置文件配置一下chunk文件输出路径<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    chunkFilename: <span class=\"string\">'[name].[chunkhash:5].chunk.js'</span>,</span><br><span class=\"line\">    publicPath: <span class=\"string\">'/dist/'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>每个chunk 都会有一个ID，会在webpack内部生成，当然我们也可以给chunk指定一个名字，就是 require.ensure 的第三个参数</p>\n<p>配置文件中</p>\n<ul>\n<li>[name] 默认是 ID，如果指定了chunkName则为指定的名字。</li>\n<li>[chunkhash] 是对当前chunk 经过hash后得到的值，可以保证在chunk没有变化的时候hash不变，文件不需要更新，chunk变了后，可保证hash唯一，由于hash太长，这里我截取了hash的5个字符足矣<h2 id=\"根路由\"><a href=\"#根路由\" class=\"headerlink\" title=\"根路由\"></a>根路由</h2>跟路由有点特殊，它一定要先加载一个组件才能渲染，也就是说，在跟路由不能使用按需加载方式，不过这个没关系，根路由用于基础路径，在所有模块都必须加载，所以他的 “需” 其实作用不大。</li>\n</ul>\n<h1 id=\"jsx-定义按需加载路由\"><a href=\"#jsx-定义按需加载路由\" class=\"headerlink\" title=\"jsx 定义按需加载路由\"></a>jsx 定义按需加载路由</h1><p>虽然官方推荐使用对象去定义，但是jsx语法看上去更清晰点，所以还是使用jsx演示，方法很简单，就是把 组件的 props.component 换成 props.getComponent ，函数还是上述例子的函数（记得根路由不要使用getComponent）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Router history=&#123;history&#125;&gt;</span><br><span class=\"line\">  &lt;Route path=<span class=\"string\">\"/\"</span> component=&#123;App&#125;&gt;</span><br><span class=\"line\">    &lt;Route path=<span class=\"string\">\"home\"</span> getComponent=&#123;(location, callback) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"built_in\">require</span>.ensure([], <span class=\"built_in\">require</span> =&gt; &#123;</span><br><span class=\"line\">        callback(<span class=\"literal\">null</span>, <span class=\"built_in\">require</span>(<span class=\"string\">'modules/home'</span>))</span><br><span class=\"line\">      &#125;, <span class=\"string\">'home'</span>)  </span><br><span class=\"line\">    &#125;&#125;&gt;&lt;/Route&gt;</span><br><span class=\"line\">    &lt;Route path=<span class=\"string\">\"blog\"</span> getComponent=&#123;(location, callback) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"built_in\">require</span>.ensure([], <span class=\"built_in\">require</span> =&gt; &#123;</span><br><span class=\"line\">        callback(<span class=\"literal\">null</span>, <span class=\"built_in\">require</span>(<span class=\"string\">'modules/blog'</span>))</span><br><span class=\"line\">      &#125;, <span class=\"string\">'blog'</span>)  </span><br><span class=\"line\">    &#125;&#125;&gt;&lt;/Route&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/Route&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>Router&gt;</span><br></pre></td></tr></table></figure>\n<p>看上去很乱有木有，在jsx中写那么多 js 感觉真难看，把 js 独立出来就是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> home = <span class=\"function\">(<span class=\"params\">location, callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">require</span>.ensure([], <span class=\"built_in\">require</span> =&gt; &#123;</span><br><span class=\"line\">    callback(<span class=\"literal\">null</span>, <span class=\"built_in\">require</span>(<span class=\"string\">'modules/home'</span>))</span><br><span class=\"line\">  &#125;, <span class=\"string\">'home'</span>)  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> blog = <span class=\"function\">(<span class=\"params\">location, callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">require</span>.ensure([], <span class=\"built_in\">require</span> =&gt; &#123;</span><br><span class=\"line\">    callback(<span class=\"literal\">null</span>, <span class=\"built_in\">require</span>(<span class=\"string\">'modules/blog'</span>))</span><br><span class=\"line\">  &#125;, <span class=\"string\">'blog'</span>)  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;Router history=&#123;history&#125;&gt;</span><br><span class=\"line\">  &lt;Route path=<span class=\"string\">\"/\"</span> component=&#123;App&#125;&gt;</span><br><span class=\"line\">    &lt;Route path=<span class=\"string\">\"home\"</span> getComponent=&#123;home&#125;&gt;&lt;/Route&gt;</span><br><span class=\"line\">    &lt;Route path=<span class=\"string\">\"blog\"</span> getComponent=&#123;blog&#125;&gt;&lt;/Route&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/Route&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>Router&gt;</span><br></pre></td></tr></table></figure>\n<p>这样整理一下，就好看多了</p>\n<hr>\n<p><strong>注意</strong>: 或许有人会想，上面重复代码超级多，能不能用一个函数生成器去生成这些重复的函数呢？代码更进一步优化，比如:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ensureModule = <span class=\"function\">(<span class=\"params\">name, entry</span>) =&gt;</span> (location, callback) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">require</span>.ensure([], <span class=\"built_in\">require</span> =&gt; &#123;</span><br><span class=\"line\">    callback(<span class=\"literal\">null</span>, <span class=\"built_in\">require</span>(entry))</span><br><span class=\"line\">  &#125;, name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;Router history=&#123;history&#125;&gt;</span><br><span class=\"line\">  &lt;Route path=<span class=\"string\">\"/\"</span> component=&#123;App&#125;&gt;</span><br><span class=\"line\">    &lt;Route path=<span class=\"string\">\"home\"</span> getComponent=&#123;ensureModule(<span class=\"string\">'home'</span>, <span class=\"string\">'modules/home'</span>)&#125;&gt;&lt;/Route&gt;</span><br><span class=\"line\">    &lt;Route path=<span class=\"string\">\"blog\"</span> getComponent=&#123;ensureModule(<span class=\"string\">'blog'</span>, <span class=\"string\">'modules/blog'</span>)&#125;&gt;&lt;/Route&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/Route&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>Router&gt;</span><br></pre></td></tr></table></figure></p>\n<p>答案是：不能。这样看起来代码没有任何问题，好像更优雅的样子，但是经过亲自实践后，不行！！因为 require函数太特别了，他是webpack底层用于加载模块，所以必须明确的声明模块名，<strong>require函数在这里只能接受字符串，不能接受变量</strong> 。所以还是忍忍算了</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://webpack.docschina.org/guides/code-splitting/\" target=\"_blank\" rel=\"noopener\">webpack官网</a></p>\n"},{"title":"webpack 文件打包机制","date":"2018-07-10T07:23:00.000Z","_content":"\n\n```js\n// dist/index.xxxx.js\n(function(modules) {\n  // 已经加载过的模块\n  var installedModules = {};\n\n  // 模块加载函数\n  function __webpack_require__(moduleId) {\n    if(installedModules[moduleId]) {\n      return installedModules[moduleId].exports;\n    }\n    var module = installedModules[moduleId] = {\n      i: moduleId,\n      l: false,\n      exports: {}\n    };\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    module.l = true;\n    return module.exports;\n  }\n  return __webpack_require__(__webpack_require__.s = 3);\n})([\n/* 0 */\n(function(module, exports, __webpack_require__) {\n  var util = __webpack_require__(1);\n  console.log(util);\n  module.exports = \"index 2\";\n}),\n/* 1 */\n(function(module, exports) {\n  module.exports = \"Hello World\";\n}),\n/* 2 */\n(function(module, exports, __webpack_require__) {\n  var index2 = __webpack_require__(0);\n  index2 = __webpack_require__(0);\n  var util = __webpack_require__(1);\n  console.log(index2);\n  console.log(util);\n}),\n/* 3 */\n(function(module, exports, __webpack_require__) {\n  module.exports = __webpack_require__(2);\n})]);\n```\n\n将相对无关的代码剔除掉后，剩下主要的代码：\n\n- 首先 webpack 将所有模块(可以简单理解成文件)包裹于一个函数中，并传入默认参数，这里有三个文件再加上一个入口模块一共四个模块，将它们放入一个数组中，取名为 modules，并通过数组的下标来作为 moduleId。\n- 将 modules 传入一个自执行函数中，自执行函数中包含一个 `installedModules` 已经加载过的模块和一个模块加载函数，最后加载入口模块并返回。\n- `__webpack_require__` 模块加载，先判断 `installedModules` 是否已加载，加载过了就直接返回 `exports` 数据，没有加载过该模块就通过 `modules[moduleId].call(module.exports, module, module.exports, __webpack_require__)` 执行模块并且将 `module.exports` 给返回。\n\n很简单是不是，有些点需要注意的是：\n- 每个模块 webpack 只会加载一次,所以重复加载的模块只会执行一次，加载过的模块会放到 `installedModules`，下次需要需要该模块的值就直接从里面拿了。\n- 模块的 id 直接通过数组下标去一一对应的，这样能保证简单且唯一，通过其它方式比如文件名或文件路径的方式就比较麻烦，因为文件名可能出现重名，不唯一，文件路径则会增大文件体积，并且将路径暴露给前端，不够安全。\n- `modules[moduleId].call(module.exports, module, module.exports, __webpack_require__)` 保证了模块加载时 this 的指向 `module.exports` 并且传入默认参数，很简单，不过多解释。\n\n[深入理解 webpack 文件打包机制](https://github.com/happylindz/blog/issues/6)\n","source":"_posts/webpack打包原理.md","raw":"---\ntitle: webpack 文件打包机制\ndate: 2018-07-10 15:23:00\ntags: [webpack]\ncategories: 前端工程\n---\n\n\n```js\n// dist/index.xxxx.js\n(function(modules) {\n  // 已经加载过的模块\n  var installedModules = {};\n\n  // 模块加载函数\n  function __webpack_require__(moduleId) {\n    if(installedModules[moduleId]) {\n      return installedModules[moduleId].exports;\n    }\n    var module = installedModules[moduleId] = {\n      i: moduleId,\n      l: false,\n      exports: {}\n    };\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    module.l = true;\n    return module.exports;\n  }\n  return __webpack_require__(__webpack_require__.s = 3);\n})([\n/* 0 */\n(function(module, exports, __webpack_require__) {\n  var util = __webpack_require__(1);\n  console.log(util);\n  module.exports = \"index 2\";\n}),\n/* 1 */\n(function(module, exports) {\n  module.exports = \"Hello World\";\n}),\n/* 2 */\n(function(module, exports, __webpack_require__) {\n  var index2 = __webpack_require__(0);\n  index2 = __webpack_require__(0);\n  var util = __webpack_require__(1);\n  console.log(index2);\n  console.log(util);\n}),\n/* 3 */\n(function(module, exports, __webpack_require__) {\n  module.exports = __webpack_require__(2);\n})]);\n```\n\n将相对无关的代码剔除掉后，剩下主要的代码：\n\n- 首先 webpack 将所有模块(可以简单理解成文件)包裹于一个函数中，并传入默认参数，这里有三个文件再加上一个入口模块一共四个模块，将它们放入一个数组中，取名为 modules，并通过数组的下标来作为 moduleId。\n- 将 modules 传入一个自执行函数中，自执行函数中包含一个 `installedModules` 已经加载过的模块和一个模块加载函数，最后加载入口模块并返回。\n- `__webpack_require__` 模块加载，先判断 `installedModules` 是否已加载，加载过了就直接返回 `exports` 数据，没有加载过该模块就通过 `modules[moduleId].call(module.exports, module, module.exports, __webpack_require__)` 执行模块并且将 `module.exports` 给返回。\n\n很简单是不是，有些点需要注意的是：\n- 每个模块 webpack 只会加载一次,所以重复加载的模块只会执行一次，加载过的模块会放到 `installedModules`，下次需要需要该模块的值就直接从里面拿了。\n- 模块的 id 直接通过数组下标去一一对应的，这样能保证简单且唯一，通过其它方式比如文件名或文件路径的方式就比较麻烦，因为文件名可能出现重名，不唯一，文件路径则会增大文件体积，并且将路径暴露给前端，不够安全。\n- `modules[moduleId].call(module.exports, module, module.exports, __webpack_require__)` 保证了模块加载时 this 的指向 `module.exports` 并且传入默认参数，很简单，不过多解释。\n\n[深入理解 webpack 文件打包机制](https://github.com/happylindz/blog/issues/6)\n","slug":"webpack打包原理","published":1,"updated":"2018-07-10T07:32:23.622Z","_id":"cjjfde8s7000e5kxdjf3kju9i","comments":1,"layout":"post","photos":[],"link":"","content":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dist/index.xxxx.js</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">modules</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 已经加载过的模块</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> installedModules = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 模块加载函数</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__webpack_require__</span>(<span class=\"params\">moduleId</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(installedModules[moduleId]) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> installedModules[moduleId].exports;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> <span class=\"built_in\">module</span> = installedModules[moduleId] = &#123;</span><br><span class=\"line\">      i: moduleId,</span><br><span class=\"line\">      l: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      exports: &#123;&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    modules[moduleId].call(<span class=\"built_in\">module</span>.exports, <span class=\"built_in\">module</span>, <span class=\"built_in\">module</span>.exports, __webpack_require__);</span><br><span class=\"line\">    <span class=\"built_in\">module</span>.l = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">module</span>.exports;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> __webpack_require__(__webpack_require__.s = <span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;)([</span><br><span class=\"line\"><span class=\"comment\">/* 0 */</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, exports, __webpack_require__</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> util = __webpack_require__(<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(util);</span><br><span class=\"line\">  <span class=\"built_in\">module</span>.exports = <span class=\"string\">\"index 2\"</span>;</span><br><span class=\"line\">&#125;),</span><br><span class=\"line\"><span class=\"comment\">/* 1 */</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, exports</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">module</span>.exports = <span class=\"string\">\"Hello World\"</span>;</span><br><span class=\"line\">&#125;),</span><br><span class=\"line\"><span class=\"comment\">/* 2 */</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, exports, __webpack_require__</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> index2 = __webpack_require__(<span class=\"number\">0</span>);</span><br><span class=\"line\">  index2 = __webpack_require__(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> util = __webpack_require__(<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(index2);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(util);</span><br><span class=\"line\">&#125;),</span><br><span class=\"line\"><span class=\"comment\">/* 3 */</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, exports, __webpack_require__</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">module</span>.exports = __webpack_require__(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;)]);</span><br></pre></td></tr></table></figure>\n<p>将相对无关的代码剔除掉后，剩下主要的代码：</p>\n<ul>\n<li>首先 webpack 将所有模块(可以简单理解成文件)包裹于一个函数中，并传入默认参数，这里有三个文件再加上一个入口模块一共四个模块，将它们放入一个数组中，取名为 modules，并通过数组的下标来作为 moduleId。</li>\n<li>将 modules 传入一个自执行函数中，自执行函数中包含一个 <code>installedModules</code> 已经加载过的模块和一个模块加载函数，最后加载入口模块并返回。</li>\n<li><code>__webpack_require__</code> 模块加载，先判断 <code>installedModules</code> 是否已加载，加载过了就直接返回 <code>exports</code> 数据，没有加载过该模块就通过 <code>modules[moduleId].call(module.exports, module, module.exports, __webpack_require__)</code> 执行模块并且将 <code>module.exports</code> 给返回。</li>\n</ul>\n<p>很简单是不是，有些点需要注意的是：</p>\n<ul>\n<li>每个模块 webpack 只会加载一次,所以重复加载的模块只会执行一次，加载过的模块会放到 <code>installedModules</code>，下次需要需要该模块的值就直接从里面拿了。</li>\n<li>模块的 id 直接通过数组下标去一一对应的，这样能保证简单且唯一，通过其它方式比如文件名或文件路径的方式就比较麻烦，因为文件名可能出现重名，不唯一，文件路径则会增大文件体积，并且将路径暴露给前端，不够安全。</li>\n<li><code>modules[moduleId].call(module.exports, module, module.exports, __webpack_require__)</code> 保证了模块加载时 this 的指向 <code>module.exports</code> 并且传入默认参数，很简单，不过多解释。</li>\n</ul>\n<p><a href=\"https://github.com/happylindz/blog/issues/6\" target=\"_blank\" rel=\"noopener\">深入理解 webpack 文件打包机制</a></p>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dist/index.xxxx.js</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">modules</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 已经加载过的模块</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> installedModules = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 模块加载函数</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__webpack_require__</span>(<span class=\"params\">moduleId</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(installedModules[moduleId]) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> installedModules[moduleId].exports;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> <span class=\"built_in\">module</span> = installedModules[moduleId] = &#123;</span><br><span class=\"line\">      i: moduleId,</span><br><span class=\"line\">      l: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      exports: &#123;&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    modules[moduleId].call(<span class=\"built_in\">module</span>.exports, <span class=\"built_in\">module</span>, <span class=\"built_in\">module</span>.exports, __webpack_require__);</span><br><span class=\"line\">    <span class=\"built_in\">module</span>.l = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">module</span>.exports;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> __webpack_require__(__webpack_require__.s = <span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;)([</span><br><span class=\"line\"><span class=\"comment\">/* 0 */</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, exports, __webpack_require__</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> util = __webpack_require__(<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(util);</span><br><span class=\"line\">  <span class=\"built_in\">module</span>.exports = <span class=\"string\">\"index 2\"</span>;</span><br><span class=\"line\">&#125;),</span><br><span class=\"line\"><span class=\"comment\">/* 1 */</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, exports</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">module</span>.exports = <span class=\"string\">\"Hello World\"</span>;</span><br><span class=\"line\">&#125;),</span><br><span class=\"line\"><span class=\"comment\">/* 2 */</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, exports, __webpack_require__</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> index2 = __webpack_require__(<span class=\"number\">0</span>);</span><br><span class=\"line\">  index2 = __webpack_require__(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> util = __webpack_require__(<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(index2);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(util);</span><br><span class=\"line\">&#125;),</span><br><span class=\"line\"><span class=\"comment\">/* 3 */</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, exports, __webpack_require__</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">module</span>.exports = __webpack_require__(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;)]);</span><br></pre></td></tr></table></figure>\n<p>将相对无关的代码剔除掉后，剩下主要的代码：</p>\n<ul>\n<li>首先 webpack 将所有模块(可以简单理解成文件)包裹于一个函数中，并传入默认参数，这里有三个文件再加上一个入口模块一共四个模块，将它们放入一个数组中，取名为 modules，并通过数组的下标来作为 moduleId。</li>\n<li>将 modules 传入一个自执行函数中，自执行函数中包含一个 <code>installedModules</code> 已经加载过的模块和一个模块加载函数，最后加载入口模块并返回。</li>\n<li><code>__webpack_require__</code> 模块加载，先判断 <code>installedModules</code> 是否已加载，加载过了就直接返回 <code>exports</code> 数据，没有加载过该模块就通过 <code>modules[moduleId].call(module.exports, module, module.exports, __webpack_require__)</code> 执行模块并且将 <code>module.exports</code> 给返回。</li>\n</ul>\n<p>很简单是不是，有些点需要注意的是：</p>\n<ul>\n<li>每个模块 webpack 只会加载一次,所以重复加载的模块只会执行一次，加载过的模块会放到 <code>installedModules</code>，下次需要需要该模块的值就直接从里面拿了。</li>\n<li>模块的 id 直接通过数组下标去一一对应的，这样能保证简单且唯一，通过其它方式比如文件名或文件路径的方式就比较麻烦，因为文件名可能出现重名，不唯一，文件路径则会增大文件体积，并且将路径暴露给前端，不够安全。</li>\n<li><code>modules[moduleId].call(module.exports, module, module.exports, __webpack_require__)</code> 保证了模块加载时 this 的指向 <code>module.exports</code> 并且传入默认参数，很简单，不过多解释。</li>\n</ul>\n<p><a href=\"https://github.com/happylindz/blog/issues/6\" target=\"_blank\" rel=\"noopener\">深入理解 webpack 文件打包机制</a></p>\n"},{"title":"前端异常监控(0)","date":"2018-06-05T11:23:00.000Z","_content":"\n# 参考","source":"_posts/前端异常监控.md","raw":"---\ntitle: 前端异常监控(0)\ndate: 2018-06-05 19:23:00\ntags: [前端, 异常监控, javascript]\ncategories: 前端\n---\n\n# 参考","slug":"前端异常监控","published":1,"updated":"2018-06-15T06:34:39.360Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjfde8s8000f5kxdzl63ohrm","content":"<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1>"},{"title":"前端缓存","date":"2018-06-13T06:31:52.000Z","_content":"\n# 缓存分类\n&emsp;&emsp;web缓存分为很多种，比如数据库缓存、代理服务器缓存、还有我们熟悉的CDN缓存，以及浏览器缓存。对于太多文字的阅读其实我是拒绝的，于是就画了个图来解释下。\n{% asset_img 1.PNG  浏览器通过代理服务器向源服务器发起请求的原理图 %}\n&emsp;&emsp;浏览器先向代理服务器发起Web请求，再将请求转发到源服务器。它属于共享缓存，所以很多地方都可以使用其缓存资源，因此对于节省流量有很大作用。\n&emsp;&emsp;浏览器缓存是将文件保存在客户端，在同一个会话过程中会检查缓存的副本是否足够新，在后退网页时，访问过的资源可以从浏览器缓存中拿出使用。通过减少服务器处理请求的数量，用户将获得更快的体验\n\n# 浏览器缓存\n页面的缓存状态是由header决定的，header的参数有四种：\n## Cache-Control\n### max-age\nmax-age（单位为s）指定设置缓存最大的有效时间，定义的是时间长短。当浏览器向服务器发送请求后，在max-age这段时间里浏览器就不会再向服务器发送请求了。\n\n我们来找个资源看下。比如shang.qq.com上的css资源，max-age=2592000，也就是说缓存有效期为2592000秒（也就是30天）。于是在30天内都会使用这个版本的资源，即使服务器上的资源发生了变化，浏览器也不会得到通知。max-age会覆盖掉Expires，后面会有讨论。\n{% asset_img 2.png  max-age请求图 %}\n### s-maxage\ns-maxage（单位为s）同max-age，只用于共享缓存（比如CDN缓存）。\n比如，当s-maxage=60时，在这60秒中，即使更新了CDN的内容，浏览器也不会进行请求。也就是说max-age用于普通缓存，而s-maxage用于代理缓存。如果存在s-maxage，则会覆盖掉max-age和Expires header。\n### public\npublic 指定响应会被缓存，并且在多用户间共享。也就是下图的意思。如果没有指定是public还是private，则默认为public。\n{% asset_img 3.png  public请求图 %}\n### private \nprivate 响应只作为私有的缓存（见下图），不能在用户间共享。如果要求HTTP认证，响应会自动设置为private。\n{% asset_img 4.png  private请求图 %}\n### no-cache\nno-cache 指定不缓存响应，表明资源不进行缓存，比如，\n{% asset_img 5.png  no-cache请求图 %}\n但是设置了no-cache之后并不代表浏览器不缓存，而是在缓存前要向服务器确认资源是否被更改。因此有的时候只设置no-cache防止缓存还是不够保险，还可以加上private指令，将过期时间设为过去的时间。\n### no-store\nno-store 绝对禁止缓存，一看就知道如果用了这个命令当然就是不会进行缓存啦～每次请求资源都要从服务器重新获取。\n### must-revalidate\nmust-revalidate指定如果页面是过期的，则去服务器进行获取。这个指令并不常用，就不做过多的讨论了。\n\n```bash\ns-maxage > max-age > Expires > Last-Modified\n```\n## Expires\n&emsp;&emsp;缓存过期时间，用来指定资源到期的时间，是服务器端的具体的时间点。也就是说，Expires=max-age + 请求时间，需要和Last-modified结合使用。但在上面我们提到过，cache-control的优先级更高。 Expires是Web服务器响应消息头字段，在响应http请求时告诉浏览器在过期时间前浏览器可以直接从浏览器缓存取数据，而无需再次请求。\n{% asset_img 6.png  Expires请求图 %}\n## Last-modified\n&emsp;&emsp;服务器端文件的最后修改时间，需要和cache-control共同使用，是检查服务器端资源是否更新的一种方式。当浏览器再次进行请求时，会向服务器传送If-Modified-Since报头，询问Last-Modified时间点之后资源是否被修改过。如果没有修改，则返回码为304，使用缓存；如果修改过，则再次去服务器请求资源，返回码和首次请求相同为200，资源为服务器最新资源。\n如下图，最后修改时间为2014年12月19日星期五2点50分47秒\n{% asset_img 7.png  Last-modified请求图 %}\n## ETag\n&emsp;&emsp;根据实体内容生成一段hash字符串，标识资源的状态，由服务端产生。浏览器会将这串字符串传回服务器，验证资源是否已经修改，如果没有修改，过程如下：\n{% asset_img 8.png  ETag请求图 %}\n使用ETag可以解决Last-modified存在的一些问题：\n- 某些服务器不能精确得到资源的最后修改时间，这样就无法通过最后修改时间判断资源是否更新。\n- 如果资源修改非常频繁，在秒以下的时间内进行修改，而Last-modified只能精确到秒。\n- 一些资源的最后修改时间改变了，但是内容没改变，使用ETag就认为资源还是没有修改的。\n\n# 使用缓存流程\n还是用图说话，下面是我所总结的从浏览器请求到展示资源的过程：\n{% asset_img 9.png  浏览器请求到展示资源的过程图 %}\n## cache-control指令使用\n{% asset_img 10.png  cache-control指令使用 %}\n\n\n\n# 参考\n[前端必须知道的http缓存 ](https://github.com/Pines-Cheng/blog/issues/5)\n[浅谈web缓存](http://www.alloyteam.com/2016/03/discussion-on-web-caching/)\n","source":"_posts/前端缓存.md","raw":"---\ntitle: 前端缓存\ndate: 2018-06-13 14:31:52\ntags: [前端, 缓存, http, 计算机网络]\n---\n\n# 缓存分类\n&emsp;&emsp;web缓存分为很多种，比如数据库缓存、代理服务器缓存、还有我们熟悉的CDN缓存，以及浏览器缓存。对于太多文字的阅读其实我是拒绝的，于是就画了个图来解释下。\n{% asset_img 1.PNG  浏览器通过代理服务器向源服务器发起请求的原理图 %}\n&emsp;&emsp;浏览器先向代理服务器发起Web请求，再将请求转发到源服务器。它属于共享缓存，所以很多地方都可以使用其缓存资源，因此对于节省流量有很大作用。\n&emsp;&emsp;浏览器缓存是将文件保存在客户端，在同一个会话过程中会检查缓存的副本是否足够新，在后退网页时，访问过的资源可以从浏览器缓存中拿出使用。通过减少服务器处理请求的数量，用户将获得更快的体验\n\n# 浏览器缓存\n页面的缓存状态是由header决定的，header的参数有四种：\n## Cache-Control\n### max-age\nmax-age（单位为s）指定设置缓存最大的有效时间，定义的是时间长短。当浏览器向服务器发送请求后，在max-age这段时间里浏览器就不会再向服务器发送请求了。\n\n我们来找个资源看下。比如shang.qq.com上的css资源，max-age=2592000，也就是说缓存有效期为2592000秒（也就是30天）。于是在30天内都会使用这个版本的资源，即使服务器上的资源发生了变化，浏览器也不会得到通知。max-age会覆盖掉Expires，后面会有讨论。\n{% asset_img 2.png  max-age请求图 %}\n### s-maxage\ns-maxage（单位为s）同max-age，只用于共享缓存（比如CDN缓存）。\n比如，当s-maxage=60时，在这60秒中，即使更新了CDN的内容，浏览器也不会进行请求。也就是说max-age用于普通缓存，而s-maxage用于代理缓存。如果存在s-maxage，则会覆盖掉max-age和Expires header。\n### public\npublic 指定响应会被缓存，并且在多用户间共享。也就是下图的意思。如果没有指定是public还是private，则默认为public。\n{% asset_img 3.png  public请求图 %}\n### private \nprivate 响应只作为私有的缓存（见下图），不能在用户间共享。如果要求HTTP认证，响应会自动设置为private。\n{% asset_img 4.png  private请求图 %}\n### no-cache\nno-cache 指定不缓存响应，表明资源不进行缓存，比如，\n{% asset_img 5.png  no-cache请求图 %}\n但是设置了no-cache之后并不代表浏览器不缓存，而是在缓存前要向服务器确认资源是否被更改。因此有的时候只设置no-cache防止缓存还是不够保险，还可以加上private指令，将过期时间设为过去的时间。\n### no-store\nno-store 绝对禁止缓存，一看就知道如果用了这个命令当然就是不会进行缓存啦～每次请求资源都要从服务器重新获取。\n### must-revalidate\nmust-revalidate指定如果页面是过期的，则去服务器进行获取。这个指令并不常用，就不做过多的讨论了。\n\n```bash\ns-maxage > max-age > Expires > Last-Modified\n```\n## Expires\n&emsp;&emsp;缓存过期时间，用来指定资源到期的时间，是服务器端的具体的时间点。也就是说，Expires=max-age + 请求时间，需要和Last-modified结合使用。但在上面我们提到过，cache-control的优先级更高。 Expires是Web服务器响应消息头字段，在响应http请求时告诉浏览器在过期时间前浏览器可以直接从浏览器缓存取数据，而无需再次请求。\n{% asset_img 6.png  Expires请求图 %}\n## Last-modified\n&emsp;&emsp;服务器端文件的最后修改时间，需要和cache-control共同使用，是检查服务器端资源是否更新的一种方式。当浏览器再次进行请求时，会向服务器传送If-Modified-Since报头，询问Last-Modified时间点之后资源是否被修改过。如果没有修改，则返回码为304，使用缓存；如果修改过，则再次去服务器请求资源，返回码和首次请求相同为200，资源为服务器最新资源。\n如下图，最后修改时间为2014年12月19日星期五2点50分47秒\n{% asset_img 7.png  Last-modified请求图 %}\n## ETag\n&emsp;&emsp;根据实体内容生成一段hash字符串，标识资源的状态，由服务端产生。浏览器会将这串字符串传回服务器，验证资源是否已经修改，如果没有修改，过程如下：\n{% asset_img 8.png  ETag请求图 %}\n使用ETag可以解决Last-modified存在的一些问题：\n- 某些服务器不能精确得到资源的最后修改时间，这样就无法通过最后修改时间判断资源是否更新。\n- 如果资源修改非常频繁，在秒以下的时间内进行修改，而Last-modified只能精确到秒。\n- 一些资源的最后修改时间改变了，但是内容没改变，使用ETag就认为资源还是没有修改的。\n\n# 使用缓存流程\n还是用图说话，下面是我所总结的从浏览器请求到展示资源的过程：\n{% asset_img 9.png  浏览器请求到展示资源的过程图 %}\n## cache-control指令使用\n{% asset_img 10.png  cache-control指令使用 %}\n\n\n\n# 参考\n[前端必须知道的http缓存 ](https://github.com/Pines-Cheng/blog/issues/5)\n[浅谈web缓存](http://www.alloyteam.com/2016/03/discussion-on-web-caching/)\n","slug":"前端缓存","published":1,"updated":"2018-06-15T06:33:10.570Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjfde8sa000g5kxdnqj54z11","content":"<h1 id=\"缓存分类\"><a href=\"#缓存分类\" class=\"headerlink\" title=\"缓存分类\"></a>缓存分类</h1><p>&emsp;&emsp;web缓存分为很多种，比如数据库缓存、代理服务器缓存、还有我们熟悉的CDN缓存，以及浏览器缓存。对于太多文字的阅读其实我是拒绝的，于是就画了个图来解释下。<br><img src=\"/2018/06/13/前端缓存/1.PNG\" title=\"浏览器通过代理服务器向源服务器发起请求的原理图\"><br>&emsp;&emsp;浏览器先向代理服务器发起Web请求，再将请求转发到源服务器。它属于共享缓存，所以很多地方都可以使用其缓存资源，因此对于节省流量有很大作用。<br>&emsp;&emsp;浏览器缓存是将文件保存在客户端，在同一个会话过程中会检查缓存的副本是否足够新，在后退网页时，访问过的资源可以从浏览器缓存中拿出使用。通过减少服务器处理请求的数量，用户将获得更快的体验</p>\n<h1 id=\"浏览器缓存\"><a href=\"#浏览器缓存\" class=\"headerlink\" title=\"浏览器缓存\"></a>浏览器缓存</h1><p>页面的缓存状态是由header决定的，header的参数有四种：</p>\n<h2 id=\"Cache-Control\"><a href=\"#Cache-Control\" class=\"headerlink\" title=\"Cache-Control\"></a>Cache-Control</h2><h3 id=\"max-age\"><a href=\"#max-age\" class=\"headerlink\" title=\"max-age\"></a>max-age</h3><p>max-age（单位为s）指定设置缓存最大的有效时间，定义的是时间长短。当浏览器向服务器发送请求后，在max-age这段时间里浏览器就不会再向服务器发送请求了。</p>\n<p>我们来找个资源看下。比如shang.qq.com上的css资源，max-age=2592000，也就是说缓存有效期为2592000秒（也就是30天）。于是在30天内都会使用这个版本的资源，即使服务器上的资源发生了变化，浏览器也不会得到通知。max-age会覆盖掉Expires，后面会有讨论。<br><img src=\"/2018/06/13/前端缓存/2.png\" title=\"max-age请求图\"></p>\n<h3 id=\"s-maxage\"><a href=\"#s-maxage\" class=\"headerlink\" title=\"s-maxage\"></a>s-maxage</h3><p>s-maxage（单位为s）同max-age，只用于共享缓存（比如CDN缓存）。<br>比如，当s-maxage=60时，在这60秒中，即使更新了CDN的内容，浏览器也不会进行请求。也就是说max-age用于普通缓存，而s-maxage用于代理缓存。如果存在s-maxage，则会覆盖掉max-age和Expires header。</p>\n<h3 id=\"public\"><a href=\"#public\" class=\"headerlink\" title=\"public\"></a>public</h3><p>public 指定响应会被缓存，并且在多用户间共享。也就是下图的意思。如果没有指定是public还是private，则默认为public。<br><img src=\"/2018/06/13/前端缓存/3.png\" title=\"public请求图\"></p>\n<h3 id=\"private\"><a href=\"#private\" class=\"headerlink\" title=\"private\"></a>private</h3><p>private 响应只作为私有的缓存（见下图），不能在用户间共享。如果要求HTTP认证，响应会自动设置为private。<br><img src=\"/2018/06/13/前端缓存/4.png\" title=\"private请求图\"></p>\n<h3 id=\"no-cache\"><a href=\"#no-cache\" class=\"headerlink\" title=\"no-cache\"></a>no-cache</h3><p>no-cache 指定不缓存响应，表明资源不进行缓存，比如，<br><img src=\"/2018/06/13/前端缓存/5.png\" title=\"no-cache请求图\"><br>但是设置了no-cache之后并不代表浏览器不缓存，而是在缓存前要向服务器确认资源是否被更改。因此有的时候只设置no-cache防止缓存还是不够保险，还可以加上private指令，将过期时间设为过去的时间。</p>\n<h3 id=\"no-store\"><a href=\"#no-store\" class=\"headerlink\" title=\"no-store\"></a>no-store</h3><p>no-store 绝对禁止缓存，一看就知道如果用了这个命令当然就是不会进行缓存啦～每次请求资源都要从服务器重新获取。</p>\n<h3 id=\"must-revalidate\"><a href=\"#must-revalidate\" class=\"headerlink\" title=\"must-revalidate\"></a>must-revalidate</h3><p>must-revalidate指定如果页面是过期的，则去服务器进行获取。这个指令并不常用，就不做过多的讨论了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s-maxage &gt; max-age &gt; Expires &gt; Last-Modified</span><br></pre></td></tr></table></figure>\n<h2 id=\"Expires\"><a href=\"#Expires\" class=\"headerlink\" title=\"Expires\"></a>Expires</h2><p>&emsp;&emsp;缓存过期时间，用来指定资源到期的时间，是服务器端的具体的时间点。也就是说，Expires=max-age + 请求时间，需要和Last-modified结合使用。但在上面我们提到过，cache-control的优先级更高。 Expires是Web服务器响应消息头字段，在响应http请求时告诉浏览器在过期时间前浏览器可以直接从浏览器缓存取数据，而无需再次请求。<br><img src=\"/2018/06/13/前端缓存/6.png\" title=\"Expires请求图\"></p>\n<h2 id=\"Last-modified\"><a href=\"#Last-modified\" class=\"headerlink\" title=\"Last-modified\"></a>Last-modified</h2><p>&emsp;&emsp;服务器端文件的最后修改时间，需要和cache-control共同使用，是检查服务器端资源是否更新的一种方式。当浏览器再次进行请求时，会向服务器传送If-Modified-Since报头，询问Last-Modified时间点之后资源是否被修改过。如果没有修改，则返回码为304，使用缓存；如果修改过，则再次去服务器请求资源，返回码和首次请求相同为200，资源为服务器最新资源。<br>如下图，最后修改时间为2014年12月19日星期五2点50分47秒<br><img src=\"/2018/06/13/前端缓存/7.png\" title=\"Last-modified请求图\"></p>\n<h2 id=\"ETag\"><a href=\"#ETag\" class=\"headerlink\" title=\"ETag\"></a>ETag</h2><p>&emsp;&emsp;根据实体内容生成一段hash字符串，标识资源的状态，由服务端产生。浏览器会将这串字符串传回服务器，验证资源是否已经修改，如果没有修改，过程如下：<br><img src=\"/2018/06/13/前端缓存/8.png\" title=\"ETag请求图\"><br>使用ETag可以解决Last-modified存在的一些问题：</p>\n<ul>\n<li>某些服务器不能精确得到资源的最后修改时间，这样就无法通过最后修改时间判断资源是否更新。</li>\n<li>如果资源修改非常频繁，在秒以下的时间内进行修改，而Last-modified只能精确到秒。</li>\n<li>一些资源的最后修改时间改变了，但是内容没改变，使用ETag就认为资源还是没有修改的。</li>\n</ul>\n<h1 id=\"使用缓存流程\"><a href=\"#使用缓存流程\" class=\"headerlink\" title=\"使用缓存流程\"></a>使用缓存流程</h1><p>还是用图说话，下面是我所总结的从浏览器请求到展示资源的过程：<br><img src=\"/2018/06/13/前端缓存/9.png\" title=\"浏览器请求到展示资源的过程图\"></p>\n<h2 id=\"cache-control指令使用\"><a href=\"#cache-control指令使用\" class=\"headerlink\" title=\"cache-control指令使用\"></a>cache-control指令使用</h2><img src=\"/2018/06/13/前端缓存/10.png\" title=\"cache-control指令使用\">\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://github.com/Pines-Cheng/blog/issues/5\" target=\"_blank\" rel=\"noopener\">前端必须知道的http缓存 </a><br><a href=\"http://www.alloyteam.com/2016/03/discussion-on-web-caching/\" target=\"_blank\" rel=\"noopener\">浅谈web缓存</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"缓存分类\"><a href=\"#缓存分类\" class=\"headerlink\" title=\"缓存分类\"></a>缓存分类</h1><p>&emsp;&emsp;web缓存分为很多种，比如数据库缓存、代理服务器缓存、还有我们熟悉的CDN缓存，以及浏览器缓存。对于太多文字的阅读其实我是拒绝的，于是就画了个图来解释下。<br><img src=\"/2018/06/13/前端缓存/1.PNG\" title=\"浏览器通过代理服务器向源服务器发起请求的原理图\"><br>&emsp;&emsp;浏览器先向代理服务器发起Web请求，再将请求转发到源服务器。它属于共享缓存，所以很多地方都可以使用其缓存资源，因此对于节省流量有很大作用。<br>&emsp;&emsp;浏览器缓存是将文件保存在客户端，在同一个会话过程中会检查缓存的副本是否足够新，在后退网页时，访问过的资源可以从浏览器缓存中拿出使用。通过减少服务器处理请求的数量，用户将获得更快的体验</p>\n<h1 id=\"浏览器缓存\"><a href=\"#浏览器缓存\" class=\"headerlink\" title=\"浏览器缓存\"></a>浏览器缓存</h1><p>页面的缓存状态是由header决定的，header的参数有四种：</p>\n<h2 id=\"Cache-Control\"><a href=\"#Cache-Control\" class=\"headerlink\" title=\"Cache-Control\"></a>Cache-Control</h2><h3 id=\"max-age\"><a href=\"#max-age\" class=\"headerlink\" title=\"max-age\"></a>max-age</h3><p>max-age（单位为s）指定设置缓存最大的有效时间，定义的是时间长短。当浏览器向服务器发送请求后，在max-age这段时间里浏览器就不会再向服务器发送请求了。</p>\n<p>我们来找个资源看下。比如shang.qq.com上的css资源，max-age=2592000，也就是说缓存有效期为2592000秒（也就是30天）。于是在30天内都会使用这个版本的资源，即使服务器上的资源发生了变化，浏览器也不会得到通知。max-age会覆盖掉Expires，后面会有讨论。<br><img src=\"/2018/06/13/前端缓存/2.png\" title=\"max-age请求图\"></p>\n<h3 id=\"s-maxage\"><a href=\"#s-maxage\" class=\"headerlink\" title=\"s-maxage\"></a>s-maxage</h3><p>s-maxage（单位为s）同max-age，只用于共享缓存（比如CDN缓存）。<br>比如，当s-maxage=60时，在这60秒中，即使更新了CDN的内容，浏览器也不会进行请求。也就是说max-age用于普通缓存，而s-maxage用于代理缓存。如果存在s-maxage，则会覆盖掉max-age和Expires header。</p>\n<h3 id=\"public\"><a href=\"#public\" class=\"headerlink\" title=\"public\"></a>public</h3><p>public 指定响应会被缓存，并且在多用户间共享。也就是下图的意思。如果没有指定是public还是private，则默认为public。<br><img src=\"/2018/06/13/前端缓存/3.png\" title=\"public请求图\"></p>\n<h3 id=\"private\"><a href=\"#private\" class=\"headerlink\" title=\"private\"></a>private</h3><p>private 响应只作为私有的缓存（见下图），不能在用户间共享。如果要求HTTP认证，响应会自动设置为private。<br><img src=\"/2018/06/13/前端缓存/4.png\" title=\"private请求图\"></p>\n<h3 id=\"no-cache\"><a href=\"#no-cache\" class=\"headerlink\" title=\"no-cache\"></a>no-cache</h3><p>no-cache 指定不缓存响应，表明资源不进行缓存，比如，<br><img src=\"/2018/06/13/前端缓存/5.png\" title=\"no-cache请求图\"><br>但是设置了no-cache之后并不代表浏览器不缓存，而是在缓存前要向服务器确认资源是否被更改。因此有的时候只设置no-cache防止缓存还是不够保险，还可以加上private指令，将过期时间设为过去的时间。</p>\n<h3 id=\"no-store\"><a href=\"#no-store\" class=\"headerlink\" title=\"no-store\"></a>no-store</h3><p>no-store 绝对禁止缓存，一看就知道如果用了这个命令当然就是不会进行缓存啦～每次请求资源都要从服务器重新获取。</p>\n<h3 id=\"must-revalidate\"><a href=\"#must-revalidate\" class=\"headerlink\" title=\"must-revalidate\"></a>must-revalidate</h3><p>must-revalidate指定如果页面是过期的，则去服务器进行获取。这个指令并不常用，就不做过多的讨论了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s-maxage &gt; max-age &gt; Expires &gt; Last-Modified</span><br></pre></td></tr></table></figure>\n<h2 id=\"Expires\"><a href=\"#Expires\" class=\"headerlink\" title=\"Expires\"></a>Expires</h2><p>&emsp;&emsp;缓存过期时间，用来指定资源到期的时间，是服务器端的具体的时间点。也就是说，Expires=max-age + 请求时间，需要和Last-modified结合使用。但在上面我们提到过，cache-control的优先级更高。 Expires是Web服务器响应消息头字段，在响应http请求时告诉浏览器在过期时间前浏览器可以直接从浏览器缓存取数据，而无需再次请求。<br><img src=\"/2018/06/13/前端缓存/6.png\" title=\"Expires请求图\"></p>\n<h2 id=\"Last-modified\"><a href=\"#Last-modified\" class=\"headerlink\" title=\"Last-modified\"></a>Last-modified</h2><p>&emsp;&emsp;服务器端文件的最后修改时间，需要和cache-control共同使用，是检查服务器端资源是否更新的一种方式。当浏览器再次进行请求时，会向服务器传送If-Modified-Since报头，询问Last-Modified时间点之后资源是否被修改过。如果没有修改，则返回码为304，使用缓存；如果修改过，则再次去服务器请求资源，返回码和首次请求相同为200，资源为服务器最新资源。<br>如下图，最后修改时间为2014年12月19日星期五2点50分47秒<br><img src=\"/2018/06/13/前端缓存/7.png\" title=\"Last-modified请求图\"></p>\n<h2 id=\"ETag\"><a href=\"#ETag\" class=\"headerlink\" title=\"ETag\"></a>ETag</h2><p>&emsp;&emsp;根据实体内容生成一段hash字符串，标识资源的状态，由服务端产生。浏览器会将这串字符串传回服务器，验证资源是否已经修改，如果没有修改，过程如下：<br><img src=\"/2018/06/13/前端缓存/8.png\" title=\"ETag请求图\"><br>使用ETag可以解决Last-modified存在的一些问题：</p>\n<ul>\n<li>某些服务器不能精确得到资源的最后修改时间，这样就无法通过最后修改时间判断资源是否更新。</li>\n<li>如果资源修改非常频繁，在秒以下的时间内进行修改，而Last-modified只能精确到秒。</li>\n<li>一些资源的最后修改时间改变了，但是内容没改变，使用ETag就认为资源还是没有修改的。</li>\n</ul>\n<h1 id=\"使用缓存流程\"><a href=\"#使用缓存流程\" class=\"headerlink\" title=\"使用缓存流程\"></a>使用缓存流程</h1><p>还是用图说话，下面是我所总结的从浏览器请求到展示资源的过程：<br><img src=\"/2018/06/13/前端缓存/9.png\" title=\"浏览器请求到展示资源的过程图\"></p>\n<h2 id=\"cache-control指令使用\"><a href=\"#cache-control指令使用\" class=\"headerlink\" title=\"cache-control指令使用\"></a>cache-control指令使用</h2><img src=\"/2018/06/13/前端缓存/10.png\" title=\"cache-control指令使用\">\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://github.com/Pines-Cheng/blog/issues/5\" target=\"_blank\" rel=\"noopener\">前端必须知道的http缓存 </a><br><a href=\"http://www.alloyteam.com/2016/03/discussion-on-web-caching/\" target=\"_blank\" rel=\"noopener\">浅谈web缓存</a></p>\n"},{"title":"前端静态资源缓存策略","date":"2018-06-14T08:31:56.000Z","_content":"\n# 效果\n对于页面中静态资源（html/js/css/img/webfont），理想中的效果：\n\n- 页面以最快的速度获取到所有必须静态资源，渲染飞快；\n- 服务器上静态资源未更新时再次访问不请求服务器；\n- 服务器上静态资源更新时请求服务器最新资源，加载又飞快。\n\n总结下来也就是2个指标：\n\n- 静态资源加载速度\n- 页面渲染速度\n\n# 性能优化原则及分类\n| 优化方向 | 优化手段 |\n| - | - |\n| 请求数量 | 合并脚本和样式表，CSS Sprites，拆分初始化负载，划分主域 |\n| 请求带宽 | 开启GZip，精简JavaScript，移除重复脚本，图像优化 |\n| 缓存利用 | 使用CDN，使用外部JavaScript和CSS，添加Expires头，减少DNS查找，配置ETag，使AjaX可缓存 |\n| 页面结构 | 将样式表放在顶部，将脚本放在底部，尽早刷新文档的输出 |\n| 代码校验 | 避免CSS表达式，避免重定向 |\n\n目前大多数前端团队可以利用 yui compressor 或者 google closure compiler 等压缩工具很容易做到 精简Javascript 这条原则；同样的，也可以使用图片压缩工具对图像进行压缩，实现 图像优化 原则。这两条原则是对单个资源的处理，因此不会引起任何工程方面的问题。很多团队也通过引入代码校验流程来确保实现 避免css表达式 和 避免重定向 原则。目前绝大多数互联网公司也已经开启了服务端的Gzip压缩，并使用CDN实现静态资源的缓存和快速访问；一些技术实力雄厚的前端团队甚至研发出了自动CSS Sprites工具，解决了CSS Sprites在工程维护方面的难题。使用“查找-替换”思路，我们似乎也可以很好的实现 划分主域 原则。\n\n# 静态资源版本更新与缓存\n缓存利用分类中保留了 添加`Expires`头 和 配置`ETag` 两项。或许有些人会质疑，明明这两项只要配置了服务器的相关选项就可以实现，为什么说它们难以解决呢？确实，开启这两项很容易，但开启了缓存后，我们的项目就开始面临另一个挑战： 如何更新这些缓存？\n相信大多数团队也找到了类似的答案，它和《高性能网站建设指南》关于“添加Expires头”所说的原则一样——修订文件名。即：\n> 最有效的解决方案是修改其所有链接，这样，全新的请求将从原始服务器下载最新的内容。\n\n思路没错，但要怎么改变链接呢？变成什么样的链接才能有效更新缓存，又能最大限度避免那些没有修改过的文件缓存不失效呢？\n\n先来看看现在一般前端团队的做法：\n```html\n<h1>hello world</h1>\n\n<script type=\"text/javascript\" src=\"a.js?t=201404231123\"></script>\n<script type=\"text/javascript\" src=\"b.js?t=201404231123\"></script>\n<script type=\"text/javascript\" src=\"c.js?t=201404231123\"></script>\n<script type=\"text/javascript\" src=\"d.js?t=201404231123\"></script>\n<script type=\"text/javascript\" src=\"e.js?t=201404231123\"></script>\n```\n> ps: 也有团队采用构建版本号为静态资源请求添加query，它们在本质上是没有区别的，在此就不赘述了。\n\n接下来，项目升级，比如页面上的html结构发生变化，对应还要修改 a.js 这个文件，得到的构建结果如下：\n```html\n<header>hello world</header>\n\n<script type=\"text/javascript\" src=\"a.js?t=201404231826\"></script>\n<script type=\"text/javascript\" src=\"b.js?t=201404231826\"></script>\n<script type=\"text/javascript\" src=\"c.js?t=201404231826\"></script>\n<script type=\"text/javascript\" src=\"d.js?t=201404231826\"></script>\n<script type=\"text/javascript\" src=\"e.js?t=201404231826\"></script>\n```\n为了触发用户浏览器的缓存更新，我们需要更改静态资源的url地址，如果采用构建信息（时间戳、版本号等）作为url修改的依据，如上述代码所示，我们只修改了一个a.js文件，但再次构建会让所有请求都更改了url地址，用户再度访问页面那些没有修改过的静态资源的(b.js，b.js，c.js，d.js，e.js)的浏览器缓存也一同失效了。\n\n> 使用构建信息作为静态资源更新标记会导致每次构建发布后所有静态资源都被迫更新，浏览器缓存利用率降低，给性能带来伤害。\n\n此外，采用添加query的方式来清除缓存还有一个弊端，就是`覆盖式发布`的上线问题。\n{% asset_img deploy.png  覆盖式发布 %}\n\n采用`query`更新缓存的方式实际上要覆盖线上文件的，`index.html`和`a.js`总有一个先后的顺序，从而中间出现一段或大或小的时间间隔。尤其是当页面是后端渲染的模板的时候，静态资源和模板是部署在不同的机器集群上的，上线的过程中，静态资源和页面文件的部署时间间隔可能会非常长，对于一个大型互联网应用来说即使在一个很小的时间间隔内，都有可能出现新用户访问。在这个时间间隔中，访问了网站的用户会发生什么情况呢？\n- 如果先覆盖`index.html`，后覆盖`a.js`，用户在这个时间间隙访问，会得到新的`index.html`配合旧的`a.js`的情况，从而出现错误的页面。\n- 如果先覆盖`a.js`，后覆盖`index.html`，用户在这个间隙访问，会得到旧的`index.html`配合新的`a.js`的情况，从而也出现了错误的页面。\n这就是为什么大型web应用在版本上线的过程中经常会较集中的出现前端报错日志的原因，也是一些互联网公司选择加班到半夜等待访问低峰期再上线的原因之一。\n\n对于静态资源缓存更新的问题，目前来说最优方案就是 基于文件内容的hash版本冗余机制 了。也就是说，我们希望项目源码是这么写的：\n```js\n<script type=\"text/javascript\" src=\"a.js\"></script>\n```\n发布后代码变成\n```js\n<script type=\"text/javascript\" src=\"a_8244e91.js\"></script>\n```\n也就是`a.js`发布出来后被修改了文件名，产生一个新文件，并不是覆盖已有文件。其中`_82244e91`这串字符是根据`a.js`的文件内容进行`hash`运算得到的，只有文件内容发生变化了才会有更改。由于将文件发布为带有`hash`的新文件，而不是同名文件覆盖，因此不会出现上述说的那些问题。同时，这么做还有其他的好处：\n- 上线的`a.js`不是同名文件覆盖，而是文件名+`hash`的冗余，所以可以先上线静态资源，再上线`html`页面，不存在间隙问题；\n- 遇到问题回滚版本的时候，无需回滚`a.js`，只须回滚页面即可；\n- 由于静态资源版本号是文件内容的`hash`，因此所有静态资源可以开启永久强缓存，只有更新了内容的文件才会缓存失效，缓存利用率大增；\n\n> 以文件内容的hash值为依据生产新文件的非覆盖式发布策略是解决静态资源缓存更新最有效的手段。\n\n虽然这种方案是相比之下最完美的解决方案，但它无法通过手工的形式来维护，因为要依靠手工的形式来计算和替换hash值，并生成相应的文件，将是一项非常繁琐且容易出错的工作，因此我们需要借助工具来处理。\n\n用grunt来实现md5功能是非常困难的，因为grunt只是一个task管理器，而md5计算需要构建工具具有递归编译的能，而不是简单的任务调度。考虑这样的例子：\n{% asset_img md5.png  %}\n由于我们的资源版本号是通过对文件内容进行hash运算得到，如上图所示，`index.html`中引用的`a.css`文件的内容其实也包含了`a.png`的`hash`运算结果，因此我们在修改`index.html`中`a.css`的引用时，不能直接计算`a.css`的内容`hash`，而是要先计算出`a.png`的内容`hash`，替换`a.css`中的引用，得到了`a.css`的最终内容，再做`hash`运算，最后替换`index.html`中的引用。\n> 计算`index.html`中引用的`a.css`文件的url过程：\n> 压缩`a.png`后计算其内容的md5值\n> 将`a.png`的`md5`写入`a.css`，再压缩`a.css`，计算其内容的md5值\n> 将`a.css`的`md5`值写入到`index.html`中\n\n`grunt`等`task-based`的工具是很难在task之间协作处理这样的需求的。\n在解决了基于内容hash的版本更新问题之后，我们可以将所有前端静态资源开启永久强缓存，每次版本发布都可以首先让静态资源全量上线，再进一步上线模板或者页面文件，再也不用担心各种缓存和时间间隙的问题了！\n\n\n## 参考\n1. [Web静态资源缓存及优化](https://zhuanlan.zhihu.com/p/30780216)\n2. [前端工程与性能优化](https://github.com/fouber/blog/issues/3)\n","source":"_posts/前端静态资源缓存策略.md","raw":"---\ntitle: 前端静态资源缓存策略\ndate: 2018-06-14 16:31:56\ntags: [前端,缓存]\n---\n\n# 效果\n对于页面中静态资源（html/js/css/img/webfont），理想中的效果：\n\n- 页面以最快的速度获取到所有必须静态资源，渲染飞快；\n- 服务器上静态资源未更新时再次访问不请求服务器；\n- 服务器上静态资源更新时请求服务器最新资源，加载又飞快。\n\n总结下来也就是2个指标：\n\n- 静态资源加载速度\n- 页面渲染速度\n\n# 性能优化原则及分类\n| 优化方向 | 优化手段 |\n| - | - |\n| 请求数量 | 合并脚本和样式表，CSS Sprites，拆分初始化负载，划分主域 |\n| 请求带宽 | 开启GZip，精简JavaScript，移除重复脚本，图像优化 |\n| 缓存利用 | 使用CDN，使用外部JavaScript和CSS，添加Expires头，减少DNS查找，配置ETag，使AjaX可缓存 |\n| 页面结构 | 将样式表放在顶部，将脚本放在底部，尽早刷新文档的输出 |\n| 代码校验 | 避免CSS表达式，避免重定向 |\n\n目前大多数前端团队可以利用 yui compressor 或者 google closure compiler 等压缩工具很容易做到 精简Javascript 这条原则；同样的，也可以使用图片压缩工具对图像进行压缩，实现 图像优化 原则。这两条原则是对单个资源的处理，因此不会引起任何工程方面的问题。很多团队也通过引入代码校验流程来确保实现 避免css表达式 和 避免重定向 原则。目前绝大多数互联网公司也已经开启了服务端的Gzip压缩，并使用CDN实现静态资源的缓存和快速访问；一些技术实力雄厚的前端团队甚至研发出了自动CSS Sprites工具，解决了CSS Sprites在工程维护方面的难题。使用“查找-替换”思路，我们似乎也可以很好的实现 划分主域 原则。\n\n# 静态资源版本更新与缓存\n缓存利用分类中保留了 添加`Expires`头 和 配置`ETag` 两项。或许有些人会质疑，明明这两项只要配置了服务器的相关选项就可以实现，为什么说它们难以解决呢？确实，开启这两项很容易，但开启了缓存后，我们的项目就开始面临另一个挑战： 如何更新这些缓存？\n相信大多数团队也找到了类似的答案，它和《高性能网站建设指南》关于“添加Expires头”所说的原则一样——修订文件名。即：\n> 最有效的解决方案是修改其所有链接，这样，全新的请求将从原始服务器下载最新的内容。\n\n思路没错，但要怎么改变链接呢？变成什么样的链接才能有效更新缓存，又能最大限度避免那些没有修改过的文件缓存不失效呢？\n\n先来看看现在一般前端团队的做法：\n```html\n<h1>hello world</h1>\n\n<script type=\"text/javascript\" src=\"a.js?t=201404231123\"></script>\n<script type=\"text/javascript\" src=\"b.js?t=201404231123\"></script>\n<script type=\"text/javascript\" src=\"c.js?t=201404231123\"></script>\n<script type=\"text/javascript\" src=\"d.js?t=201404231123\"></script>\n<script type=\"text/javascript\" src=\"e.js?t=201404231123\"></script>\n```\n> ps: 也有团队采用构建版本号为静态资源请求添加query，它们在本质上是没有区别的，在此就不赘述了。\n\n接下来，项目升级，比如页面上的html结构发生变化，对应还要修改 a.js 这个文件，得到的构建结果如下：\n```html\n<header>hello world</header>\n\n<script type=\"text/javascript\" src=\"a.js?t=201404231826\"></script>\n<script type=\"text/javascript\" src=\"b.js?t=201404231826\"></script>\n<script type=\"text/javascript\" src=\"c.js?t=201404231826\"></script>\n<script type=\"text/javascript\" src=\"d.js?t=201404231826\"></script>\n<script type=\"text/javascript\" src=\"e.js?t=201404231826\"></script>\n```\n为了触发用户浏览器的缓存更新，我们需要更改静态资源的url地址，如果采用构建信息（时间戳、版本号等）作为url修改的依据，如上述代码所示，我们只修改了一个a.js文件，但再次构建会让所有请求都更改了url地址，用户再度访问页面那些没有修改过的静态资源的(b.js，b.js，c.js，d.js，e.js)的浏览器缓存也一同失效了。\n\n> 使用构建信息作为静态资源更新标记会导致每次构建发布后所有静态资源都被迫更新，浏览器缓存利用率降低，给性能带来伤害。\n\n此外，采用添加query的方式来清除缓存还有一个弊端，就是`覆盖式发布`的上线问题。\n{% asset_img deploy.png  覆盖式发布 %}\n\n采用`query`更新缓存的方式实际上要覆盖线上文件的，`index.html`和`a.js`总有一个先后的顺序，从而中间出现一段或大或小的时间间隔。尤其是当页面是后端渲染的模板的时候，静态资源和模板是部署在不同的机器集群上的，上线的过程中，静态资源和页面文件的部署时间间隔可能会非常长，对于一个大型互联网应用来说即使在一个很小的时间间隔内，都有可能出现新用户访问。在这个时间间隔中，访问了网站的用户会发生什么情况呢？\n- 如果先覆盖`index.html`，后覆盖`a.js`，用户在这个时间间隙访问，会得到新的`index.html`配合旧的`a.js`的情况，从而出现错误的页面。\n- 如果先覆盖`a.js`，后覆盖`index.html`，用户在这个间隙访问，会得到旧的`index.html`配合新的`a.js`的情况，从而也出现了错误的页面。\n这就是为什么大型web应用在版本上线的过程中经常会较集中的出现前端报错日志的原因，也是一些互联网公司选择加班到半夜等待访问低峰期再上线的原因之一。\n\n对于静态资源缓存更新的问题，目前来说最优方案就是 基于文件内容的hash版本冗余机制 了。也就是说，我们希望项目源码是这么写的：\n```js\n<script type=\"text/javascript\" src=\"a.js\"></script>\n```\n发布后代码变成\n```js\n<script type=\"text/javascript\" src=\"a_8244e91.js\"></script>\n```\n也就是`a.js`发布出来后被修改了文件名，产生一个新文件，并不是覆盖已有文件。其中`_82244e91`这串字符是根据`a.js`的文件内容进行`hash`运算得到的，只有文件内容发生变化了才会有更改。由于将文件发布为带有`hash`的新文件，而不是同名文件覆盖，因此不会出现上述说的那些问题。同时，这么做还有其他的好处：\n- 上线的`a.js`不是同名文件覆盖，而是文件名+`hash`的冗余，所以可以先上线静态资源，再上线`html`页面，不存在间隙问题；\n- 遇到问题回滚版本的时候，无需回滚`a.js`，只须回滚页面即可；\n- 由于静态资源版本号是文件内容的`hash`，因此所有静态资源可以开启永久强缓存，只有更新了内容的文件才会缓存失效，缓存利用率大增；\n\n> 以文件内容的hash值为依据生产新文件的非覆盖式发布策略是解决静态资源缓存更新最有效的手段。\n\n虽然这种方案是相比之下最完美的解决方案，但它无法通过手工的形式来维护，因为要依靠手工的形式来计算和替换hash值，并生成相应的文件，将是一项非常繁琐且容易出错的工作，因此我们需要借助工具来处理。\n\n用grunt来实现md5功能是非常困难的，因为grunt只是一个task管理器，而md5计算需要构建工具具有递归编译的能，而不是简单的任务调度。考虑这样的例子：\n{% asset_img md5.png  %}\n由于我们的资源版本号是通过对文件内容进行hash运算得到，如上图所示，`index.html`中引用的`a.css`文件的内容其实也包含了`a.png`的`hash`运算结果，因此我们在修改`index.html`中`a.css`的引用时，不能直接计算`a.css`的内容`hash`，而是要先计算出`a.png`的内容`hash`，替换`a.css`中的引用，得到了`a.css`的最终内容，再做`hash`运算，最后替换`index.html`中的引用。\n> 计算`index.html`中引用的`a.css`文件的url过程：\n> 压缩`a.png`后计算其内容的md5值\n> 将`a.png`的`md5`写入`a.css`，再压缩`a.css`，计算其内容的md5值\n> 将`a.css`的`md5`值写入到`index.html`中\n\n`grunt`等`task-based`的工具是很难在task之间协作处理这样的需求的。\n在解决了基于内容hash的版本更新问题之后，我们可以将所有前端静态资源开启永久强缓存，每次版本发布都可以首先让静态资源全量上线，再进一步上线模板或者页面文件，再也不用担心各种缓存和时间间隙的问题了！\n\n\n## 参考\n1. [Web静态资源缓存及优化](https://zhuanlan.zhihu.com/p/30780216)\n2. [前端工程与性能优化](https://github.com/fouber/blog/issues/3)\n","slug":"前端静态资源缓存策略","published":1,"updated":"2018-07-06T08:31:22.851Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjfde8sb000i5kxd0bdvqcwf","content":"<h1 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h1><p>对于页面中静态资源（html/js/css/img/webfont），理想中的效果：</p>\n<ul>\n<li>页面以最快的速度获取到所有必须静态资源，渲染飞快；</li>\n<li>服务器上静态资源未更新时再次访问不请求服务器；</li>\n<li>服务器上静态资源更新时请求服务器最新资源，加载又飞快。</li>\n</ul>\n<p>总结下来也就是2个指标：</p>\n<ul>\n<li>静态资源加载速度</li>\n<li>页面渲染速度</li>\n</ul>\n<h1 id=\"性能优化原则及分类\"><a href=\"#性能优化原则及分类\" class=\"headerlink\" title=\"性能优化原则及分类\"></a>性能优化原则及分类</h1><table>\n<thead>\n<tr>\n<th>优化方向</th>\n<th>优化手段</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>请求数量</td>\n<td>合并脚本和样式表，CSS Sprites，拆分初始化负载，划分主域</td>\n</tr>\n<tr>\n<td>请求带宽</td>\n<td>开启GZip，精简JavaScript，移除重复脚本，图像优化</td>\n</tr>\n<tr>\n<td>缓存利用</td>\n<td>使用CDN，使用外部JavaScript和CSS，添加Expires头，减少DNS查找，配置ETag，使AjaX可缓存</td>\n</tr>\n<tr>\n<td>页面结构</td>\n<td>将样式表放在顶部，将脚本放在底部，尽早刷新文档的输出</td>\n</tr>\n<tr>\n<td>代码校验</td>\n<td>避免CSS表达式，避免重定向</td>\n</tr>\n</tbody>\n</table>\n<p>目前大多数前端团队可以利用 yui compressor 或者 google closure compiler 等压缩工具很容易做到 精简Javascript 这条原则；同样的，也可以使用图片压缩工具对图像进行压缩，实现 图像优化 原则。这两条原则是对单个资源的处理，因此不会引起任何工程方面的问题。很多团队也通过引入代码校验流程来确保实现 避免css表达式 和 避免重定向 原则。目前绝大多数互联网公司也已经开启了服务端的Gzip压缩，并使用CDN实现静态资源的缓存和快速访问；一些技术实力雄厚的前端团队甚至研发出了自动CSS Sprites工具，解决了CSS Sprites在工程维护方面的难题。使用“查找-替换”思路，我们似乎也可以很好的实现 划分主域 原则。</p>\n<h1 id=\"静态资源版本更新与缓存\"><a href=\"#静态资源版本更新与缓存\" class=\"headerlink\" title=\"静态资源版本更新与缓存\"></a>静态资源版本更新与缓存</h1><p>缓存利用分类中保留了 添加<code>Expires</code>头 和 配置<code>ETag</code> 两项。或许有些人会质疑，明明这两项只要配置了服务器的相关选项就可以实现，为什么说它们难以解决呢？确实，开启这两项很容易，但开启了缓存后，我们的项目就开始面临另一个挑战： 如何更新这些缓存？<br>相信大多数团队也找到了类似的答案，它和《高性能网站建设指南》关于“添加Expires头”所说的原则一样——修订文件名。即：</p>\n<blockquote>\n<p>最有效的解决方案是修改其所有链接，这样，全新的请求将从原始服务器下载最新的内容。</p>\n</blockquote>\n<p>思路没错，但要怎么改变链接呢？变成什么样的链接才能有效更新缓存，又能最大限度避免那些没有修改过的文件缓存不失效呢？</p>\n<p>先来看看现在一般前端团队的做法：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>hello world<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"a.js?t=201404231123\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"b.js?t=201404231123\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"c.js?t=201404231123\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"d.js?t=201404231123\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"e.js?t=201404231123\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>ps: 也有团队采用构建版本号为静态资源请求添加query，它们在本质上是没有区别的，在此就不赘述了。</p>\n</blockquote>\n<p>接下来，项目升级，比如页面上的html结构发生变化，对应还要修改 a.js 这个文件，得到的构建结果如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span>hello world<span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"a.js?t=201404231826\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"b.js?t=201404231826\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"c.js?t=201404231826\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"d.js?t=201404231826\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"e.js?t=201404231826\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>为了触发用户浏览器的缓存更新，我们需要更改静态资源的url地址，如果采用构建信息（时间戳、版本号等）作为url修改的依据，如上述代码所示，我们只修改了一个a.js文件，但再次构建会让所有请求都更改了url地址，用户再度访问页面那些没有修改过的静态资源的(b.js，b.js，c.js，d.js，e.js)的浏览器缓存也一同失效了。</p>\n<blockquote>\n<p>使用构建信息作为静态资源更新标记会导致每次构建发布后所有静态资源都被迫更新，浏览器缓存利用率降低，给性能带来伤害。</p>\n</blockquote>\n<p>此外，采用添加query的方式来清除缓存还有一个弊端，就是<code>覆盖式发布</code>的上线问题。<br><img src=\"/2018/06/14/前端静态资源缓存策略/deploy.png\" title=\"覆盖式发布\"></p>\n<p>采用<code>query</code>更新缓存的方式实际上要覆盖线上文件的，<code>index.html</code>和<code>a.js</code>总有一个先后的顺序，从而中间出现一段或大或小的时间间隔。尤其是当页面是后端渲染的模板的时候，静态资源和模板是部署在不同的机器集群上的，上线的过程中，静态资源和页面文件的部署时间间隔可能会非常长，对于一个大型互联网应用来说即使在一个很小的时间间隔内，都有可能出现新用户访问。在这个时间间隔中，访问了网站的用户会发生什么情况呢？</p>\n<ul>\n<li>如果先覆盖<code>index.html</code>，后覆盖<code>a.js</code>，用户在这个时间间隙访问，会得到新的<code>index.html</code>配合旧的<code>a.js</code>的情况，从而出现错误的页面。</li>\n<li>如果先覆盖<code>a.js</code>，后覆盖<code>index.html</code>，用户在这个间隙访问，会得到旧的<code>index.html</code>配合新的<code>a.js</code>的情况，从而也出现了错误的页面。<br>这就是为什么大型web应用在版本上线的过程中经常会较集中的出现前端报错日志的原因，也是一些互联网公司选择加班到半夜等待访问低峰期再上线的原因之一。</li>\n</ul>\n<p>对于静态资源缓存更新的问题，目前来说最优方案就是 基于文件内容的hash版本冗余机制 了。也就是说，我们希望项目源码是这么写的：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"a.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>\n<p>发布后代码变成<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"a_8244e91.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>\n<p>也就是<code>a.js</code>发布出来后被修改了文件名，产生一个新文件，并不是覆盖已有文件。其中<code>_82244e91</code>这串字符是根据<code>a.js</code>的文件内容进行<code>hash</code>运算得到的，只有文件内容发生变化了才会有更改。由于将文件发布为带有<code>hash</code>的新文件，而不是同名文件覆盖，因此不会出现上述说的那些问题。同时，这么做还有其他的好处：</p>\n<ul>\n<li>上线的<code>a.js</code>不是同名文件覆盖，而是文件名+<code>hash</code>的冗余，所以可以先上线静态资源，再上线<code>html</code>页面，不存在间隙问题；</li>\n<li>遇到问题回滚版本的时候，无需回滚<code>a.js</code>，只须回滚页面即可；</li>\n<li>由于静态资源版本号是文件内容的<code>hash</code>，因此所有静态资源可以开启永久强缓存，只有更新了内容的文件才会缓存失效，缓存利用率大增；</li>\n</ul>\n<blockquote>\n<p>以文件内容的hash值为依据生产新文件的非覆盖式发布策略是解决静态资源缓存更新最有效的手段。</p>\n</blockquote>\n<p>虽然这种方案是相比之下最完美的解决方案，但它无法通过手工的形式来维护，因为要依靠手工的形式来计算和替换hash值，并生成相应的文件，将是一项非常繁琐且容易出错的工作，因此我们需要借助工具来处理。</p>\n<p>用grunt来实现md5功能是非常困难的，因为grunt只是一个task管理器，而md5计算需要构建工具具有递归编译的能，而不是简单的任务调度。考虑这样的例子：<br><img src=\"/2018/06/14/前端静态资源缓存策略/md5.png\"><br>由于我们的资源版本号是通过对文件内容进行hash运算得到，如上图所示，<code>index.html</code>中引用的<code>a.css</code>文件的内容其实也包含了<code>a.png</code>的<code>hash</code>运算结果，因此我们在修改<code>index.html</code>中<code>a.css</code>的引用时，不能直接计算<code>a.css</code>的内容<code>hash</code>，而是要先计算出<code>a.png</code>的内容<code>hash</code>，替换<code>a.css</code>中的引用，得到了<code>a.css</code>的最终内容，再做<code>hash</code>运算，最后替换<code>index.html</code>中的引用。</p>\n<blockquote>\n<p>计算<code>index.html</code>中引用的<code>a.css</code>文件的url过程：<br>压缩<code>a.png</code>后计算其内容的md5值<br>将<code>a.png</code>的<code>md5</code>写入<code>a.css</code>，再压缩<code>a.css</code>，计算其内容的md5值<br>将<code>a.css</code>的<code>md5</code>值写入到<code>index.html</code>中</p>\n</blockquote>\n<p><code>grunt</code>等<code>task-based</code>的工具是很难在task之间协作处理这样的需求的。<br>在解决了基于内容hash的版本更新问题之后，我们可以将所有前端静态资源开启永久强缓存，每次版本发布都可以首先让静态资源全量上线，再进一步上线模板或者页面文件，再也不用担心各种缓存和时间间隙的问题了！</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"https://zhuanlan.zhihu.com/p/30780216\" target=\"_blank\" rel=\"noopener\">Web静态资源缓存及优化</a></li>\n<li><a href=\"https://github.com/fouber/blog/issues/3\" target=\"_blank\" rel=\"noopener\">前端工程与性能优化</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h1><p>对于页面中静态资源（html/js/css/img/webfont），理想中的效果：</p>\n<ul>\n<li>页面以最快的速度获取到所有必须静态资源，渲染飞快；</li>\n<li>服务器上静态资源未更新时再次访问不请求服务器；</li>\n<li>服务器上静态资源更新时请求服务器最新资源，加载又飞快。</li>\n</ul>\n<p>总结下来也就是2个指标：</p>\n<ul>\n<li>静态资源加载速度</li>\n<li>页面渲染速度</li>\n</ul>\n<h1 id=\"性能优化原则及分类\"><a href=\"#性能优化原则及分类\" class=\"headerlink\" title=\"性能优化原则及分类\"></a>性能优化原则及分类</h1><table>\n<thead>\n<tr>\n<th>优化方向</th>\n<th>优化手段</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>请求数量</td>\n<td>合并脚本和样式表，CSS Sprites，拆分初始化负载，划分主域</td>\n</tr>\n<tr>\n<td>请求带宽</td>\n<td>开启GZip，精简JavaScript，移除重复脚本，图像优化</td>\n</tr>\n<tr>\n<td>缓存利用</td>\n<td>使用CDN，使用外部JavaScript和CSS，添加Expires头，减少DNS查找，配置ETag，使AjaX可缓存</td>\n</tr>\n<tr>\n<td>页面结构</td>\n<td>将样式表放在顶部，将脚本放在底部，尽早刷新文档的输出</td>\n</tr>\n<tr>\n<td>代码校验</td>\n<td>避免CSS表达式，避免重定向</td>\n</tr>\n</tbody>\n</table>\n<p>目前大多数前端团队可以利用 yui compressor 或者 google closure compiler 等压缩工具很容易做到 精简Javascript 这条原则；同样的，也可以使用图片压缩工具对图像进行压缩，实现 图像优化 原则。这两条原则是对单个资源的处理，因此不会引起任何工程方面的问题。很多团队也通过引入代码校验流程来确保实现 避免css表达式 和 避免重定向 原则。目前绝大多数互联网公司也已经开启了服务端的Gzip压缩，并使用CDN实现静态资源的缓存和快速访问；一些技术实力雄厚的前端团队甚至研发出了自动CSS Sprites工具，解决了CSS Sprites在工程维护方面的难题。使用“查找-替换”思路，我们似乎也可以很好的实现 划分主域 原则。</p>\n<h1 id=\"静态资源版本更新与缓存\"><a href=\"#静态资源版本更新与缓存\" class=\"headerlink\" title=\"静态资源版本更新与缓存\"></a>静态资源版本更新与缓存</h1><p>缓存利用分类中保留了 添加<code>Expires</code>头 和 配置<code>ETag</code> 两项。或许有些人会质疑，明明这两项只要配置了服务器的相关选项就可以实现，为什么说它们难以解决呢？确实，开启这两项很容易，但开启了缓存后，我们的项目就开始面临另一个挑战： 如何更新这些缓存？<br>相信大多数团队也找到了类似的答案，它和《高性能网站建设指南》关于“添加Expires头”所说的原则一样——修订文件名。即：</p>\n<blockquote>\n<p>最有效的解决方案是修改其所有链接，这样，全新的请求将从原始服务器下载最新的内容。</p>\n</blockquote>\n<p>思路没错，但要怎么改变链接呢？变成什么样的链接才能有效更新缓存，又能最大限度避免那些没有修改过的文件缓存不失效呢？</p>\n<p>先来看看现在一般前端团队的做法：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>hello world<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"a.js?t=201404231123\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"b.js?t=201404231123\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"c.js?t=201404231123\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"d.js?t=201404231123\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"e.js?t=201404231123\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>ps: 也有团队采用构建版本号为静态资源请求添加query，它们在本质上是没有区别的，在此就不赘述了。</p>\n</blockquote>\n<p>接下来，项目升级，比如页面上的html结构发生变化，对应还要修改 a.js 这个文件，得到的构建结果如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span>hello world<span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"a.js?t=201404231826\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"b.js?t=201404231826\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"c.js?t=201404231826\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"d.js?t=201404231826\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"e.js?t=201404231826\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>为了触发用户浏览器的缓存更新，我们需要更改静态资源的url地址，如果采用构建信息（时间戳、版本号等）作为url修改的依据，如上述代码所示，我们只修改了一个a.js文件，但再次构建会让所有请求都更改了url地址，用户再度访问页面那些没有修改过的静态资源的(b.js，b.js，c.js，d.js，e.js)的浏览器缓存也一同失效了。</p>\n<blockquote>\n<p>使用构建信息作为静态资源更新标记会导致每次构建发布后所有静态资源都被迫更新，浏览器缓存利用率降低，给性能带来伤害。</p>\n</blockquote>\n<p>此外，采用添加query的方式来清除缓存还有一个弊端，就是<code>覆盖式发布</code>的上线问题。<br><img src=\"/2018/06/14/前端静态资源缓存策略/deploy.png\" title=\"覆盖式发布\"></p>\n<p>采用<code>query</code>更新缓存的方式实际上要覆盖线上文件的，<code>index.html</code>和<code>a.js</code>总有一个先后的顺序，从而中间出现一段或大或小的时间间隔。尤其是当页面是后端渲染的模板的时候，静态资源和模板是部署在不同的机器集群上的，上线的过程中，静态资源和页面文件的部署时间间隔可能会非常长，对于一个大型互联网应用来说即使在一个很小的时间间隔内，都有可能出现新用户访问。在这个时间间隔中，访问了网站的用户会发生什么情况呢？</p>\n<ul>\n<li>如果先覆盖<code>index.html</code>，后覆盖<code>a.js</code>，用户在这个时间间隙访问，会得到新的<code>index.html</code>配合旧的<code>a.js</code>的情况，从而出现错误的页面。</li>\n<li>如果先覆盖<code>a.js</code>，后覆盖<code>index.html</code>，用户在这个间隙访问，会得到旧的<code>index.html</code>配合新的<code>a.js</code>的情况，从而也出现了错误的页面。<br>这就是为什么大型web应用在版本上线的过程中经常会较集中的出现前端报错日志的原因，也是一些互联网公司选择加班到半夜等待访问低峰期再上线的原因之一。</li>\n</ul>\n<p>对于静态资源缓存更新的问题，目前来说最优方案就是 基于文件内容的hash版本冗余机制 了。也就是说，我们希望项目源码是这么写的：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"a.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>\n<p>发布后代码变成<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"a_8244e91.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>\n<p>也就是<code>a.js</code>发布出来后被修改了文件名，产生一个新文件，并不是覆盖已有文件。其中<code>_82244e91</code>这串字符是根据<code>a.js</code>的文件内容进行<code>hash</code>运算得到的，只有文件内容发生变化了才会有更改。由于将文件发布为带有<code>hash</code>的新文件，而不是同名文件覆盖，因此不会出现上述说的那些问题。同时，这么做还有其他的好处：</p>\n<ul>\n<li>上线的<code>a.js</code>不是同名文件覆盖，而是文件名+<code>hash</code>的冗余，所以可以先上线静态资源，再上线<code>html</code>页面，不存在间隙问题；</li>\n<li>遇到问题回滚版本的时候，无需回滚<code>a.js</code>，只须回滚页面即可；</li>\n<li>由于静态资源版本号是文件内容的<code>hash</code>，因此所有静态资源可以开启永久强缓存，只有更新了内容的文件才会缓存失效，缓存利用率大增；</li>\n</ul>\n<blockquote>\n<p>以文件内容的hash值为依据生产新文件的非覆盖式发布策略是解决静态资源缓存更新最有效的手段。</p>\n</blockquote>\n<p>虽然这种方案是相比之下最完美的解决方案，但它无法通过手工的形式来维护，因为要依靠手工的形式来计算和替换hash值，并生成相应的文件，将是一项非常繁琐且容易出错的工作，因此我们需要借助工具来处理。</p>\n<p>用grunt来实现md5功能是非常困难的，因为grunt只是一个task管理器，而md5计算需要构建工具具有递归编译的能，而不是简单的任务调度。考虑这样的例子：<br><img src=\"/2018/06/14/前端静态资源缓存策略/md5.png\"><br>由于我们的资源版本号是通过对文件内容进行hash运算得到，如上图所示，<code>index.html</code>中引用的<code>a.css</code>文件的内容其实也包含了<code>a.png</code>的<code>hash</code>运算结果，因此我们在修改<code>index.html</code>中<code>a.css</code>的引用时，不能直接计算<code>a.css</code>的内容<code>hash</code>，而是要先计算出<code>a.png</code>的内容<code>hash</code>，替换<code>a.css</code>中的引用，得到了<code>a.css</code>的最终内容，再做<code>hash</code>运算，最后替换<code>index.html</code>中的引用。</p>\n<blockquote>\n<p>计算<code>index.html</code>中引用的<code>a.css</code>文件的url过程：<br>压缩<code>a.png</code>后计算其内容的md5值<br>将<code>a.png</code>的<code>md5</code>写入<code>a.css</code>，再压缩<code>a.css</code>，计算其内容的md5值<br>将<code>a.css</code>的<code>md5</code>值写入到<code>index.html</code>中</p>\n</blockquote>\n<p><code>grunt</code>等<code>task-based</code>的工具是很难在task之间协作处理这样的需求的。<br>在解决了基于内容hash的版本更新问题之后，我们可以将所有前端静态资源开启永久强缓存，每次版本发布都可以首先让静态资源全量上线，再进一步上线模板或者页面文件，再也不用担心各种缓存和时间间隙的问题了！</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"https://zhuanlan.zhihu.com/p/30780216\" target=\"_blank\" rel=\"noopener\">Web静态资源缓存及优化</a></li>\n<li><a href=\"https://github.com/fouber/blog/issues/3\" target=\"_blank\" rel=\"noopener\">前端工程与性能优化</a></li>\n</ol>\n"},{"title":"缓存策略三要素分解法(转0)","date":"2018-06-15T11:31:50.000Z","_content":"\n原文：[彻底弄懂 Http 缓存机制 - 基于缓存策略三要素分解法](https://mp.weixin.qq.com/s/qOMO0LIdA47j3RjhbCWUEQ)\n","source":"_posts/缓存策略三要素分解法.md","raw":"---\ntitle: 缓存策略三要素分解法(转0)\ndate: 2018-06-15 19:31:50\ntag: 缓存\n---\n\n原文：[彻底弄懂 Http 缓存机制 - 基于缓存策略三要素分解法](https://mp.weixin.qq.com/s/qOMO0LIdA47j3RjhbCWUEQ)\n","slug":"缓存策略三要素分解法","published":1,"updated":"2018-06-15T06:15:33.027Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjfde8sc000k5kxd5t98h59t","content":"<p>原文：<a href=\"https://mp.weixin.qq.com/s/qOMO0LIdA47j3RjhbCWUEQ\" target=\"_blank\" rel=\"noopener\">彻底弄懂 Http 缓存机制 - 基于缓存策略三要素分解法</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>原文：<a href=\"https://mp.weixin.qq.com/s/qOMO0LIdA47j3RjhbCWUEQ\" target=\"_blank\" rel=\"noopener\">彻底弄懂 Http 缓存机制 - 基于缓存策略三要素分解法</a></p>\n"},{"title":"实用工具","_content":"http://www.tubangzhu.com/\nhttps://ppt.baomitu.com/\nhttps://www.chuangkit.com/designtools/startdesign\nhttp://js8.in/2013/11/16/%E6%8E%A8%E8%8D%90nodeppt%EF%BC%9A%E4%BD%BF%E7%94%A8markdown%E8%AF%AD%E6%B3%95%E6%9D%A5%E5%86%99%E7%BD%91%E9%A1%B5ppt/\nhttps://www.jianshu.com/p/e78cce9d5af0\n[nodeppt](https://github.com/ksky521/nodeppt)\n[reveal.js](https://github.com/hakimel/reveal.js/)\nhttps://slides.com/","source":"_posts/实用工具.md","raw":"---\ntitle: 实用工具\n---\nhttp://www.tubangzhu.com/\nhttps://ppt.baomitu.com/\nhttps://www.chuangkit.com/designtools/startdesign\nhttp://js8.in/2013/11/16/%E6%8E%A8%E8%8D%90nodeppt%EF%BC%9A%E4%BD%BF%E7%94%A8markdown%E8%AF%AD%E6%B3%95%E6%9D%A5%E5%86%99%E7%BD%91%E9%A1%B5ppt/\nhttps://www.jianshu.com/p/e78cce9d5af0\n[nodeppt](https://github.com/ksky521/nodeppt)\n[reveal.js](https://github.com/hakimel/reveal.js/)\nhttps://slides.com/","slug":"实用工具","published":1,"date":"2018-06-15T09:27:07.254Z","updated":"2018-06-15T09:36:49.302Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjfde8sg000n5kxdu0d3vz9a","content":"<p><a href=\"http://www.tubangzhu.com/\" target=\"_blank\" rel=\"noopener\">http://www.tubangzhu.com/</a><br><a href=\"https://ppt.baomitu.com/\" target=\"_blank\" rel=\"noopener\">https://ppt.baomitu.com/</a><br><a href=\"https://www.chuangkit.com/designtools/startdesign\" target=\"_blank\" rel=\"noopener\">https://www.chuangkit.com/designtools/startdesign</a><br><a href=\"http://js8.in/2013/11/16/%E6%8E%A8%E8%8D%90nodeppt%EF%BC%9A%E4%BD%BF%E7%94%A8markdown%E8%AF%AD%E6%B3%95%E6%9D%A5%E5%86%99%E7%BD%91%E9%A1%B5ppt/\" target=\"_blank\" rel=\"noopener\">http://js8.in/2013/11/16/%E6%8E%A8%E8%8D%90nodeppt%EF%BC%9A%E4%BD%BF%E7%94%A8markdown%E8%AF%AD%E6%B3%95%E6%9D%A5%E5%86%99%E7%BD%91%E9%A1%B5ppt/</a><br><a href=\"https://www.jianshu.com/p/e78cce9d5af0\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/e78cce9d5af0</a><br><a href=\"https://github.com/ksky521/nodeppt\" target=\"_blank\" rel=\"noopener\">nodeppt</a><br><a href=\"https://github.com/hakimel/reveal.js/\" target=\"_blank\" rel=\"noopener\">reveal.js</a><br><a href=\"https://slides.com/\" target=\"_blank\" rel=\"noopener\">https://slides.com/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://www.tubangzhu.com/\" target=\"_blank\" rel=\"noopener\">http://www.tubangzhu.com/</a><br><a href=\"https://ppt.baomitu.com/\" target=\"_blank\" rel=\"noopener\">https://ppt.baomitu.com/</a><br><a href=\"https://www.chuangkit.com/designtools/startdesign\" target=\"_blank\" rel=\"noopener\">https://www.chuangkit.com/designtools/startdesign</a><br><a href=\"http://js8.in/2013/11/16/%E6%8E%A8%E8%8D%90nodeppt%EF%BC%9A%E4%BD%BF%E7%94%A8markdown%E8%AF%AD%E6%B3%95%E6%9D%A5%E5%86%99%E7%BD%91%E9%A1%B5ppt/\" target=\"_blank\" rel=\"noopener\">http://js8.in/2013/11/16/%E6%8E%A8%E8%8D%90nodeppt%EF%BC%9A%E4%BD%BF%E7%94%A8markdown%E8%AF%AD%E6%B3%95%E6%9D%A5%E5%86%99%E7%BD%91%E9%A1%B5ppt/</a><br><a href=\"https://www.jianshu.com/p/e78cce9d5af0\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/e78cce9d5af0</a><br><a href=\"https://github.com/ksky521/nodeppt\" target=\"_blank\" rel=\"noopener\">nodeppt</a><br><a href=\"https://github.com/hakimel/reveal.js/\" target=\"_blank\" rel=\"noopener\">reveal.js</a><br><a href=\"https://slides.com/\" target=\"_blank\" rel=\"noopener\">https://slides.com/</a></p>\n"}],"PostAsset":[{"_id":"source/_posts/linux下使用docker搭建sentry/11.png","slug":"11.png","post":"cjjfde8rn00035kxdlmg7bg2m","modified":0,"renderable":0},{"_id":"source/_posts/前端静态资源缓存策略/deploy.png","slug":"deploy.png","post":"cjjfde8sb000i5kxd0bdvqcwf","modified":0,"renderable":0},{"_id":"source/_posts/前端静态资源缓存策略/md5.png","slug":"md5.png","post":"cjjfde8sb000i5kxd0bdvqcwf","modified":0,"renderable":0},{"_id":"source/_posts/前端缓存/1.PNG","slug":"1.PNG","post":"cjjfde8sa000g5kxdnqj54z11","modified":0,"renderable":0},{"_id":"source/_posts/前端缓存/10.png","slug":"10.png","post":"cjjfde8sa000g5kxdnqj54z11","modified":0,"renderable":0},{"_id":"source/_posts/前端缓存/2.png","slug":"2.png","post":"cjjfde8sa000g5kxdnqj54z11","modified":0,"renderable":0},{"_id":"source/_posts/前端缓存/3.png","slug":"3.png","post":"cjjfde8sa000g5kxdnqj54z11","modified":0,"renderable":0},{"_id":"source/_posts/前端缓存/4.png","slug":"4.png","post":"cjjfde8sa000g5kxdnqj54z11","modified":0,"renderable":0},{"_id":"source/_posts/前端缓存/5.png","slug":"5.png","post":"cjjfde8sa000g5kxdnqj54z11","modified":0,"renderable":0},{"_id":"source/_posts/前端缓存/6.png","slug":"6.png","post":"cjjfde8sa000g5kxdnqj54z11","modified":0,"renderable":0},{"_id":"source/_posts/前端缓存/7.png","slug":"7.png","post":"cjjfde8sa000g5kxdnqj54z11","modified":0,"renderable":0},{"_id":"source/_posts/前端缓存/8.png","slug":"8.png","post":"cjjfde8sa000g5kxdnqj54z11","modified":0,"renderable":0},{"_id":"source/_posts/前端缓存/9.png","slug":"9.png","post":"cjjfde8sa000g5kxdnqj54z11","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cjjfde8rq00055kxd86njzjea","category_id":"cjjfde8rs00075kxdrwqpmd7g","_id":"cjjfde8ru000d5kxdhketa2iw"},{"post_id":"cjjfde8s8000f5kxdzl63ohrm","category_id":"cjif9ve8700025sxd7nvyp3dl","_id":"cjjfde8sf000l5kxdjm0fek7f"},{"post_id":"cjjfde8s7000e5kxdjf3kju9i","category_id":"cjjfde8rs00075kxdrwqpmd7g","_id":"cjjfdncii0002ngxddgljk1re"}],"PostTag":[{"post_id":"cjjfde8rn00035kxdlmg7bg2m","tag_id":"cjif9ve8b00065sxduhfe4xkt","_id":"cjjfde8rr00065kxdgg1ggl19"},{"post_id":"cjjfde8rn00035kxdlmg7bg2m","tag_id":"cjif9ve8d00095sxd1d4yidpn","_id":"cjjfde8rt00095kxdvna6ar4q"},{"post_id":"cjjfde8rn00035kxdlmg7bg2m","tag_id":"cjif9ve8e000b5sxdxjafmanz","_id":"cjjfde8rt000a5kxd1z8g0hxy"},{"post_id":"cjjfde8rg00005kxda9dgr29n","tag_id":"cjjfde8rl00025kxdemukrtzn","_id":"cjjfde8rt000b5kxdyvy2oa2b"},{"post_id":"cjjfde8rq00055kxd86njzjea","tag_id":"cjjfde8rt00085kxddgg1ysa7","_id":"cjjfde8ru000c5kxdkie51lod"},{"post_id":"cjjfde8s8000f5kxdzl63ohrm","tag_id":"cjidyc8l50007cgxdqcbtijh9","_id":"cjjfde8sb000h5kxdoknfxkkp"},{"post_id":"cjjfde8s8000f5kxdzl63ohrm","tag_id":"cjif9ve8900035sxdxs3gitga","_id":"cjjfde8sc000j5kxdp8evszf3"},{"post_id":"cjjfde8s8000f5kxdzl63ohrm","tag_id":"cjif9ve8a00045sxd8f1iv6g4","_id":"cjjfde8sg000m5kxd3xjtk3y8"},{"post_id":"cjjfde8sa000g5kxdnqj54z11","tag_id":"cjidyc8l50007cgxdqcbtijh9","_id":"cjjfde8si000o5kxdp189h7ni"},{"post_id":"cjjfde8sa000g5kxdnqj54z11","tag_id":"cjidyc8l60008cgxddt2wr5xy","_id":"cjjfde8si000p5kxdzcphrote"},{"post_id":"cjjfde8sa000g5kxdnqj54z11","tag_id":"cjif9ve8t000f5sxds7ohg7au","_id":"cjjfde8si000q5kxd84128vb5"},{"post_id":"cjjfde8sa000g5kxdnqj54z11","tag_id":"cjif9ve8t000g5sxd0kky4g2u","_id":"cjjfde8si000r5kxdk2gv3td3"},{"post_id":"cjjfde8sb000i5kxd0bdvqcwf","tag_id":"cjidyc8l50007cgxdqcbtijh9","_id":"cjjfde8sj000s5kxdr4bk6a9w"},{"post_id":"cjjfde8sb000i5kxd0bdvqcwf","tag_id":"cjidyc8l60008cgxddt2wr5xy","_id":"cjjfde8sj000t5kxdkeanvdjn"},{"post_id":"cjjfde8sc000k5kxd5t98h59t","tag_id":"cjidyc8l60008cgxddt2wr5xy","_id":"cjjfde8sj000u5kxd0kbqorv4"},{"post_id":"cjjfde8rk00015kxd8jnp5ugc","tag_id":"cjie4wun10002p0xdjw8ul4hs","_id":"cjjfdlluc0000ngxdrjvuki6k"},{"post_id":"cjjfde8s7000e5kxdjf3kju9i","tag_id":"cjjfde8rt00085kxddgg1ysa7","_id":"cjjfdncii0001ngxd0ow8az79"}],"Tag":[{"name":"前端，缓存","_id":"cjidyahn70003cgxdntup3iz2"},{"name":"前端、缓存","_id":"cjidyazqd0005cgxdqe3aonl8"},{"name":"前端","_id":"cjidyc8l50007cgxdqcbtijh9"},{"name":"缓存","_id":"cjidyc8l60008cgxddt2wr5xy"},{"name":"hexo","_id":"cjie4wun10002p0xdjw8ul4hs"},{"name":"异常监控","_id":"cjif9ve8900035sxdxs3gitga"},{"name":"javascript","_id":"cjif9ve8a00045sxd8f1iv6g4"},{"name":"linux","_id":"cjif9ve8b00065sxduhfe4xkt"},{"name":"docker","_id":"cjif9ve8d00095sxd1d4yidpn"},{"name":"sentry","_id":"cjif9ve8e000b5sxdxjafmanz"},{"name":"http","_id":"cjif9ve8t000f5sxds7ohg7au"},{"name":"计算机网络","_id":"cjif9ve8t000g5sxd0kky4g2u"},{"name":"git","_id":"cjjfde8rl00025kxdemukrtzn"},{"name":"webpack","_id":"cjjfde8rt00085kxddgg1ysa7"}]}}