{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/images/avatar.png","path":"images/avatar.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/_posts/git实用命令.md","hash":"87a163eeea2730cc727bf0515e4f9fa308e9346f","modified":1532866271669},{"_id":"source/_drafts/防抖与节流.md","hash":"fd8fe55204ce3f40ed1b0adae8c05b59b1c7e1e4","modified":1532866271669},{"_id":"source/_posts/hexo注意事项.md","hash":"593db26a629277a0bd65354f36217db8f1e56f2a","modified":1532866271669},{"_id":"source/_posts/linux下使用docker搭建sentry.md","hash":"ba4167c1a1e1736b8532b17b2292ed5f809e412b","modified":1532866271669},{"_id":"source/_posts/webpack分模块打包.md","hash":"985d5f616d527f3237d500a33251ae9ba74d105c","modified":1532866271671},{"_id":"source/_posts/webpack打包原理.md","hash":"6838e39f47f6afc33e18e14c9d633fb7b1867fe3","modified":1532866271671},{"_id":"source/_posts/webpack缓存.md","hash":"b3ab4d907c53a1d0af0775efda1561bacdfef92b","modified":1532866271671},{"_id":"source/_posts/前端异常监控.md","hash":"92dd1b1f014f9029ad79330d247559fc5c01336d","modified":1532866271671},{"_id":"source/_posts/前端缓存.md","hash":"81f2ad9ba1e53aad2b9b0a5730705ff0ea941b34","modified":1532866271672},{"_id":"source/_posts/实用工具.md","hash":"26877c4a25307fee843252e7519e5fbfc8e6a6a9","modified":1532866271676},{"_id":"source/_posts/前端静态资源缓存策略.md","hash":"77988b5b144dd72d6b7f5e19e19f1eaa6c3139c8","modified":1532866271676},{"_id":"source/_posts/缓存策略三要素分解法.md","hash":"d835e2a85404d5a807b1a1c562a07cc6c46050e7","modified":1532866271677},{"_id":"source/categories/index.md","hash":"a70d24d951d01ae39cb3382bc7e6a07a4f2ec315","modified":1532866271677},{"_id":"source/tags/index.md","hash":"cb5521d97f4491f81ee80e782002180d0f366d26","modified":1532866271677},{"_id":"source/_posts/前端缓存/1.PNG","hash":"2f3dfbea4976839f8941f85ec80ba69f3ccff37b","modified":1532866271672},{"_id":"source/_posts/前端缓存/2.png","hash":"215c9c5c6418ccc91625f9d1738446940b972f53","modified":1532866271673},{"_id":"source/_posts/前端缓存/4.png","hash":"cf0af203a01cbebf5850ad6f40cd3b3526b39eab","modified":1532866271673},{"_id":"source/_posts/前端缓存/3.png","hash":"b65c7c732bf1965a852c54c0372cef7264a065b3","modified":1532866271673},{"_id":"source/_posts/前端缓存/5.png","hash":"0fd34594118157391804a7e9f412b01b66df73f2","modified":1532866271674},{"_id":"source/_posts/前端缓存/8.png","hash":"1da645cfe64015af1ca3cca35e7dfb90a5fd82ad","modified":1532866271675},{"_id":"source/_posts/前端缓存/7.png","hash":"968636bdf68fa44a91bf275683e14238498ce56c","modified":1532866271674},{"_id":"source/_posts/前端缓存/6.png","hash":"0d8cb8a4b075dcf315edea5f4924172ac9430b39","modified":1532866271674},{"_id":"source/_posts/前端静态资源缓存策略/deploy.png","hash":"73b5784722c0866813de92778d90a9b6d24ebbb2","modified":1532866271676},{"_id":"source/_posts/前端静态资源缓存策略/md5.png","hash":"d43b0efe63b73877343c6dd1ae00a3cbef05b754","modified":1532866271676},{"_id":"source/_posts/linux下使用docker搭建sentry/11.png","hash":"79109b4a9d085bebd81a218ae259f69761a1437a","modified":1532866271670},{"_id":"source/_posts/前端缓存/10.png","hash":"e9866b54d4768300b874e545b0d9a49ecfb64eec","modified":1532866271673},{"_id":"source/_posts/前端缓存/9.png","hash":"1143ee3a2f14b583e88345c1ab81e7f79f66f045","modified":1532866271675},{"_id":"public/categories/index.html","hash":"0d7f6dbb01e96753ad11888fed803946f93661b7","modified":1535268513386},{"_id":"public/tags/index.html","hash":"e2ad025179c46b13b70eb31ce4e5f71ccaf5920a","modified":1535268513386},{"_id":"public/2018/07/29/实用工具/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1535266694342},{"_id":"public/2018/07/10/webpack缓存/index.html","hash":"93465ddb733727991c7d6e4827f76be4c4f92909","modified":1535268513388},{"_id":"public/2018/07/09/webpack打包原理/index.html","hash":"8848890aacdf0ed37201219970be6f3efec5a50b","modified":1535268513388},{"_id":"public/2018/07/06/webpack分模块打包/index.html","hash":"1108f4a1736acb22887ac8deab838bd6b1bfb583","modified":1535268513388},{"_id":"public/2018/07/06/git实用命令/index.html","hash":"07fe17b37630a7b8de062bbda34ce889024d2978","modified":1535268513386},{"_id":"public/2018/06/15/缓存策略三要素分解法/index.html","hash":"a58ac0f0473df269bbf9b6a90f47e7b2bd33dc8f","modified":1535268513387},{"_id":"public/2018/06/14/前端静态资源缓存策略/index.html","hash":"93f9d09cb30f6d9959626edc047e122229bf2938","modified":1535268513388},{"_id":"public/2018/06/13/前端缓存/index.html","hash":"595edc49a9336978954e2fe5aca132f6144c32ad","modified":1535268513388},{"_id":"public/2018/06/11/linux下使用docker搭建sentry/index.html","hash":"d1d0e01222c3c1207e5a903ce775a585a2e7596b","modified":1535268513388},{"_id":"public/2018/06/05/前端异常监控/index.html","hash":"0058d078b8f04130bdc08d5c48693a512c10bb19","modified":1535268513388},{"_id":"public/2018/06/01/hexo注意事项/index.html","hash":"052f1fb70b602b61bac29875594f33b47d2d5d0a","modified":1535268513389},{"_id":"public/archives/index.html","hash":"b162e00ea5ef690e13f956e3618a39669b854a15","modified":1535268513389},{"_id":"public/archives/page/2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1535266694343},{"_id":"public/archives/2018/index.html","hash":"1dcaa0ed83c12bbee2f2bbe89d2b3a14eb82dd00","modified":1535268513389},{"_id":"public/archives/2018/page/2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1535266694343},{"_id":"public/archives/2018/06/index.html","hash":"dba9ffb29145f42c047d39748aaf0f75173d16f2","modified":1535268513387},{"_id":"public/archives/2018/07/index.html","hash":"e8103c2c6de7f381b152cb2c0ec478897edb78c1","modified":1535268513387},{"_id":"public/categories/前端工程/index.html","hash":"2a742dfb1f7acf8ac04a90ac67af297f8be45333","modified":1535268513387},{"_id":"public/categories/前端/index.html","hash":"a605bb79c0ecc75d042093c39aef08c1aa19a3bd","modified":1535268513388},{"_id":"public/index.html","hash":"df7998ab87d302e588621e1182038883e7b7ccd7","modified":1535268513389},{"_id":"public/tags/git/index.html","hash":"184273fee42c7a42cb90621e870ef0519a173d7a","modified":1535268513388},{"_id":"public/page/2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1535266694346},{"_id":"public/tags/javascript/index.html","hash":"310d134864fbc4350df9d6219d07e55e0fd7fed9","modified":1535268513388},{"_id":"public/tags/hexo/index.html","hash":"e9903e15c19e9e735a246fe5716ada8337f5530e","modified":1535268513388},{"_id":"public/tags/linux/index.html","hash":"1f1815632389e5fb82a123fe25c98e4d41493481","modified":1535268513388},{"_id":"public/tags/docker/index.html","hash":"efd055017796a0295a1ae755199c601377be2909","modified":1535268513388},{"_id":"public/tags/sentry/index.html","hash":"637793dee655bbf5b5e3f08e9275e51bbcc78e85","modified":1535268513388},{"_id":"public/tags/webpack/index.html","hash":"cd8775b3729819923d0eef3cdf4403bd8ccd9c72","modified":1535268513388},{"_id":"public/tags/缓存/index.html","hash":"9e95ebb184dafeb738515072dc92afed08d812a1","modified":1535268513388},{"_id":"public/tags/前端/index.html","hash":"fa5e484da6e48f1fc82293942cb15c493a8e3541","modified":1535268513388},{"_id":"public/tags/异常监控/index.html","hash":"ca92fde91e7f32008b3e4582297d224c91633464","modified":1535268513388},{"_id":"public/tags/http/index.html","hash":"05204c213747c9a44f2236c79685b50b21b0eeac","modified":1535268513388},{"_id":"public/tags/计算机网络/index.html","hash":"f5312a91940379c71632e8331cc1d023a3ef8899","modified":1535268513388},{"_id":"public/2018/06/13/前端缓存/1.PNG","hash":"2f3dfbea4976839f8941f85ec80ba69f3ccff37b","modified":1535268513402},{"_id":"public/2018/06/13/前端缓存/2.png","hash":"215c9c5c6418ccc91625f9d1738446940b972f53","modified":1535268513402},{"_id":"public/2018/06/13/前端缓存/3.png","hash":"b65c7c732bf1965a852c54c0372cef7264a065b3","modified":1535268513402},{"_id":"public/2018/06/13/前端缓存/4.png","hash":"cf0af203a01cbebf5850ad6f40cd3b3526b39eab","modified":1535268513402},{"_id":"public/2018/06/13/前端缓存/5.png","hash":"0fd34594118157391804a7e9f412b01b66df73f2","modified":1535268513402},{"_id":"public/2018/06/13/前端缓存/7.png","hash":"968636bdf68fa44a91bf275683e14238498ce56c","modified":1535268513402},{"_id":"public/2018/06/13/前端缓存/8.png","hash":"1da645cfe64015af1ca3cca35e7dfb90a5fd82ad","modified":1535268513402},{"_id":"public/2018/06/13/前端缓存/6.png","hash":"0d8cb8a4b075dcf315edea5f4924172ac9430b39","modified":1535268513402},{"_id":"public/2018/06/14/前端静态资源缓存策略/deploy.png","hash":"73b5784722c0866813de92778d90a9b6d24ebbb2","modified":1535268513402},{"_id":"public/2018/06/14/前端静态资源缓存策略/md5.png","hash":"d43b0efe63b73877343c6dd1ae00a3cbef05b754","modified":1535268513403},{"_id":"public/2018/06/11/linux下使用docker搭建sentry/11.png","hash":"79109b4a9d085bebd81a218ae259f69761a1437a","modified":1535268514061},{"_id":"public/2018/06/13/前端缓存/10.png","hash":"e9866b54d4768300b874e545b0d9a49ecfb64eec","modified":1535268514061},{"_id":"public/2018/06/13/前端缓存/9.png","hash":"1143ee3a2f14b583e88345c1ab81e7f79f66f045","modified":1535268514061},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1535267226742},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1535267226742},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1535267226743},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1535267226744},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1535267226744},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1535267226745},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1535267226745},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1535267226745},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1535267226745},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1535267226745},{"_id":"themes/next/README.cn.md","hash":"2c766b3369ed477bce134a5450dab45bef161504","modified":1535267226745},{"_id":"themes/next/README.md","hash":"8ce60ce578963eb4e1eb5e33e1efc2fc4779af9c","modified":1535267226746},{"_id":"themes/next/_config.yml","hash":"1744c0453f5e61e70507b3514f0e8d05865e65b3","modified":1535268204934},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1535267226747},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1535267226746},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1535267226768},{"_id":"themes/next/.git/config","hash":"bf7d1df65cf34d0f25a7184a58c37a09f72e4be7","modified":1535267226737},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1535267226735},{"_id":"themes/next/.git/index","hash":"80179c78efae9c84672622638402376138518c58","modified":1535267344808},{"_id":"themes/next/.git/packed-refs","hash":"8e36811256ee380c2c65692f1b8f8e77c5bc33c9","modified":1535267226733},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1535267226743},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"50d48c47162817a3810a9d9ad51104e83947419a","modified":1535267226743},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1535267226744},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1535267226744},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1535267215850},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1535267226747},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1535267226747},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1535267226747},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1535267226747},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1535267226747},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1535267226748},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1535267226748},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1535267226748},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1535267226748},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1535267226748},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1535267226748},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1535267226749},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1535267226749},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1535267226749},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1535267226749},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1535267226749},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1535267226750},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1535267226766},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1535267226767},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1535267226767},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1535267226767},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1535267226768},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1535267226768},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1535267226768},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1535267226769},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1535267226769},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1535267226863},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1535267226863},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1535267226863},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1535267226802},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1535267215851},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1535267215852},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1535267215853},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1535267215851},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1535267215851},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1535267215853},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1535267215852},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1535267215851},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1535267215852},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1535267215853},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1535267215850},{"_id":"themes/next/.git/logs/HEAD","hash":"43f7cf9daf9fef9ad0ac513d99cb15151574aa1b","modified":1535267226736},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1535267226750},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1535267226750},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1535267226750},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1535267226750},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1535267226751},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1535267226751},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1535267226751},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1535267226751},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1535267226752},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1535267226752},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1535267226752},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1535267226753},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1535267226753},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1535267226753},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1535267226753},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1535267226755},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1535267226755},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1535267226757},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1535267226763},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1535267226763},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1535267226763},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1535267226763},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1535267226764},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1535267226764},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1535267226764},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1535267226770},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1535267226770},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1535267226770},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1535267226771},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1535267226771},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1535267226771},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1535267226771},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1535267226772},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1535267226772},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1535267226802},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1535267226803},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1535267226803},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1535267226804},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1535267226804},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1535267226804},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1535267226805},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1535267226805},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1535267226805},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1535267226806},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1535267226806},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1535267226806},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1535267226807},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1535267226807},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1535267226808},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1535267226808},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1535267226808},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1535267226809},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1535267226810},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1535267226756},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1535267226756},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1535267226793},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1535267226793},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1535267226794},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1535267226801},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1535267226802},{"_id":"themes/next/.git/refs/heads/master","hash":"7999da428ebb87e5a2b27315d8d5123c1ccdfaa5","modified":1535267226735},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1535267226752},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1535267226753},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1535267226754},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1535267226754},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1535267226754},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1535267226755},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1535267226754},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1535267226755},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1535267226755},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1535267226756},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1535267226756},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1535267226757},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1535267226757},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1535267226758},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1535267226758},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1535267226757},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1535267226758},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1535267226759},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1535267226758},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1535267226759},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1535267226759},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1535267226759},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1535267226759},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1535267226760},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1535267226760},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1535267226760},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1535267226760},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1535267226761},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1535267226761},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1535267226761},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1535267226761},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1535267226762},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1535267226762},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1535267226762},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1535267226765},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1535267226766},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1535267226766},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1535267226766},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1535267226791},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1535267226792},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1535267226793},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1535267226793},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1535267226801},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1535267226801},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1535267226802},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1535267226802},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1535267226810},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1535267226810},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1535267226811},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1535267226811},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1535267226811},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1535267226811},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1535267226812},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1535267226812},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1535267226812},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1535267226813},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1535267226813},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1535267226818},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1535267226821},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1535267226822},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1535267226822},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1535267226822},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1535267226828},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1535267226828},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1535267226828},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1535267226828},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1535267226830},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1535267226830},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1535267226830},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1535267226830},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1535267226831},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1535267226844},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1535267226846},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1535267226846},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1535267226846},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1535267226846},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1535267226847},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1535267226847},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1535267226848},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1535267226848},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1535267226848},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1535267226849},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1535267226849},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1535267226849},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1535267226850},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1535267226850},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1535267226850},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1535267226850},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1535267226851},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1535267226851},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1535267226851},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1535267226851},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1535267226852},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1535267226852},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1535267226852},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1535267226853},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1535267226853},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1535267226854},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1535267226859},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1535267226859},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1535267226862},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1535267226862},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1535267226862},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1535267226845},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"43f7cf9daf9fef9ad0ac513d99cb15151574aa1b","modified":1535267226736},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1535267226734},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1535267226765},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1535267226765},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1535267226788},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1535267226772},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1535267226773},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1535267226773},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1535267226773},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1535267226773},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1535267226776},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1535267226782},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1535267226788},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1535267226789},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1535267226789},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1535267226790},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1535267226790},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1535267226791},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1535267226794},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1535267226794},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1535267226795},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1535267226795},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1535267226795},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1535267226796},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1535267226796},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1535267226797},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1535267226798},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1535267226798},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1535267226798},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1535267226798},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1535267226798},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1535267226799},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1535267226799},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1535267226800},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1535267226800},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1535267226800},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1535267226801},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1535267226812},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1535267226816},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1535267226817},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1535267226817},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1535267226823},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1535267226823},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1535267226824},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1535267226824},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1535267226824},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1535267226824},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1535267226826},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1535267226827},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1535267226827},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1535267226829},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1535267226829},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1535267226831},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1535267226831},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1535267226832},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1535267226858},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1535267226859},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1535267226816},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1535267226843},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1535267226844},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1535267226861},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"43f7cf9daf9fef9ad0ac513d99cb15151574aa1b","modified":1535267226734},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1535267226774},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1535267226774},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1535267226774},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1535267226774},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1535267226774},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1535267226774},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1535267226775},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1535267226775},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1535267226775},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1535267226775},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1535267226775},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1535267226776},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1535267226776},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1535267226776},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1535267226780},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1535267226780},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1535267226781},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1535267226781},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1535267226781},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1535267226781},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1535267226781},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1535267226782},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1535267226782},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1535267226782},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1535267226776},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1535267226777},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1535267226777},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1535267226777},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1535267226778},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1535267226778},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1535267226778},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1535267226778},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1535267226778},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1535267226779},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1535267226779},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1535267226779},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1535267226779},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1535267226780},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1535267226780},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1535267226783},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1535267226783},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1535267226783},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1535267226783},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1535267226783},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1535267226784},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1535267226784},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1535267226784},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1535267226784},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1535267226784},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1535267226784},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1535267226785},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1535267226785},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1535267226785},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1535267226786},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1535267226786},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1535267226786},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1535267226787},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1535267226787},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1535267226797},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1535267226797},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1535267226799},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1535267226814},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1535267226814},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1535267226814},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1535267226815},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1535267226815},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1535267226825},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1535267226825},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1535267226825},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1535267226825},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1535267226826},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1535267226826},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1535267226834},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1535267226836},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1535267226842},{"_id":"themes/next/.git/objects/pack/pack-c612b977fdee8f070a000761134eeb6350850a38.idx","hash":"baccc333989b5a1b1719965c6c3a9891cce61ff6","modified":1535267226718},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1535267226821},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1535267226858},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1535267226840},{"_id":"themes/next/.git/objects/pack/pack-c612b977fdee8f070a000761134eeb6350850a38.pack","hash":"1310fd9358c94811f585a7fa3724d7431f130898","modified":1535267226714},{"_id":"source/_drafts/实用工具.md","hash":"26877c4a25307fee843252e7519e5fbfc8e6a6a9","modified":1535268463371},{"_id":"source/images/avatar.png","hash":"0b23ebb92ec3cdb95c993a53ed9a277fc3476830","modified":1535267714088},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1535268513400},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1535268513400},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1535268513400},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1535268513400},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1535268513400},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1535268513401},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1535268513401},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1535268513401},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1535268513401},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1535268513401},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1535268513401},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1535268513401},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1535268513401},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1535268513401},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1535268513401},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1535268513401},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1535268513401},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1535268513401},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1535268513401},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1535268513401},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1535268513401},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1535268513401},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1535268513401},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1535268513401},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1535268513401},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1535268513402},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1535268513402},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1535268513402},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1535268513402},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1535268513402},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1535268513402},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1535268513402},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1535268513402},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1535268514028},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1535268514054},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1535268514070},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1535268514070},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1535268514070},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1535268514070},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1535268514070},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1535268514070},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1535268514070},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1535268514071},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1535268514071},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1535268514071},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1535268514071},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1535268514071},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1535268514071},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1535268514071},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1535268514071},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1535268514071},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1535268514071},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1535268514071},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1535268514071},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1535268514071},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1535268514071},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1535268514071},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1535268514071},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1535268514071},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1535268514071},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1535268514072},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1535268514072},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1535268514072},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1535268514072},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1535268514072},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1535268514072},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1535268514072},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1535268514072},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1535268514072},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1535268514072},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1535268514072},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1535268514072},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1535268514072},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1535268514072},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1535268514072},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1535268514072},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1535268514072},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1535268514072},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1535268514072},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1535268514072},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1535268514072},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1535268514072},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1535268514073},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1535268514073},{"_id":"public/css/main.css","hash":"eb1db49d5a3ced9db1b46168bb425c1a4e0469f5","modified":1535268514073},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1535268514073},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1535268514073},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1535268514073},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1535268514073},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1535268514074},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1535268514075},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1535268514075},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1535268514075},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1535268514075},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1535268514075},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1535268514075},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1535268514075},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1535268514075},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1535268514075},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1535268514076},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1535268514076},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1535268514076},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1535268514076},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1535268514076},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1535268514076},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1535268514076},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1535268514077},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1535268514077},{"_id":"public/images/avatar.png","hash":"0b23ebb92ec3cdb95c993a53ed9a277fc3476830","modified":1535268514077},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1535268514090}],"Category":[{"name":"前端工程","_id":"cjkwmni5600093pu7hqgj8wej"},{"name":"前端","_id":"cjkwmni5l000l3pu7km83xqex"}],"Data":[],"Page":[{"title":"categories","date":"2018-06-14T02:31:52.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-06-14 10:31:52\ntype: \"categories\"\n---\n","updated":"2018-07-29T12:11:11.677Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjkwmni62001f3pu7crx7qtb5","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"All tags","date":"2018-06-14T02:29:47.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: All tags\ndate: 2018-06-14 10:29:47\ntype: \"tags\"\n---\n","updated":"2018-07-29T12:11:11.677Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjkwmni64001h3pu76p2bp2zj","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"git实用命令","date":"2018-07-06T11:23:00.000Z","_content":"\n回退命令：\n\n```bash\n$ git reset --hard HEAD^         回退到上个版本\n$ git reset --hard HEAD~3        回退到前3次提交之前，以此类推，回退到n次提交之前\n$ git reset --hard commit_id     退到/进到 指定commit的sha码\n```\n强推到远程：\n```bash\n$ git push origin HEAD --force\n```","source":"_posts/git实用命令.md","raw":"---\ntitle: git实用命令\ndate: 2018-07-06 19:23:00\ntags: [git]\n---\n\n回退命令：\n\n```bash\n$ git reset --hard HEAD^         回退到上个版本\n$ git reset --hard HEAD~3        回退到前3次提交之前，以此类推，回退到n次提交之前\n$ git reset --hard commit_id     退到/进到 指定commit的sha码\n```\n强推到远程：\n```bash\n$ git push origin HEAD --force\n```","slug":"git实用命令","published":1,"updated":"2018-07-29T12:11:11.669Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkwmni4h00003pu785d364iv","content":"<p>回退命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reset --hard HEAD^         回退到上个版本</span><br><span class=\"line\">$ git reset --hard HEAD~3        回退到前3次提交之前，以此类推，回退到n次提交之前</span><br><span class=\"line\">$ git reset --hard commit_id     退到/进到 指定commit的sha码</span><br></pre></td></tr></table></figure>\n<p>强推到远程：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin HEAD --force</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>回退命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reset --hard HEAD^         回退到上个版本</span><br><span class=\"line\">$ git reset --hard HEAD~3        回退到前3次提交之前，以此类推，回退到n次提交之前</span><br><span class=\"line\">$ git reset --hard commit_id     退到/进到 指定commit的sha码</span><br></pre></td></tr></table></figure>\n<p>强推到远程：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin HEAD --force</span><br></pre></td></tr></table></figure></p>\n"},{"title":"防抖与节流","date":"2018-07-11T11:23:00.000Z","_content":"","source":"_drafts/防抖与节流.md","raw":"---\ntitle: 防抖与节流\ndate: 2018-07-11 19:23:00\ntags: [javascript]\n---","slug":"防抖与节流","published":0,"updated":"2018-07-29T12:11:11.669Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkwmni4o00013pu7rn6vh2u8","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"hexo注意事项","date":"2018-06-01T02:31:52.000Z","_content":"\n### 图片问题\n\n修改`_config.yml`配置文件`post_asset_folder`项为`true`。\n创建博客命令\n```bash\nhexo new \"这是一个新的博客\"\n```\n使用完命令之后，在source/_post文件夹里面就会出现一个“这是一个新的博客.md”的文件和一个“这是一个新的博客”的文件夹。\n下一步就是把需要的图片放到新创建的那个文件夹里面去。\n**引用图片的方法**\n```\n{% asset_img 这是一个新的博客的图片.jpg 这是一个新的博客的图片的说明 %}\n```\n> hexo3以上使用\n\n### 头像更换\n更换主题下的source/images/avatar.gif\n\n### 段落缩进\n```bash\n半方大的空白&ensp;或&#8194;\n全方大的空白&emsp;或&#8195;\n不断行的空白格&nbsp;或&#160;\n```\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hexo注意事项.md","raw":"---\ntitle: hexo注意事项\ndate: 2018-06-01 10:31:52\ntag: hexo\n---\n\n### 图片问题\n\n修改`_config.yml`配置文件`post_asset_folder`项为`true`。\n创建博客命令\n```bash\nhexo new \"这是一个新的博客\"\n```\n使用完命令之后，在source/_post文件夹里面就会出现一个“这是一个新的博客.md”的文件和一个“这是一个新的博客”的文件夹。\n下一步就是把需要的图片放到新创建的那个文件夹里面去。\n**引用图片的方法**\n```\n{% asset_img 这是一个新的博客的图片.jpg 这是一个新的博客的图片的说明 %}\n```\n> hexo3以上使用\n\n### 头像更换\n更换主题下的source/images/avatar.gif\n\n### 段落缩进\n```bash\n半方大的空白&ensp;或&#8194;\n全方大的空白&emsp;或&#8195;\n不断行的空白格&nbsp;或&#160;\n```\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hexo注意事项","published":1,"updated":"2018-07-29T12:11:11.669Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkwmni4v00033pu7renvd3g5","content":"<h3 id=\"图片问题\"><a href=\"#图片问题\" class=\"headerlink\" title=\"图片问题\"></a>图片问题</h3><p>修改<code>_config.yml</code>配置文件<code>post_asset_folder</code>项为<code>true</code>。<br>创建博客命令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new <span class=\"string\">\"这是一个新的博客\"</span></span><br></pre></td></tr></table></figure></p>\n<p>使用完命令之后，在source/_post文件夹里面就会出现一个“这是一个新的博客.md”的文件和一个“这是一个新的博客”的文件夹。<br>下一步就是把需要的图片放到新创建的那个文件夹里面去。<br><strong>引用图片的方法</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% asset_img 这是一个新的博客的图片.jpg 这是一个新的博客的图片的说明 %&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>hexo3以上使用</p>\n</blockquote>\n<h3 id=\"头像更换\"><a href=\"#头像更换\" class=\"headerlink\" title=\"头像更换\"></a>头像更换</h3><p>更换主题下的source/images/avatar.gif</p>\n<h3 id=\"段落缩进\"><a href=\"#段落缩进\" class=\"headerlink\" title=\"段落缩进\"></a>段落缩进</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">半方大的空白&amp;ensp;或&amp;<span class=\"comment\">#8194;</span></span><br><span class=\"line\">全方大的空白&amp;emsp;或&amp;<span class=\"comment\">#8195;</span></span><br><span class=\"line\">不断行的空白格&amp;nbsp;或&amp;<span class=\"comment\">#160;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"图片问题\"><a href=\"#图片问题\" class=\"headerlink\" title=\"图片问题\"></a>图片问题</h3><p>修改<code>_config.yml</code>配置文件<code>post_asset_folder</code>项为<code>true</code>。<br>创建博客命令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new <span class=\"string\">\"这是一个新的博客\"</span></span><br></pre></td></tr></table></figure></p>\n<p>使用完命令之后，在source/_post文件夹里面就会出现一个“这是一个新的博客.md”的文件和一个“这是一个新的博客”的文件夹。<br>下一步就是把需要的图片放到新创建的那个文件夹里面去。<br><strong>引用图片的方法</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% asset_img 这是一个新的博客的图片.jpg 这是一个新的博客的图片的说明 %&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>hexo3以上使用</p>\n</blockquote>\n<h3 id=\"头像更换\"><a href=\"#头像更换\" class=\"headerlink\" title=\"头像更换\"></a>头像更换</h3><p>更换主题下的source/images/avatar.gif</p>\n<h3 id=\"段落缩进\"><a href=\"#段落缩进\" class=\"headerlink\" title=\"段落缩进\"></a>段落缩进</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">半方大的空白&amp;ensp;或&amp;<span class=\"comment\">#8194;</span></span><br><span class=\"line\">全方大的空白&amp;emsp;或&amp;<span class=\"comment\">#8195;</span></span><br><span class=\"line\">不断行的空白格&amp;nbsp;或&amp;<span class=\"comment\">#160;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"linux下使用docker搭建sentry","date":"2018-06-11T11:31:52.000Z","_content":"\n# 准备工作\n## 安装docker\n可以通过apt-get或者wget安装\n```bash\n$ wget -qO- https://get.docker.com/ | sh\n```\n通过docker --version可以查看版本号并确认是否安装成功。\n## 安装docker-compose\nCompose是用于定义和运行复杂Docker应用的工具。你可以在一个文件中定义一个多容器的应用，然后使用一条命令来启动你的应用，然后所有相关的操作都会被自动完成。\n通过curl从github上获取最新的版本，**这个命令需要使用sudo -i切换到root用户**。\n```bash\ncurl -L https://github.com/docker/compose/releases/download/1.9.0/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose\nchmod +x /usr/local/bin/docker-compose\n```\n执行完成后通过`exit`退出root用户。\n可以通过`docker-compose --version`查看版本号并确定是否安装成功。\n\n# 正式搭建sentry\n## 获取sentry\n从github上可以获取最新的sentry。\n```bash\ngit clone https://github.com/getsentry/onpremise.git\n```\n## 搭建sentry\n第一步: 制作我们的本地数据库和sentry配置目录。\n```bash\nmkdir  -p data/{sentry,postgres}\n```\n第二步: 生成一个密钥。将其作为SENTRY_SECRET_KEY添加到dock中的docker-compose.yml中。\n```bash\ndocker-compose run --rm web config generate-secret-key\n```\n第三步：建立数据库。使用交互式提示创建用户帐户。\n```bash\ndocker-compose run --rm web upgrade\n```\n第四步：启动所有服务\n```bash\ndocker-compose up -d\n```\n至此，就可以访问本机的9000端口，使用之前填写的邮箱和口令进入sentry平台了。\n{% asset_img 11.png  sentry效果图 %}\n\n# 邮箱配置\n修改 sentry.config.py文件的配置\n\n```bash\n#email = env('SENTRY_EMAIL_HOST') or (env('SMTP_PORT_25_TCP_ADDR') and 'smtp')\n#if email:\n#    SENTRY_OPTIONS['mail.backend'] = 'smtp'\n#    SENTRY_OPTIONS['mail.host'] = email\n#    SENTRY_OPTIONS['mail.password'] = env('SENTRY_EMAIL_PASSWORD') or ''\n#    SENTRY_OPTIONS['mail.username'] = env('SENTRY_EMAIL_USER') or ''\n#    SENTRY_OPTIONS['mail.port'] = int(env('SENTRY_EMAIL_PORT') or 25)\n#    SENTRY_OPTIONS['mail.use-tls'] = env('SENTRY_EMAIL_USE_TLS', False)\n\nSENTRY_OPTIONS['mail.backend'] = 'smtp'\nSENTRY_OPTIONS['mail.host'] = 'smtp.qq.com'\nSENTRY_OPTIONS['mail.password'] = '*******'\nSENTRY_OPTIONS['mail.username'] = 'sentry@**.com'\nSENTRY_OPTIONS['mail.port'] = 587\nSENTRY_OPTIONS['mail.use-tls'] = True\n```\n然后重新启动服务\n```bash\ndocker-compose down（关闭删除容器）\ndocker-compose build （重新编译镜像）\nmake build （拷贝配置文件，可以不需要）\ndocker-compose up -d  （运行）\n```\n\n# 参考\n[linux和mac下搭建前端监控系统(基于sentry)](https://blog.csdn.net/itkingone/article/details/79005959)","source":"_posts/linux下使用docker搭建sentry.md","raw":"---\ntitle: linux下使用docker搭建sentry\ndate: 2018-06-11 19:31:52\ntags: [linux, docker, sentry]\n---\n\n# 准备工作\n## 安装docker\n可以通过apt-get或者wget安装\n```bash\n$ wget -qO- https://get.docker.com/ | sh\n```\n通过docker --version可以查看版本号并确认是否安装成功。\n## 安装docker-compose\nCompose是用于定义和运行复杂Docker应用的工具。你可以在一个文件中定义一个多容器的应用，然后使用一条命令来启动你的应用，然后所有相关的操作都会被自动完成。\n通过curl从github上获取最新的版本，**这个命令需要使用sudo -i切换到root用户**。\n```bash\ncurl -L https://github.com/docker/compose/releases/download/1.9.0/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose\nchmod +x /usr/local/bin/docker-compose\n```\n执行完成后通过`exit`退出root用户。\n可以通过`docker-compose --version`查看版本号并确定是否安装成功。\n\n# 正式搭建sentry\n## 获取sentry\n从github上可以获取最新的sentry。\n```bash\ngit clone https://github.com/getsentry/onpremise.git\n```\n## 搭建sentry\n第一步: 制作我们的本地数据库和sentry配置目录。\n```bash\nmkdir  -p data/{sentry,postgres}\n```\n第二步: 生成一个密钥。将其作为SENTRY_SECRET_KEY添加到dock中的docker-compose.yml中。\n```bash\ndocker-compose run --rm web config generate-secret-key\n```\n第三步：建立数据库。使用交互式提示创建用户帐户。\n```bash\ndocker-compose run --rm web upgrade\n```\n第四步：启动所有服务\n```bash\ndocker-compose up -d\n```\n至此，就可以访问本机的9000端口，使用之前填写的邮箱和口令进入sentry平台了。\n{% asset_img 11.png  sentry效果图 %}\n\n# 邮箱配置\n修改 sentry.config.py文件的配置\n\n```bash\n#email = env('SENTRY_EMAIL_HOST') or (env('SMTP_PORT_25_TCP_ADDR') and 'smtp')\n#if email:\n#    SENTRY_OPTIONS['mail.backend'] = 'smtp'\n#    SENTRY_OPTIONS['mail.host'] = email\n#    SENTRY_OPTIONS['mail.password'] = env('SENTRY_EMAIL_PASSWORD') or ''\n#    SENTRY_OPTIONS['mail.username'] = env('SENTRY_EMAIL_USER') or ''\n#    SENTRY_OPTIONS['mail.port'] = int(env('SENTRY_EMAIL_PORT') or 25)\n#    SENTRY_OPTIONS['mail.use-tls'] = env('SENTRY_EMAIL_USE_TLS', False)\n\nSENTRY_OPTIONS['mail.backend'] = 'smtp'\nSENTRY_OPTIONS['mail.host'] = 'smtp.qq.com'\nSENTRY_OPTIONS['mail.password'] = '*******'\nSENTRY_OPTIONS['mail.username'] = 'sentry@**.com'\nSENTRY_OPTIONS['mail.port'] = 587\nSENTRY_OPTIONS['mail.use-tls'] = True\n```\n然后重新启动服务\n```bash\ndocker-compose down（关闭删除容器）\ndocker-compose build （重新编译镜像）\nmake build （拷贝配置文件，可以不需要）\ndocker-compose up -d  （运行）\n```\n\n# 参考\n[linux和mac下搭建前端监控系统(基于sentry)](https://blog.csdn.net/itkingone/article/details/79005959)","slug":"linux下使用docker搭建sentry","published":1,"updated":"2018-07-29T12:11:11.669Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkwmni4y00043pu7p2c503mq","content":"<h1 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h1><h2 id=\"安装docker\"><a href=\"#安装docker\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h2><p>可以通过apt-get或者wget安装<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget -qO- https://get.docker.com/ | sh</span><br></pre></td></tr></table></figure></p>\n<p>通过docker –version可以查看版本号并确认是否安装成功。</p>\n<h2 id=\"安装docker-compose\"><a href=\"#安装docker-compose\" class=\"headerlink\" title=\"安装docker-compose\"></a>安装docker-compose</h2><p>Compose是用于定义和运行复杂Docker应用的工具。你可以在一个文件中定义一个多容器的应用，然后使用一条命令来启动你的应用，然后所有相关的操作都会被自动完成。<br>通过curl从github上获取最新的版本，<strong>这个命令需要使用sudo -i切换到root用户</strong>。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -L https://github.com/docker/compose/releases/download/1.9.0/docker-compose-`uname -s`-`uname -m` &gt; /usr/<span class=\"built_in\">local</span>/bin/docker-compose</span><br><span class=\"line\">chmod +x /usr/<span class=\"built_in\">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure></p>\n<p>执行完成后通过<code>exit</code>退出root用户。<br>可以通过<code>docker-compose --version</code>查看版本号并确定是否安装成功。</p>\n<h1 id=\"正式搭建sentry\"><a href=\"#正式搭建sentry\" class=\"headerlink\" title=\"正式搭建sentry\"></a>正式搭建sentry</h1><h2 id=\"获取sentry\"><a href=\"#获取sentry\" class=\"headerlink\" title=\"获取sentry\"></a>获取sentry</h2><p>从github上可以获取最新的sentry。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/getsentry/onpremise.git</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"搭建sentry\"><a href=\"#搭建sentry\" class=\"headerlink\" title=\"搭建sentry\"></a>搭建sentry</h2><p>第一步: 制作我们的本地数据库和sentry配置目录。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir  -p data/&#123;sentry,postgres&#125;</span><br></pre></td></tr></table></figure></p>\n<p>第二步: 生成一个密钥。将其作为SENTRY_SECRET_KEY添加到dock中的docker-compose.yml中。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose run --rm web config generate-secret-key</span><br></pre></td></tr></table></figure></p>\n<p>第三步：建立数据库。使用交互式提示创建用户帐户。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose run --rm web upgrade</span><br></pre></td></tr></table></figure></p>\n<p>第四步：启动所有服务<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure></p>\n<p>至此，就可以访问本机的9000端口，使用之前填写的邮箱和口令进入sentry平台了。<br><img src=\"/2018/06/11/linux下使用docker搭建sentry/11.png\" title=\"sentry效果图\"></p>\n<h1 id=\"邮箱配置\"><a href=\"#邮箱配置\" class=\"headerlink\" title=\"邮箱配置\"></a>邮箱配置</h1><p>修改 sentry.config.py文件的配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#email = env('SENTRY_EMAIL_HOST') or (env('SMTP_PORT_25_TCP_ADDR') and 'smtp')</span></span><br><span class=\"line\"><span class=\"comment\">#if email:</span></span><br><span class=\"line\"><span class=\"comment\">#    SENTRY_OPTIONS['mail.backend'] = 'smtp'</span></span><br><span class=\"line\"><span class=\"comment\">#    SENTRY_OPTIONS['mail.host'] = email</span></span><br><span class=\"line\"><span class=\"comment\">#    SENTRY_OPTIONS['mail.password'] = env('SENTRY_EMAIL_PASSWORD') or ''</span></span><br><span class=\"line\"><span class=\"comment\">#    SENTRY_OPTIONS['mail.username'] = env('SENTRY_EMAIL_USER') or ''</span></span><br><span class=\"line\"><span class=\"comment\">#    SENTRY_OPTIONS['mail.port'] = int(env('SENTRY_EMAIL_PORT') or 25)</span></span><br><span class=\"line\"><span class=\"comment\">#    SENTRY_OPTIONS['mail.use-tls'] = env('SENTRY_EMAIL_USE_TLS', False)</span></span><br><span class=\"line\"></span><br><span class=\"line\">SENTRY_OPTIONS[<span class=\"string\">'mail.backend'</span>] = <span class=\"string\">'smtp'</span></span><br><span class=\"line\">SENTRY_OPTIONS[<span class=\"string\">'mail.host'</span>] = <span class=\"string\">'smtp.qq.com'</span></span><br><span class=\"line\">SENTRY_OPTIONS[<span class=\"string\">'mail.password'</span>] = <span class=\"string\">'*******'</span></span><br><span class=\"line\">SENTRY_OPTIONS[<span class=\"string\">'mail.username'</span>] = <span class=\"string\">'sentry@**.com'</span></span><br><span class=\"line\">SENTRY_OPTIONS[<span class=\"string\">'mail.port'</span>] = 587</span><br><span class=\"line\">SENTRY_OPTIONS[<span class=\"string\">'mail.use-tls'</span>] = True</span><br></pre></td></tr></table></figure>\n<p>然后重新启动服务<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose down（关闭删除容器）</span><br><span class=\"line\">docker-compose build （重新编译镜像）</span><br><span class=\"line\">make build （拷贝配置文件，可以不需要）</span><br><span class=\"line\">docker-compose up -d  （运行）</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://blog.csdn.net/itkingone/article/details/79005959\" target=\"_blank\" rel=\"noopener\">linux和mac下搭建前端监控系统(基于sentry)</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h1><h2 id=\"安装docker\"><a href=\"#安装docker\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h2><p>可以通过apt-get或者wget安装<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget -qO- https://get.docker.com/ | sh</span><br></pre></td></tr></table></figure></p>\n<p>通过docker –version可以查看版本号并确认是否安装成功。</p>\n<h2 id=\"安装docker-compose\"><a href=\"#安装docker-compose\" class=\"headerlink\" title=\"安装docker-compose\"></a>安装docker-compose</h2><p>Compose是用于定义和运行复杂Docker应用的工具。你可以在一个文件中定义一个多容器的应用，然后使用一条命令来启动你的应用，然后所有相关的操作都会被自动完成。<br>通过curl从github上获取最新的版本，<strong>这个命令需要使用sudo -i切换到root用户</strong>。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -L https://github.com/docker/compose/releases/download/1.9.0/docker-compose-`uname -s`-`uname -m` &gt; /usr/<span class=\"built_in\">local</span>/bin/docker-compose</span><br><span class=\"line\">chmod +x /usr/<span class=\"built_in\">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure></p>\n<p>执行完成后通过<code>exit</code>退出root用户。<br>可以通过<code>docker-compose --version</code>查看版本号并确定是否安装成功。</p>\n<h1 id=\"正式搭建sentry\"><a href=\"#正式搭建sentry\" class=\"headerlink\" title=\"正式搭建sentry\"></a>正式搭建sentry</h1><h2 id=\"获取sentry\"><a href=\"#获取sentry\" class=\"headerlink\" title=\"获取sentry\"></a>获取sentry</h2><p>从github上可以获取最新的sentry。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/getsentry/onpremise.git</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"搭建sentry\"><a href=\"#搭建sentry\" class=\"headerlink\" title=\"搭建sentry\"></a>搭建sentry</h2><p>第一步: 制作我们的本地数据库和sentry配置目录。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir  -p data/&#123;sentry,postgres&#125;</span><br></pre></td></tr></table></figure></p>\n<p>第二步: 生成一个密钥。将其作为SENTRY_SECRET_KEY添加到dock中的docker-compose.yml中。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose run --rm web config generate-secret-key</span><br></pre></td></tr></table></figure></p>\n<p>第三步：建立数据库。使用交互式提示创建用户帐户。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose run --rm web upgrade</span><br></pre></td></tr></table></figure></p>\n<p>第四步：启动所有服务<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure></p>\n<p>至此，就可以访问本机的9000端口，使用之前填写的邮箱和口令进入sentry平台了。<br><img src=\"/2018/06/11/linux下使用docker搭建sentry/11.png\" title=\"sentry效果图\"></p>\n<h1 id=\"邮箱配置\"><a href=\"#邮箱配置\" class=\"headerlink\" title=\"邮箱配置\"></a>邮箱配置</h1><p>修改 sentry.config.py文件的配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#email = env('SENTRY_EMAIL_HOST') or (env('SMTP_PORT_25_TCP_ADDR') and 'smtp')</span></span><br><span class=\"line\"><span class=\"comment\">#if email:</span></span><br><span class=\"line\"><span class=\"comment\">#    SENTRY_OPTIONS['mail.backend'] = 'smtp'</span></span><br><span class=\"line\"><span class=\"comment\">#    SENTRY_OPTIONS['mail.host'] = email</span></span><br><span class=\"line\"><span class=\"comment\">#    SENTRY_OPTIONS['mail.password'] = env('SENTRY_EMAIL_PASSWORD') or ''</span></span><br><span class=\"line\"><span class=\"comment\">#    SENTRY_OPTIONS['mail.username'] = env('SENTRY_EMAIL_USER') or ''</span></span><br><span class=\"line\"><span class=\"comment\">#    SENTRY_OPTIONS['mail.port'] = int(env('SENTRY_EMAIL_PORT') or 25)</span></span><br><span class=\"line\"><span class=\"comment\">#    SENTRY_OPTIONS['mail.use-tls'] = env('SENTRY_EMAIL_USE_TLS', False)</span></span><br><span class=\"line\"></span><br><span class=\"line\">SENTRY_OPTIONS[<span class=\"string\">'mail.backend'</span>] = <span class=\"string\">'smtp'</span></span><br><span class=\"line\">SENTRY_OPTIONS[<span class=\"string\">'mail.host'</span>] = <span class=\"string\">'smtp.qq.com'</span></span><br><span class=\"line\">SENTRY_OPTIONS[<span class=\"string\">'mail.password'</span>] = <span class=\"string\">'*******'</span></span><br><span class=\"line\">SENTRY_OPTIONS[<span class=\"string\">'mail.username'</span>] = <span class=\"string\">'sentry@**.com'</span></span><br><span class=\"line\">SENTRY_OPTIONS[<span class=\"string\">'mail.port'</span>] = 587</span><br><span class=\"line\">SENTRY_OPTIONS[<span class=\"string\">'mail.use-tls'</span>] = True</span><br></pre></td></tr></table></figure>\n<p>然后重新启动服务<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose down（关闭删除容器）</span><br><span class=\"line\">docker-compose build （重新编译镜像）</span><br><span class=\"line\">make build （拷贝配置文件，可以不需要）</span><br><span class=\"line\">docker-compose up -d  （运行）</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://blog.csdn.net/itkingone/article/details/79005959\" target=\"_blank\" rel=\"noopener\">linux和mac下搭建前端监控系统(基于sentry)</a></p>\n"},{"title":"webpack代码分离的三种常用方法","date":"2018-07-06T11:23:00.000Z","_content":"\n\n> 代码分离是 webpack 中最引人注目的特性之一。此特性能够把代码分离到不同的 bundle 中，然后可以按需加载或并行加载这些文件。代码分离可以用于获取更小的 bundle，以及控制资源加载优先级，如果使用合理，会极大影响加载时间。\n\n有三种常用的代码分离方法：\n\n- **入口起点**：使用 entry 配置手动地分离代码。\n- **防止重复**：使用 CommonsChunkPlugin 去重和分离 chunk。\n- **动态导入**：通过模块的内联函数调用来分离代码。\n\n\n# 入口起点\n这是迄今为止最简单、最直观的分离代码的方式。不过，这种方式手动配置较多，并有一些陷阱，我们将会解决这些问题。先来看看如何从 main bundle 中分离另一个模块：\n\n```js\n\n// ./src/index.js\nimport _ from 'lodash';\n\nconsole.log(\n  _.join(['index', 'module', 'loaded!'], ' ')\n);\n\n// ./src/page.js\nimport _ from 'lodash';\n\nconsole.log(\n  _.join(['Another', 'module', 'loaded!'], ' ')\n);\n\n// webpack.config.js\nconst path = require('path');\n\nmodule.exports = {\n  entry: {\n    index: './src/index.js',\n    another: './src/page.js'\n  },\n  output: {\n    filename: '[name].bundle.js',\n    path: path.resolve(__dirname, 'dist')\n  }\n};\n```\n\n\n这将生成如下构建结果：\n```js\nHash: 36042176e77df9eaa36e\nVersion: webpack 4.15.1\nTime: 2944ms\nBuilt at: 2018-07-10 11:09:19\n            Asset      Size  Chunks             Chunk Names\nanother.bundle.js  70.4 KiB       0  [emitted]  another\n  index.bundle.js  70.4 KiB       1  [emitted]  index\n[1] (webpack)/buildin/module.js 497 bytes {0} {1} [built]\n[2] (webpack)/buildin/global.js 489 bytes {0} {1} [built]\n[3] ./src/page.js 92 bytes {0} [built]\n[4] ./src/index.js 90 bytes {1} [built]\n    + 1 hidden module\n```\n正如前面提到的，这种方法存在一些问题:\n- 如果入口 chunks 之间包含重复的模块，那些重复模块都会被引入到各个 bundle 中。\n- 这种方法不够灵活，并且不能将核心应用程序逻辑进行动态拆分代码。\n\n以上两点中，第一点对我们的示例来说无疑是个问题，因为之前我们在 `./src/index.js` 中也引入过 lodash，这样就在两个 bundle 中造成重复引用。接着，我们通过使用 CommonsChunkPlugin 来移除重复的模块。\n\n# 防止重复(CommonsChunkPlugin)\n[CommonsChunkPlugin](https://webpack.docschina.org/plugins/commons-chunk-plugin) 插件可以将公共的依赖模块提取到已有的入口 chunk 中，或者提取到一个新生成的 chunk。让我们使用这个插件，将之前的示例中重复的 lodash 模块去除：\n\n```js\nconst path = require('path');\nconst webpack = require('webpack');\n\nmodule.exports = {\n    entry: {\n      index: './src/index.js',\n      another: './src/page.js'\n    },\n    plugins: [\n      new webpack.optimize.CommonsChunkPlugin({\n        name: 'common' // 指定公共 bundle 的名称。\n      })\n    ],\n    output: {\n      filename: '[name].bundle.js',\n      path: path.resolve(__dirname, 'dist')\n    }\n};\n```\n\n```js\nHash: 39c6f28cf331e187e2ee\nVersion: webpack 3.12.0\nTime: 353ms\n            Asset       Size  Chunks                    Chunk Names\nanother.bundle.js  541 bytes       0  [emitted]         another\n  index.bundle.js  545 bytes       1  [emitted]         index\n common.bundle.js     545 kB       2  [emitted]  [big]  common\n   [1] ./src/index.js 90 bytes {1} [built]\n   [2] (webpack)/buildin/global.js 509 bytes {2} [built]\n   [3] (webpack)/buildin/module.js 517 bytes {2} [built]\n   [4] ./src/page.js 92 bytes {0} [built]\n    + 1 hidden module\n```\n# 动态导入(dynamic imports)\n\n当涉及到动态代码拆分时，`webpack` 提供了两个类似的技术。对于动态导入，第一种，也是优先选择的方式是，使用符合 [ECMAScript](https://github.com/tc39/proposal-dynamic-import) 提案 的 [import()](https://webpack.docschina.org/api/module-methods#import-) 语法。第二种，则是使用 webpack 特定的 [require.ensure](https://webpack.docschina.org/api/module-methods#require-ensure)。让我们先尝试使用第一种……\n\n```js\n// src/index.js\nfunction getComponent() {\n    return import ( /* webpackChunkName: \"lodash\" */ 'lodash').then(_ => {\n        var element = document.createElement('div');\n        element.innerHTML = _.join(['Hello', 'webpack'], ' ');\n        return element;\n    }).catch(error => 'An error occurred while loading the component');\n}\n\ngetComponent().then(component => {\n    document.body.appendChild(component);\n})\n```\n\n```js\n// webpack.config.js\nconst path = require('path');\nconst webpack = require('webpack');\n\nmodule.exports = {\n    entry: {\n        index: './src/index.js',\n    },\n    output: {\n        filename: '[name].bundle.js',\n        chunkFilename: '[name].bundle.js',\n        path: path.resolve(__dirname, 'dist')\n    }\n};\n```\n> import() 调用会在内部用到 promises。如果在旧有版本浏览器中使用 import()，记得使用 一个 polyfill 库（例如 es6-promise 或 promise-polyfill），来 shim Promise。\n\n```js\nHash: 35f38da1baf5b177d685\nVersion: webpack 3.12.0\nTime: 327ms\n           Asset     Size  Chunks                    Chunk Names\nlodash.bundle.js   541 kB       0  [emitted]  [big]  lodash\n index.bundle.js  6.24 kB       1  [emitted]         index\n   [0] ./src/index.js 407 bytes {1} [built]\n   [2] (webpack)/buildin/global.js 509 bytes {0} [built]\n   [3] (webpack)/buildin/module.js 517 bytes {0} [built]\n    + 1 hidden module\n```\n由于 import() 会返回一个 promise，因此它可以和 async 函数一起使用。但是，需要使用像 Babel 这样的预处理器和[Syntax Dynamic Import Babel Plugin](https://babeljs.io/docs/en/babel-plugin-syntax-dynamic-import/#installation)。下面是如何通过 async 函数简化代码：\n\n\n\n> 注意，这里使用了 chunkFilename，它决定非入口 chunk 的名称。想了解 chunkFilename 更多信息，请查看 [output 相关文档](https://webpack.docschina.org/configuration/output/#output-chunkfilename)。接着，更新我们的项目，移除掉那些现在不会用到的文件:\n\n```js\nasync function getComponent() {\n    var element = document.createElement('div');\n    const _ = await import ( /* webpackChunkName: \"lodash\" */ 'lodash');\n    element.innerHTML = _.join(['Hello', 'webpack'], ' ');\n    return element;\n}\n\ngetComponent().then(component => {\n    document.body.appendChild(component);\n})\n```\n\n\n\n\n# 动态导入集合react-router\n首先我们要看一看一个加载函数\n```js\nrequire.ensure(dependencies, callback, chunkName)\n```\n这个方法可以实现js的按需加载，分开打包，webpack 管包叫 chunk，为了打包能正常输出，我们先给webpack配置文件配置一下chunk文件输出路径\n```js\n// webpack.config.js\nmodule.exports = {\n  ...\n  output: {\n    ...\n    chunkFilename: '[name].[chunkhash:5].chunk.js',\n    publicPath: '/dist/'\n  }\n  ...\n}\n```\n每个chunk 都会有一个ID，会在webpack内部生成，当然我们也可以给chunk指定一个名字，就是 require.ensure 的第三个参数\n\n配置文件中\n\n- [name] 默认是 ID，如果指定了chunkName则为指定的名字。\n- [chunkhash] 是对当前chunk 经过hash后得到的值，可以保证在chunk没有变化的时候hash不变，文件不需要更新，chunk变了后，可保证hash唯一，由于hash太长，这里我截取了hash的5个字符足矣\n## 根路由\n跟路由有点特殊，它一定要先加载一个组件才能渲染，也就是说，在跟路由不能使用按需加载方式，不过这个没关系，根路由用于基础路径，在所有模块都必须加载，所以他的 \"需\" 其实作用不大。\n\n# jsx 定义按需加载路由\n\n虽然官方推荐使用对象去定义，但是jsx语法看上去更清晰点，所以还是使用jsx演示，方法很简单，就是把 组件的 props.component 换成 props.getComponent ，函数还是上述例子的函数（记得根路由不要使用getComponent）。\n\n```js\n<Router history={history}>\n  <Route path=\"/\" component={App}>\n    <Route path=\"home\" getComponent={(location, callback) => {\n      require.ensure([], require => {\n        callback(null, require('modules/home'))\n      }, 'home')  \n    }}></Route>\n    <Route path=\"blog\" getComponent={(location, callback) => {\n      require.ensure([], require => {\n        callback(null, require('modules/blog'))\n      }, 'blog')  \n    }}></Route>\n  </Route>\n</Router>\n\n```\n\n看上去很乱有木有，在jsx中写那么多 js 感觉真难看，把 js 独立出来就是：\n\n```js\nconst home = (location, callback) => {\n  require.ensure([], require => {\n    callback(null, require('modules/home'))\n  }, 'home')  \n}\n\nconst blog = (location, callback) => {\n  require.ensure([], require => {\n    callback(null, require('modules/blog'))\n  }, 'blog')  \n}\n\n<Router history={history}>\n  <Route path=\"/\" component={App}>\n    <Route path=\"home\" getComponent={home}></Route>\n    <Route path=\"blog\" getComponent={blog}></Route>\n  </Route>\n</Router>\n```\n这样整理一下，就好看多了\n\n--------------------------------------\n**注意**: 或许有人会想，上面重复代码超级多，能不能用一个函数生成器去生成这些重复的函数呢？代码更进一步优化，比如:\n```js\nconst ensureModule = (name, entry) => (location, callback) => {\n  require.ensure([], require => {\n    callback(null, require(entry))\n  }, name)\n}\n\n<Router history={history}>\n  <Route path=\"/\" component={App}>\n    <Route path=\"home\" getComponent={ensureModule('home', 'modules/home')}></Route>\n    <Route path=\"blog\" getComponent={ensureModule('blog', 'modules/blog')}></Route>\n  </Route>\n</Router>\n```\n答案是：不能。这样看起来代码没有任何问题，好像更优雅的样子，但是经过亲自实践后，不行！！因为 require函数太特别了，他是webpack底层用于加载模块，所以必须明确的声明模块名，**require函数在这里只能接受字符串，不能接受变量** 。所以还是忍忍算了\n\n## 参考\n[webpack官网](https://webpack.docschina.org/guides/code-splitting/)\n","source":"_posts/webpack分模块打包.md","raw":"---\ntitle: webpack代码分离的三种常用方法\ndate: 2018-07-06 19:23:00\ntags: [webpack]\ncategories: 前端工程\n---\n\n\n> 代码分离是 webpack 中最引人注目的特性之一。此特性能够把代码分离到不同的 bundle 中，然后可以按需加载或并行加载这些文件。代码分离可以用于获取更小的 bundle，以及控制资源加载优先级，如果使用合理，会极大影响加载时间。\n\n有三种常用的代码分离方法：\n\n- **入口起点**：使用 entry 配置手动地分离代码。\n- **防止重复**：使用 CommonsChunkPlugin 去重和分离 chunk。\n- **动态导入**：通过模块的内联函数调用来分离代码。\n\n\n# 入口起点\n这是迄今为止最简单、最直观的分离代码的方式。不过，这种方式手动配置较多，并有一些陷阱，我们将会解决这些问题。先来看看如何从 main bundle 中分离另一个模块：\n\n```js\n\n// ./src/index.js\nimport _ from 'lodash';\n\nconsole.log(\n  _.join(['index', 'module', 'loaded!'], ' ')\n);\n\n// ./src/page.js\nimport _ from 'lodash';\n\nconsole.log(\n  _.join(['Another', 'module', 'loaded!'], ' ')\n);\n\n// webpack.config.js\nconst path = require('path');\n\nmodule.exports = {\n  entry: {\n    index: './src/index.js',\n    another: './src/page.js'\n  },\n  output: {\n    filename: '[name].bundle.js',\n    path: path.resolve(__dirname, 'dist')\n  }\n};\n```\n\n\n这将生成如下构建结果：\n```js\nHash: 36042176e77df9eaa36e\nVersion: webpack 4.15.1\nTime: 2944ms\nBuilt at: 2018-07-10 11:09:19\n            Asset      Size  Chunks             Chunk Names\nanother.bundle.js  70.4 KiB       0  [emitted]  another\n  index.bundle.js  70.4 KiB       1  [emitted]  index\n[1] (webpack)/buildin/module.js 497 bytes {0} {1} [built]\n[2] (webpack)/buildin/global.js 489 bytes {0} {1} [built]\n[3] ./src/page.js 92 bytes {0} [built]\n[4] ./src/index.js 90 bytes {1} [built]\n    + 1 hidden module\n```\n正如前面提到的，这种方法存在一些问题:\n- 如果入口 chunks 之间包含重复的模块，那些重复模块都会被引入到各个 bundle 中。\n- 这种方法不够灵活，并且不能将核心应用程序逻辑进行动态拆分代码。\n\n以上两点中，第一点对我们的示例来说无疑是个问题，因为之前我们在 `./src/index.js` 中也引入过 lodash，这样就在两个 bundle 中造成重复引用。接着，我们通过使用 CommonsChunkPlugin 来移除重复的模块。\n\n# 防止重复(CommonsChunkPlugin)\n[CommonsChunkPlugin](https://webpack.docschina.org/plugins/commons-chunk-plugin) 插件可以将公共的依赖模块提取到已有的入口 chunk 中，或者提取到一个新生成的 chunk。让我们使用这个插件，将之前的示例中重复的 lodash 模块去除：\n\n```js\nconst path = require('path');\nconst webpack = require('webpack');\n\nmodule.exports = {\n    entry: {\n      index: './src/index.js',\n      another: './src/page.js'\n    },\n    plugins: [\n      new webpack.optimize.CommonsChunkPlugin({\n        name: 'common' // 指定公共 bundle 的名称。\n      })\n    ],\n    output: {\n      filename: '[name].bundle.js',\n      path: path.resolve(__dirname, 'dist')\n    }\n};\n```\n\n```js\nHash: 39c6f28cf331e187e2ee\nVersion: webpack 3.12.0\nTime: 353ms\n            Asset       Size  Chunks                    Chunk Names\nanother.bundle.js  541 bytes       0  [emitted]         another\n  index.bundle.js  545 bytes       1  [emitted]         index\n common.bundle.js     545 kB       2  [emitted]  [big]  common\n   [1] ./src/index.js 90 bytes {1} [built]\n   [2] (webpack)/buildin/global.js 509 bytes {2} [built]\n   [3] (webpack)/buildin/module.js 517 bytes {2} [built]\n   [4] ./src/page.js 92 bytes {0} [built]\n    + 1 hidden module\n```\n# 动态导入(dynamic imports)\n\n当涉及到动态代码拆分时，`webpack` 提供了两个类似的技术。对于动态导入，第一种，也是优先选择的方式是，使用符合 [ECMAScript](https://github.com/tc39/proposal-dynamic-import) 提案 的 [import()](https://webpack.docschina.org/api/module-methods#import-) 语法。第二种，则是使用 webpack 特定的 [require.ensure](https://webpack.docschina.org/api/module-methods#require-ensure)。让我们先尝试使用第一种……\n\n```js\n// src/index.js\nfunction getComponent() {\n    return import ( /* webpackChunkName: \"lodash\" */ 'lodash').then(_ => {\n        var element = document.createElement('div');\n        element.innerHTML = _.join(['Hello', 'webpack'], ' ');\n        return element;\n    }).catch(error => 'An error occurred while loading the component');\n}\n\ngetComponent().then(component => {\n    document.body.appendChild(component);\n})\n```\n\n```js\n// webpack.config.js\nconst path = require('path');\nconst webpack = require('webpack');\n\nmodule.exports = {\n    entry: {\n        index: './src/index.js',\n    },\n    output: {\n        filename: '[name].bundle.js',\n        chunkFilename: '[name].bundle.js',\n        path: path.resolve(__dirname, 'dist')\n    }\n};\n```\n> import() 调用会在内部用到 promises。如果在旧有版本浏览器中使用 import()，记得使用 一个 polyfill 库（例如 es6-promise 或 promise-polyfill），来 shim Promise。\n\n```js\nHash: 35f38da1baf5b177d685\nVersion: webpack 3.12.0\nTime: 327ms\n           Asset     Size  Chunks                    Chunk Names\nlodash.bundle.js   541 kB       0  [emitted]  [big]  lodash\n index.bundle.js  6.24 kB       1  [emitted]         index\n   [0] ./src/index.js 407 bytes {1} [built]\n   [2] (webpack)/buildin/global.js 509 bytes {0} [built]\n   [3] (webpack)/buildin/module.js 517 bytes {0} [built]\n    + 1 hidden module\n```\n由于 import() 会返回一个 promise，因此它可以和 async 函数一起使用。但是，需要使用像 Babel 这样的预处理器和[Syntax Dynamic Import Babel Plugin](https://babeljs.io/docs/en/babel-plugin-syntax-dynamic-import/#installation)。下面是如何通过 async 函数简化代码：\n\n\n\n> 注意，这里使用了 chunkFilename，它决定非入口 chunk 的名称。想了解 chunkFilename 更多信息，请查看 [output 相关文档](https://webpack.docschina.org/configuration/output/#output-chunkfilename)。接着，更新我们的项目，移除掉那些现在不会用到的文件:\n\n```js\nasync function getComponent() {\n    var element = document.createElement('div');\n    const _ = await import ( /* webpackChunkName: \"lodash\" */ 'lodash');\n    element.innerHTML = _.join(['Hello', 'webpack'], ' ');\n    return element;\n}\n\ngetComponent().then(component => {\n    document.body.appendChild(component);\n})\n```\n\n\n\n\n# 动态导入集合react-router\n首先我们要看一看一个加载函数\n```js\nrequire.ensure(dependencies, callback, chunkName)\n```\n这个方法可以实现js的按需加载，分开打包，webpack 管包叫 chunk，为了打包能正常输出，我们先给webpack配置文件配置一下chunk文件输出路径\n```js\n// webpack.config.js\nmodule.exports = {\n  ...\n  output: {\n    ...\n    chunkFilename: '[name].[chunkhash:5].chunk.js',\n    publicPath: '/dist/'\n  }\n  ...\n}\n```\n每个chunk 都会有一个ID，会在webpack内部生成，当然我们也可以给chunk指定一个名字，就是 require.ensure 的第三个参数\n\n配置文件中\n\n- [name] 默认是 ID，如果指定了chunkName则为指定的名字。\n- [chunkhash] 是对当前chunk 经过hash后得到的值，可以保证在chunk没有变化的时候hash不变，文件不需要更新，chunk变了后，可保证hash唯一，由于hash太长，这里我截取了hash的5个字符足矣\n## 根路由\n跟路由有点特殊，它一定要先加载一个组件才能渲染，也就是说，在跟路由不能使用按需加载方式，不过这个没关系，根路由用于基础路径，在所有模块都必须加载，所以他的 \"需\" 其实作用不大。\n\n# jsx 定义按需加载路由\n\n虽然官方推荐使用对象去定义，但是jsx语法看上去更清晰点，所以还是使用jsx演示，方法很简单，就是把 组件的 props.component 换成 props.getComponent ，函数还是上述例子的函数（记得根路由不要使用getComponent）。\n\n```js\n<Router history={history}>\n  <Route path=\"/\" component={App}>\n    <Route path=\"home\" getComponent={(location, callback) => {\n      require.ensure([], require => {\n        callback(null, require('modules/home'))\n      }, 'home')  \n    }}></Route>\n    <Route path=\"blog\" getComponent={(location, callback) => {\n      require.ensure([], require => {\n        callback(null, require('modules/blog'))\n      }, 'blog')  \n    }}></Route>\n  </Route>\n</Router>\n\n```\n\n看上去很乱有木有，在jsx中写那么多 js 感觉真难看，把 js 独立出来就是：\n\n```js\nconst home = (location, callback) => {\n  require.ensure([], require => {\n    callback(null, require('modules/home'))\n  }, 'home')  \n}\n\nconst blog = (location, callback) => {\n  require.ensure([], require => {\n    callback(null, require('modules/blog'))\n  }, 'blog')  \n}\n\n<Router history={history}>\n  <Route path=\"/\" component={App}>\n    <Route path=\"home\" getComponent={home}></Route>\n    <Route path=\"blog\" getComponent={blog}></Route>\n  </Route>\n</Router>\n```\n这样整理一下，就好看多了\n\n--------------------------------------\n**注意**: 或许有人会想，上面重复代码超级多，能不能用一个函数生成器去生成这些重复的函数呢？代码更进一步优化，比如:\n```js\nconst ensureModule = (name, entry) => (location, callback) => {\n  require.ensure([], require => {\n    callback(null, require(entry))\n  }, name)\n}\n\n<Router history={history}>\n  <Route path=\"/\" component={App}>\n    <Route path=\"home\" getComponent={ensureModule('home', 'modules/home')}></Route>\n    <Route path=\"blog\" getComponent={ensureModule('blog', 'modules/blog')}></Route>\n  </Route>\n</Router>\n```\n答案是：不能。这样看起来代码没有任何问题，好像更优雅的样子，但是经过亲自实践后，不行！！因为 require函数太特别了，他是webpack底层用于加载模块，所以必须明确的声明模块名，**require函数在这里只能接受字符串，不能接受变量** 。所以还是忍忍算了\n\n## 参考\n[webpack官网](https://webpack.docschina.org/guides/code-splitting/)\n","slug":"webpack分模块打包","published":1,"updated":"2018-07-29T12:11:11.671Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkwmni5100053pu7brz5sabt","content":"<blockquote>\n<p>代码分离是 webpack 中最引人注目的特性之一。此特性能够把代码分离到不同的 bundle 中，然后可以按需加载或并行加载这些文件。代码分离可以用于获取更小的 bundle，以及控制资源加载优先级，如果使用合理，会极大影响加载时间。</p>\n</blockquote>\n<p>有三种常用的代码分离方法：</p>\n<ul>\n<li><strong>入口起点</strong>：使用 entry 配置手动地分离代码。</li>\n<li><strong>防止重复</strong>：使用 CommonsChunkPlugin 去重和分离 chunk。</li>\n<li><strong>动态导入</strong>：通过模块的内联函数调用来分离代码。</li>\n</ul>\n<h1 id=\"入口起点\"><a href=\"#入口起点\" class=\"headerlink\" title=\"入口起点\"></a>入口起点</h1><p>这是迄今为止最简单、最直观的分离代码的方式。不过，这种方式手动配置较多，并有一些陷阱，我们将会解决这些问题。先来看看如何从 main bundle 中分离另一个模块：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ./src/index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> _ <span class=\"keyword\">from</span> <span class=\"string\">'lodash'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">  _.join([<span class=\"string\">'index'</span>, <span class=\"string\">'module'</span>, <span class=\"string\">'loaded!'</span>], <span class=\"string\">' '</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ./src/page.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> _ <span class=\"keyword\">from</span> <span class=\"string\">'lodash'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">  _.join([<span class=\"string\">'Another'</span>, <span class=\"string\">'module'</span>, <span class=\"string\">'loaded!'</span>], <span class=\"string\">' '</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    index: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">    another: <span class=\"string\">'./src/page.js'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'[name].bundle.js'</span>,</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>这将生成如下构建结果：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hash: <span class=\"number\">36042176e77</span>df9eaa36e</span><br><span class=\"line\">Version: webpack <span class=\"number\">4.15</span><span class=\"number\">.1</span></span><br><span class=\"line\">Time: <span class=\"number\">2944</span>ms</span><br><span class=\"line\">Built at: <span class=\"number\">2018</span><span class=\"number\">-07</span><span class=\"number\">-10</span> <span class=\"number\">11</span>:<span class=\"number\">09</span>:<span class=\"number\">19</span></span><br><span class=\"line\">            Asset      Size  Chunks             Chunk Names</span><br><span class=\"line\">another.bundle.js  <span class=\"number\">70.4</span> KiB       <span class=\"number\">0</span>  [emitted]  another</span><br><span class=\"line\">  index.bundle.js  <span class=\"number\">70.4</span> KiB       <span class=\"number\">1</span>  [emitted]  index</span><br><span class=\"line\">[<span class=\"number\">1</span>] (webpack)/buildin/<span class=\"built_in\">module</span>.js <span class=\"number\">497</span> bytes &#123;<span class=\"number\">0</span>&#125; &#123;<span class=\"number\">1</span>&#125; [built]</span><br><span class=\"line\">[<span class=\"number\">2</span>] (webpack)/buildin/global.js <span class=\"number\">489</span> bytes &#123;<span class=\"number\">0</span>&#125; &#123;<span class=\"number\">1</span>&#125; [built]</span><br><span class=\"line\">[<span class=\"number\">3</span>] ./src/page.js <span class=\"number\">92</span> bytes &#123;<span class=\"number\">0</span>&#125; [built]</span><br><span class=\"line\">[<span class=\"number\">4</span>] ./src/index.js <span class=\"number\">90</span> bytes &#123;<span class=\"number\">1</span>&#125; [built]</span><br><span class=\"line\">    + <span class=\"number\">1</span> hidden <span class=\"built_in\">module</span></span><br></pre></td></tr></table></figure></p>\n<p>正如前面提到的，这种方法存在一些问题:</p>\n<ul>\n<li>如果入口 chunks 之间包含重复的模块，那些重复模块都会被引入到各个 bundle 中。</li>\n<li>这种方法不够灵活，并且不能将核心应用程序逻辑进行动态拆分代码。</li>\n</ul>\n<p>以上两点中，第一点对我们的示例来说无疑是个问题，因为之前我们在 <code>./src/index.js</code> 中也引入过 lodash，这样就在两个 bundle 中造成重复引用。接着，我们通过使用 CommonsChunkPlugin 来移除重复的模块。</p>\n<h1 id=\"防止重复-CommonsChunkPlugin\"><a href=\"#防止重复-CommonsChunkPlugin\" class=\"headerlink\" title=\"防止重复(CommonsChunkPlugin)\"></a>防止重复(CommonsChunkPlugin)</h1><p><a href=\"https://webpack.docschina.org/plugins/commons-chunk-plugin\" target=\"_blank\" rel=\"noopener\">CommonsChunkPlugin</a> 插件可以将公共的依赖模块提取到已有的入口 chunk 中，或者提取到一个新生成的 chunk。让我们使用这个插件，将之前的示例中重复的 lodash 模块去除：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">      index: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">      another: <span class=\"string\">'./src/page.js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">      <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class=\"line\">        name: <span class=\"string\">'common'</span> <span class=\"comment\">// 指定公共 bundle 的名称。</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">      filename: <span class=\"string\">'[name].bundle.js'</span>,</span><br><span class=\"line\">      path: path.resolve(__dirname, <span class=\"string\">'dist'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hash: <span class=\"number\">39</span>c6f28cf331e187e2ee</span><br><span class=\"line\">Version: webpack <span class=\"number\">3.12</span><span class=\"number\">.0</span></span><br><span class=\"line\">Time: <span class=\"number\">353</span>ms</span><br><span class=\"line\">            Asset       Size  Chunks                    Chunk Names</span><br><span class=\"line\">another.bundle.js  <span class=\"number\">541</span> bytes       <span class=\"number\">0</span>  [emitted]         another</span><br><span class=\"line\">  index.bundle.js  <span class=\"number\">545</span> bytes       <span class=\"number\">1</span>  [emitted]         index</span><br><span class=\"line\"> common.bundle.js     <span class=\"number\">545</span> kB       <span class=\"number\">2</span>  [emitted]  [big]  common</span><br><span class=\"line\">   [<span class=\"number\">1</span>] ./src/index.js <span class=\"number\">90</span> bytes &#123;<span class=\"number\">1</span>&#125; [built]</span><br><span class=\"line\">   [<span class=\"number\">2</span>] (webpack)/buildin/global.js <span class=\"number\">509</span> bytes &#123;<span class=\"number\">2</span>&#125; [built]</span><br><span class=\"line\">   [<span class=\"number\">3</span>] (webpack)/buildin/<span class=\"built_in\">module</span>.js <span class=\"number\">517</span> bytes &#123;<span class=\"number\">2</span>&#125; [built]</span><br><span class=\"line\">   [<span class=\"number\">4</span>] ./src/page.js <span class=\"number\">92</span> bytes &#123;<span class=\"number\">0</span>&#125; [built]</span><br><span class=\"line\">    + <span class=\"number\">1</span> hidden <span class=\"built_in\">module</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"动态导入-dynamic-imports\"><a href=\"#动态导入-dynamic-imports\" class=\"headerlink\" title=\"动态导入(dynamic imports)\"></a>动态导入(dynamic imports)</h1><p>当涉及到动态代码拆分时，<code>webpack</code> 提供了两个类似的技术。对于动态导入，第一种，也是优先选择的方式是，使用符合 <a href=\"https://github.com/tc39/proposal-dynamic-import\" target=\"_blank\" rel=\"noopener\">ECMAScript</a> 提案 的 <a href=\"https://webpack.docschina.org/api/module-methods#import-\" target=\"_blank\" rel=\"noopener\">import()</a> 语法。第二种，则是使用 webpack 特定的 <a href=\"https://webpack.docschina.org/api/module-methods#require-ensure\" target=\"_blank\" rel=\"noopener\">require.ensure</a>。让我们先尝试使用第一种……</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/index.js</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getComponent</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">import</span> ( <span class=\"comment\">/* webpackChunkName: \"lodash\" */</span> <span class=\"string\">'lodash'</span>).then(<span class=\"function\"><span class=\"params\">_</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> element = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">        element.innerHTML = _.join([<span class=\"string\">'Hello'</span>, <span class=\"string\">'webpack'</span>], <span class=\"string\">' '</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> element;</span><br><span class=\"line\">    &#125;).catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> <span class=\"string\">'An error occurred while loading the component'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getComponent().then(<span class=\"function\"><span class=\"params\">component</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.appendChild(component);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">        index: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename: <span class=\"string\">'[name].bundle.js'</span>,</span><br><span class=\"line\">        chunkFilename: <span class=\"string\">'[name].bundle.js'</span>,</span><br><span class=\"line\">        path: path.resolve(__dirname, <span class=\"string\">'dist'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>import() 调用会在内部用到 promises。如果在旧有版本浏览器中使用 import()，记得使用 一个 polyfill 库（例如 es6-promise 或 promise-polyfill），来 shim Promise。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hash: <span class=\"number\">35</span>f38da1baf5b177d685</span><br><span class=\"line\">Version: webpack <span class=\"number\">3.12</span><span class=\"number\">.0</span></span><br><span class=\"line\">Time: <span class=\"number\">327</span>ms</span><br><span class=\"line\">           Asset     Size  Chunks                    Chunk Names</span><br><span class=\"line\">lodash.bundle.js   <span class=\"number\">541</span> kB       <span class=\"number\">0</span>  [emitted]  [big]  lodash</span><br><span class=\"line\"> index.bundle.js  <span class=\"number\">6.24</span> kB       <span class=\"number\">1</span>  [emitted]         index</span><br><span class=\"line\">   [<span class=\"number\">0</span>] ./src/index.js <span class=\"number\">407</span> bytes &#123;<span class=\"number\">1</span>&#125; [built]</span><br><span class=\"line\">   [<span class=\"number\">2</span>] (webpack)/buildin/global.js <span class=\"number\">509</span> bytes &#123;<span class=\"number\">0</span>&#125; [built]</span><br><span class=\"line\">   [<span class=\"number\">3</span>] (webpack)/buildin/<span class=\"built_in\">module</span>.js <span class=\"number\">517</span> bytes &#123;<span class=\"number\">0</span>&#125; [built]</span><br><span class=\"line\">    + <span class=\"number\">1</span> hidden <span class=\"built_in\">module</span></span><br></pre></td></tr></table></figure>\n<p>由于 import() 会返回一个 promise，因此它可以和 async 函数一起使用。但是，需要使用像 Babel 这样的预处理器和<a href=\"https://babeljs.io/docs/en/babel-plugin-syntax-dynamic-import/#installation\" target=\"_blank\" rel=\"noopener\">Syntax Dynamic Import Babel Plugin</a>。下面是如何通过 async 函数简化代码：</p>\n<blockquote>\n<p>注意，这里使用了 chunkFilename，它决定非入口 chunk 的名称。想了解 chunkFilename 更多信息，请查看 <a href=\"https://webpack.docschina.org/configuration/output/#output-chunkfilename\" target=\"_blank\" rel=\"noopener\">output 相关文档</a>。接着，更新我们的项目，移除掉那些现在不会用到的文件:</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getComponent</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> element = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> _ = <span class=\"keyword\">await</span> <span class=\"keyword\">import</span> ( <span class=\"comment\">/* webpackChunkName: \"lodash\" */</span> <span class=\"string\">'lodash'</span>);</span><br><span class=\"line\">    element.innerHTML = _.join([<span class=\"string\">'Hello'</span>, <span class=\"string\">'webpack'</span>], <span class=\"string\">' '</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> element;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getComponent().then(<span class=\"function\"><span class=\"params\">component</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.appendChild(component);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h1 id=\"动态导入集合react-router\"><a href=\"#动态导入集合react-router\" class=\"headerlink\" title=\"动态导入集合react-router\"></a>动态导入集合react-router</h1><p>首先我们要看一看一个加载函数<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>.ensure(dependencies, callback, chunkName)</span><br></pre></td></tr></table></figure></p>\n<p>这个方法可以实现js的按需加载，分开打包，webpack 管包叫 chunk，为了打包能正常输出，我们先给webpack配置文件配置一下chunk文件输出路径<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    chunkFilename: <span class=\"string\">'[name].[chunkhash:5].chunk.js'</span>,</span><br><span class=\"line\">    publicPath: <span class=\"string\">'/dist/'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>每个chunk 都会有一个ID，会在webpack内部生成，当然我们也可以给chunk指定一个名字，就是 require.ensure 的第三个参数</p>\n<p>配置文件中</p>\n<ul>\n<li>[name] 默认是 ID，如果指定了chunkName则为指定的名字。</li>\n<li>[chunkhash] 是对当前chunk 经过hash后得到的值，可以保证在chunk没有变化的时候hash不变，文件不需要更新，chunk变了后，可保证hash唯一，由于hash太长，这里我截取了hash的5个字符足矣<h2 id=\"根路由\"><a href=\"#根路由\" class=\"headerlink\" title=\"根路由\"></a>根路由</h2>跟路由有点特殊，它一定要先加载一个组件才能渲染，也就是说，在跟路由不能使用按需加载方式，不过这个没关系，根路由用于基础路径，在所有模块都必须加载，所以他的 “需” 其实作用不大。</li>\n</ul>\n<h1 id=\"jsx-定义按需加载路由\"><a href=\"#jsx-定义按需加载路由\" class=\"headerlink\" title=\"jsx 定义按需加载路由\"></a>jsx 定义按需加载路由</h1><p>虽然官方推荐使用对象去定义，但是jsx语法看上去更清晰点，所以还是使用jsx演示，方法很简单，就是把 组件的 props.component 换成 props.getComponent ，函数还是上述例子的函数（记得根路由不要使用getComponent）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Router history=&#123;history&#125;&gt;</span><br><span class=\"line\">  &lt;Route path=<span class=\"string\">\"/\"</span> component=&#123;App&#125;&gt;</span><br><span class=\"line\">    &lt;Route path=<span class=\"string\">\"home\"</span> getComponent=&#123;(location, callback) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"built_in\">require</span>.ensure([], <span class=\"built_in\">require</span> =&gt; &#123;</span><br><span class=\"line\">        callback(<span class=\"literal\">null</span>, <span class=\"built_in\">require</span>(<span class=\"string\">'modules/home'</span>))</span><br><span class=\"line\">      &#125;, <span class=\"string\">'home'</span>)  </span><br><span class=\"line\">    &#125;&#125;&gt;&lt;/Route&gt;</span><br><span class=\"line\">    &lt;Route path=<span class=\"string\">\"blog\"</span> getComponent=&#123;(location, callback) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"built_in\">require</span>.ensure([], <span class=\"built_in\">require</span> =&gt; &#123;</span><br><span class=\"line\">        callback(<span class=\"literal\">null</span>, <span class=\"built_in\">require</span>(<span class=\"string\">'modules/blog'</span>))</span><br><span class=\"line\">      &#125;, <span class=\"string\">'blog'</span>)  </span><br><span class=\"line\">    &#125;&#125;&gt;&lt;/Route&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/Route&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>Router&gt;</span><br></pre></td></tr></table></figure>\n<p>看上去很乱有木有，在jsx中写那么多 js 感觉真难看，把 js 独立出来就是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> home = <span class=\"function\">(<span class=\"params\">location, callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">require</span>.ensure([], <span class=\"built_in\">require</span> =&gt; &#123;</span><br><span class=\"line\">    callback(<span class=\"literal\">null</span>, <span class=\"built_in\">require</span>(<span class=\"string\">'modules/home'</span>))</span><br><span class=\"line\">  &#125;, <span class=\"string\">'home'</span>)  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> blog = <span class=\"function\">(<span class=\"params\">location, callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">require</span>.ensure([], <span class=\"built_in\">require</span> =&gt; &#123;</span><br><span class=\"line\">    callback(<span class=\"literal\">null</span>, <span class=\"built_in\">require</span>(<span class=\"string\">'modules/blog'</span>))</span><br><span class=\"line\">  &#125;, <span class=\"string\">'blog'</span>)  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;Router history=&#123;history&#125;&gt;</span><br><span class=\"line\">  &lt;Route path=<span class=\"string\">\"/\"</span> component=&#123;App&#125;&gt;</span><br><span class=\"line\">    &lt;Route path=<span class=\"string\">\"home\"</span> getComponent=&#123;home&#125;&gt;&lt;/Route&gt;</span><br><span class=\"line\">    &lt;Route path=<span class=\"string\">\"blog\"</span> getComponent=&#123;blog&#125;&gt;&lt;/Route&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/Route&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>Router&gt;</span><br></pre></td></tr></table></figure>\n<p>这样整理一下，就好看多了</p>\n<hr>\n<p><strong>注意</strong>: 或许有人会想，上面重复代码超级多，能不能用一个函数生成器去生成这些重复的函数呢？代码更进一步优化，比如:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ensureModule = <span class=\"function\">(<span class=\"params\">name, entry</span>) =&gt;</span> (location, callback) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">require</span>.ensure([], <span class=\"built_in\">require</span> =&gt; &#123;</span><br><span class=\"line\">    callback(<span class=\"literal\">null</span>, <span class=\"built_in\">require</span>(entry))</span><br><span class=\"line\">  &#125;, name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;Router history=&#123;history&#125;&gt;</span><br><span class=\"line\">  &lt;Route path=<span class=\"string\">\"/\"</span> component=&#123;App&#125;&gt;</span><br><span class=\"line\">    &lt;Route path=<span class=\"string\">\"home\"</span> getComponent=&#123;ensureModule(<span class=\"string\">'home'</span>, <span class=\"string\">'modules/home'</span>)&#125;&gt;&lt;/Route&gt;</span><br><span class=\"line\">    &lt;Route path=<span class=\"string\">\"blog\"</span> getComponent=&#123;ensureModule(<span class=\"string\">'blog'</span>, <span class=\"string\">'modules/blog'</span>)&#125;&gt;&lt;/Route&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/Route&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>Router&gt;</span><br></pre></td></tr></table></figure></p>\n<p>答案是：不能。这样看起来代码没有任何问题，好像更优雅的样子，但是经过亲自实践后，不行！！因为 require函数太特别了，他是webpack底层用于加载模块，所以必须明确的声明模块名，<strong>require函数在这里只能接受字符串，不能接受变量</strong> 。所以还是忍忍算了</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://webpack.docschina.org/guides/code-splitting/\" target=\"_blank\" rel=\"noopener\">webpack官网</a></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>代码分离是 webpack 中最引人注目的特性之一。此特性能够把代码分离到不同的 bundle 中，然后可以按需加载或并行加载这些文件。代码分离可以用于获取更小的 bundle，以及控制资源加载优先级，如果使用合理，会极大影响加载时间。</p>\n</blockquote>\n<p>有三种常用的代码分离方法：</p>\n<ul>\n<li><strong>入口起点</strong>：使用 entry 配置手动地分离代码。</li>\n<li><strong>防止重复</strong>：使用 CommonsChunkPlugin 去重和分离 chunk。</li>\n<li><strong>动态导入</strong>：通过模块的内联函数调用来分离代码。</li>\n</ul>\n<h1 id=\"入口起点\"><a href=\"#入口起点\" class=\"headerlink\" title=\"入口起点\"></a>入口起点</h1><p>这是迄今为止最简单、最直观的分离代码的方式。不过，这种方式手动配置较多，并有一些陷阱，我们将会解决这些问题。先来看看如何从 main bundle 中分离另一个模块：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ./src/index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> _ <span class=\"keyword\">from</span> <span class=\"string\">'lodash'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">  _.join([<span class=\"string\">'index'</span>, <span class=\"string\">'module'</span>, <span class=\"string\">'loaded!'</span>], <span class=\"string\">' '</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ./src/page.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> _ <span class=\"keyword\">from</span> <span class=\"string\">'lodash'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">  _.join([<span class=\"string\">'Another'</span>, <span class=\"string\">'module'</span>, <span class=\"string\">'loaded!'</span>], <span class=\"string\">' '</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    index: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">    another: <span class=\"string\">'./src/page.js'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'[name].bundle.js'</span>,</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>这将生成如下构建结果：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hash: <span class=\"number\">36042176e77</span>df9eaa36e</span><br><span class=\"line\">Version: webpack <span class=\"number\">4.15</span><span class=\"number\">.1</span></span><br><span class=\"line\">Time: <span class=\"number\">2944</span>ms</span><br><span class=\"line\">Built at: <span class=\"number\">2018</span><span class=\"number\">-07</span><span class=\"number\">-10</span> <span class=\"number\">11</span>:<span class=\"number\">09</span>:<span class=\"number\">19</span></span><br><span class=\"line\">            Asset      Size  Chunks             Chunk Names</span><br><span class=\"line\">another.bundle.js  <span class=\"number\">70.4</span> KiB       <span class=\"number\">0</span>  [emitted]  another</span><br><span class=\"line\">  index.bundle.js  <span class=\"number\">70.4</span> KiB       <span class=\"number\">1</span>  [emitted]  index</span><br><span class=\"line\">[<span class=\"number\">1</span>] (webpack)/buildin/<span class=\"built_in\">module</span>.js <span class=\"number\">497</span> bytes &#123;<span class=\"number\">0</span>&#125; &#123;<span class=\"number\">1</span>&#125; [built]</span><br><span class=\"line\">[<span class=\"number\">2</span>] (webpack)/buildin/global.js <span class=\"number\">489</span> bytes &#123;<span class=\"number\">0</span>&#125; &#123;<span class=\"number\">1</span>&#125; [built]</span><br><span class=\"line\">[<span class=\"number\">3</span>] ./src/page.js <span class=\"number\">92</span> bytes &#123;<span class=\"number\">0</span>&#125; [built]</span><br><span class=\"line\">[<span class=\"number\">4</span>] ./src/index.js <span class=\"number\">90</span> bytes &#123;<span class=\"number\">1</span>&#125; [built]</span><br><span class=\"line\">    + <span class=\"number\">1</span> hidden <span class=\"built_in\">module</span></span><br></pre></td></tr></table></figure></p>\n<p>正如前面提到的，这种方法存在一些问题:</p>\n<ul>\n<li>如果入口 chunks 之间包含重复的模块，那些重复模块都会被引入到各个 bundle 中。</li>\n<li>这种方法不够灵活，并且不能将核心应用程序逻辑进行动态拆分代码。</li>\n</ul>\n<p>以上两点中，第一点对我们的示例来说无疑是个问题，因为之前我们在 <code>./src/index.js</code> 中也引入过 lodash，这样就在两个 bundle 中造成重复引用。接着，我们通过使用 CommonsChunkPlugin 来移除重复的模块。</p>\n<h1 id=\"防止重复-CommonsChunkPlugin\"><a href=\"#防止重复-CommonsChunkPlugin\" class=\"headerlink\" title=\"防止重复(CommonsChunkPlugin)\"></a>防止重复(CommonsChunkPlugin)</h1><p><a href=\"https://webpack.docschina.org/plugins/commons-chunk-plugin\" target=\"_blank\" rel=\"noopener\">CommonsChunkPlugin</a> 插件可以将公共的依赖模块提取到已有的入口 chunk 中，或者提取到一个新生成的 chunk。让我们使用这个插件，将之前的示例中重复的 lodash 模块去除：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">      index: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">      another: <span class=\"string\">'./src/page.js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">      <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class=\"line\">        name: <span class=\"string\">'common'</span> <span class=\"comment\">// 指定公共 bundle 的名称。</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">      filename: <span class=\"string\">'[name].bundle.js'</span>,</span><br><span class=\"line\">      path: path.resolve(__dirname, <span class=\"string\">'dist'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hash: <span class=\"number\">39</span>c6f28cf331e187e2ee</span><br><span class=\"line\">Version: webpack <span class=\"number\">3.12</span><span class=\"number\">.0</span></span><br><span class=\"line\">Time: <span class=\"number\">353</span>ms</span><br><span class=\"line\">            Asset       Size  Chunks                    Chunk Names</span><br><span class=\"line\">another.bundle.js  <span class=\"number\">541</span> bytes       <span class=\"number\">0</span>  [emitted]         another</span><br><span class=\"line\">  index.bundle.js  <span class=\"number\">545</span> bytes       <span class=\"number\">1</span>  [emitted]         index</span><br><span class=\"line\"> common.bundle.js     <span class=\"number\">545</span> kB       <span class=\"number\">2</span>  [emitted]  [big]  common</span><br><span class=\"line\">   [<span class=\"number\">1</span>] ./src/index.js <span class=\"number\">90</span> bytes &#123;<span class=\"number\">1</span>&#125; [built]</span><br><span class=\"line\">   [<span class=\"number\">2</span>] (webpack)/buildin/global.js <span class=\"number\">509</span> bytes &#123;<span class=\"number\">2</span>&#125; [built]</span><br><span class=\"line\">   [<span class=\"number\">3</span>] (webpack)/buildin/<span class=\"built_in\">module</span>.js <span class=\"number\">517</span> bytes &#123;<span class=\"number\">2</span>&#125; [built]</span><br><span class=\"line\">   [<span class=\"number\">4</span>] ./src/page.js <span class=\"number\">92</span> bytes &#123;<span class=\"number\">0</span>&#125; [built]</span><br><span class=\"line\">    + <span class=\"number\">1</span> hidden <span class=\"built_in\">module</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"动态导入-dynamic-imports\"><a href=\"#动态导入-dynamic-imports\" class=\"headerlink\" title=\"动态导入(dynamic imports)\"></a>动态导入(dynamic imports)</h1><p>当涉及到动态代码拆分时，<code>webpack</code> 提供了两个类似的技术。对于动态导入，第一种，也是优先选择的方式是，使用符合 <a href=\"https://github.com/tc39/proposal-dynamic-import\" target=\"_blank\" rel=\"noopener\">ECMAScript</a> 提案 的 <a href=\"https://webpack.docschina.org/api/module-methods#import-\" target=\"_blank\" rel=\"noopener\">import()</a> 语法。第二种，则是使用 webpack 特定的 <a href=\"https://webpack.docschina.org/api/module-methods#require-ensure\" target=\"_blank\" rel=\"noopener\">require.ensure</a>。让我们先尝试使用第一种……</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/index.js</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getComponent</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">import</span> ( <span class=\"comment\">/* webpackChunkName: \"lodash\" */</span> <span class=\"string\">'lodash'</span>).then(<span class=\"function\"><span class=\"params\">_</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> element = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">        element.innerHTML = _.join([<span class=\"string\">'Hello'</span>, <span class=\"string\">'webpack'</span>], <span class=\"string\">' '</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> element;</span><br><span class=\"line\">    &#125;).catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> <span class=\"string\">'An error occurred while loading the component'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getComponent().then(<span class=\"function\"><span class=\"params\">component</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.appendChild(component);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">        index: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename: <span class=\"string\">'[name].bundle.js'</span>,</span><br><span class=\"line\">        chunkFilename: <span class=\"string\">'[name].bundle.js'</span>,</span><br><span class=\"line\">        path: path.resolve(__dirname, <span class=\"string\">'dist'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>import() 调用会在内部用到 promises。如果在旧有版本浏览器中使用 import()，记得使用 一个 polyfill 库（例如 es6-promise 或 promise-polyfill），来 shim Promise。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hash: <span class=\"number\">35</span>f38da1baf5b177d685</span><br><span class=\"line\">Version: webpack <span class=\"number\">3.12</span><span class=\"number\">.0</span></span><br><span class=\"line\">Time: <span class=\"number\">327</span>ms</span><br><span class=\"line\">           Asset     Size  Chunks                    Chunk Names</span><br><span class=\"line\">lodash.bundle.js   <span class=\"number\">541</span> kB       <span class=\"number\">0</span>  [emitted]  [big]  lodash</span><br><span class=\"line\"> index.bundle.js  <span class=\"number\">6.24</span> kB       <span class=\"number\">1</span>  [emitted]         index</span><br><span class=\"line\">   [<span class=\"number\">0</span>] ./src/index.js <span class=\"number\">407</span> bytes &#123;<span class=\"number\">1</span>&#125; [built]</span><br><span class=\"line\">   [<span class=\"number\">2</span>] (webpack)/buildin/global.js <span class=\"number\">509</span> bytes &#123;<span class=\"number\">0</span>&#125; [built]</span><br><span class=\"line\">   [<span class=\"number\">3</span>] (webpack)/buildin/<span class=\"built_in\">module</span>.js <span class=\"number\">517</span> bytes &#123;<span class=\"number\">0</span>&#125; [built]</span><br><span class=\"line\">    + <span class=\"number\">1</span> hidden <span class=\"built_in\">module</span></span><br></pre></td></tr></table></figure>\n<p>由于 import() 会返回一个 promise，因此它可以和 async 函数一起使用。但是，需要使用像 Babel 这样的预处理器和<a href=\"https://babeljs.io/docs/en/babel-plugin-syntax-dynamic-import/#installation\" target=\"_blank\" rel=\"noopener\">Syntax Dynamic Import Babel Plugin</a>。下面是如何通过 async 函数简化代码：</p>\n<blockquote>\n<p>注意，这里使用了 chunkFilename，它决定非入口 chunk 的名称。想了解 chunkFilename 更多信息，请查看 <a href=\"https://webpack.docschina.org/configuration/output/#output-chunkfilename\" target=\"_blank\" rel=\"noopener\">output 相关文档</a>。接着，更新我们的项目，移除掉那些现在不会用到的文件:</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getComponent</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> element = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> _ = <span class=\"keyword\">await</span> <span class=\"keyword\">import</span> ( <span class=\"comment\">/* webpackChunkName: \"lodash\" */</span> <span class=\"string\">'lodash'</span>);</span><br><span class=\"line\">    element.innerHTML = _.join([<span class=\"string\">'Hello'</span>, <span class=\"string\">'webpack'</span>], <span class=\"string\">' '</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> element;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getComponent().then(<span class=\"function\"><span class=\"params\">component</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.appendChild(component);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h1 id=\"动态导入集合react-router\"><a href=\"#动态导入集合react-router\" class=\"headerlink\" title=\"动态导入集合react-router\"></a>动态导入集合react-router</h1><p>首先我们要看一看一个加载函数<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>.ensure(dependencies, callback, chunkName)</span><br></pre></td></tr></table></figure></p>\n<p>这个方法可以实现js的按需加载，分开打包，webpack 管包叫 chunk，为了打包能正常输出，我们先给webpack配置文件配置一下chunk文件输出路径<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    chunkFilename: <span class=\"string\">'[name].[chunkhash:5].chunk.js'</span>,</span><br><span class=\"line\">    publicPath: <span class=\"string\">'/dist/'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>每个chunk 都会有一个ID，会在webpack内部生成，当然我们也可以给chunk指定一个名字，就是 require.ensure 的第三个参数</p>\n<p>配置文件中</p>\n<ul>\n<li>[name] 默认是 ID，如果指定了chunkName则为指定的名字。</li>\n<li>[chunkhash] 是对当前chunk 经过hash后得到的值，可以保证在chunk没有变化的时候hash不变，文件不需要更新，chunk变了后，可保证hash唯一，由于hash太长，这里我截取了hash的5个字符足矣<h2 id=\"根路由\"><a href=\"#根路由\" class=\"headerlink\" title=\"根路由\"></a>根路由</h2>跟路由有点特殊，它一定要先加载一个组件才能渲染，也就是说，在跟路由不能使用按需加载方式，不过这个没关系，根路由用于基础路径，在所有模块都必须加载，所以他的 “需” 其实作用不大。</li>\n</ul>\n<h1 id=\"jsx-定义按需加载路由\"><a href=\"#jsx-定义按需加载路由\" class=\"headerlink\" title=\"jsx 定义按需加载路由\"></a>jsx 定义按需加载路由</h1><p>虽然官方推荐使用对象去定义，但是jsx语法看上去更清晰点，所以还是使用jsx演示，方法很简单，就是把 组件的 props.component 换成 props.getComponent ，函数还是上述例子的函数（记得根路由不要使用getComponent）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Router history=&#123;history&#125;&gt;</span><br><span class=\"line\">  &lt;Route path=<span class=\"string\">\"/\"</span> component=&#123;App&#125;&gt;</span><br><span class=\"line\">    &lt;Route path=<span class=\"string\">\"home\"</span> getComponent=&#123;(location, callback) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"built_in\">require</span>.ensure([], <span class=\"built_in\">require</span> =&gt; &#123;</span><br><span class=\"line\">        callback(<span class=\"literal\">null</span>, <span class=\"built_in\">require</span>(<span class=\"string\">'modules/home'</span>))</span><br><span class=\"line\">      &#125;, <span class=\"string\">'home'</span>)  </span><br><span class=\"line\">    &#125;&#125;&gt;&lt;/Route&gt;</span><br><span class=\"line\">    &lt;Route path=<span class=\"string\">\"blog\"</span> getComponent=&#123;(location, callback) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"built_in\">require</span>.ensure([], <span class=\"built_in\">require</span> =&gt; &#123;</span><br><span class=\"line\">        callback(<span class=\"literal\">null</span>, <span class=\"built_in\">require</span>(<span class=\"string\">'modules/blog'</span>))</span><br><span class=\"line\">      &#125;, <span class=\"string\">'blog'</span>)  </span><br><span class=\"line\">    &#125;&#125;&gt;&lt;/Route&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/Route&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>Router&gt;</span><br></pre></td></tr></table></figure>\n<p>看上去很乱有木有，在jsx中写那么多 js 感觉真难看，把 js 独立出来就是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> home = <span class=\"function\">(<span class=\"params\">location, callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">require</span>.ensure([], <span class=\"built_in\">require</span> =&gt; &#123;</span><br><span class=\"line\">    callback(<span class=\"literal\">null</span>, <span class=\"built_in\">require</span>(<span class=\"string\">'modules/home'</span>))</span><br><span class=\"line\">  &#125;, <span class=\"string\">'home'</span>)  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> blog = <span class=\"function\">(<span class=\"params\">location, callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">require</span>.ensure([], <span class=\"built_in\">require</span> =&gt; &#123;</span><br><span class=\"line\">    callback(<span class=\"literal\">null</span>, <span class=\"built_in\">require</span>(<span class=\"string\">'modules/blog'</span>))</span><br><span class=\"line\">  &#125;, <span class=\"string\">'blog'</span>)  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;Router history=&#123;history&#125;&gt;</span><br><span class=\"line\">  &lt;Route path=<span class=\"string\">\"/\"</span> component=&#123;App&#125;&gt;</span><br><span class=\"line\">    &lt;Route path=<span class=\"string\">\"home\"</span> getComponent=&#123;home&#125;&gt;&lt;/Route&gt;</span><br><span class=\"line\">    &lt;Route path=<span class=\"string\">\"blog\"</span> getComponent=&#123;blog&#125;&gt;&lt;/Route&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/Route&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>Router&gt;</span><br></pre></td></tr></table></figure>\n<p>这样整理一下，就好看多了</p>\n<hr>\n<p><strong>注意</strong>: 或许有人会想，上面重复代码超级多，能不能用一个函数生成器去生成这些重复的函数呢？代码更进一步优化，比如:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ensureModule = <span class=\"function\">(<span class=\"params\">name, entry</span>) =&gt;</span> (location, callback) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">require</span>.ensure([], <span class=\"built_in\">require</span> =&gt; &#123;</span><br><span class=\"line\">    callback(<span class=\"literal\">null</span>, <span class=\"built_in\">require</span>(entry))</span><br><span class=\"line\">  &#125;, name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;Router history=&#123;history&#125;&gt;</span><br><span class=\"line\">  &lt;Route path=<span class=\"string\">\"/\"</span> component=&#123;App&#125;&gt;</span><br><span class=\"line\">    &lt;Route path=<span class=\"string\">\"home\"</span> getComponent=&#123;ensureModule(<span class=\"string\">'home'</span>, <span class=\"string\">'modules/home'</span>)&#125;&gt;&lt;/Route&gt;</span><br><span class=\"line\">    &lt;Route path=<span class=\"string\">\"blog\"</span> getComponent=&#123;ensureModule(<span class=\"string\">'blog'</span>, <span class=\"string\">'modules/blog'</span>)&#125;&gt;&lt;/Route&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/Route&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>Router&gt;</span><br></pre></td></tr></table></figure></p>\n<p>答案是：不能。这样看起来代码没有任何问题，好像更优雅的样子，但是经过亲自实践后，不行！！因为 require函数太特别了，他是webpack底层用于加载模块，所以必须明确的声明模块名，<strong>require函数在这里只能接受字符串，不能接受变量</strong> 。所以还是忍忍算了</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://webpack.docschina.org/guides/code-splitting/\" target=\"_blank\" rel=\"noopener\">webpack官网</a></p>\n"},{"title":"webpack 文件打包机制","date":"2018-07-09T07:23:00.000Z","_content":"\n\n```js\n// dist/index.xxxx.js\n(function(modules) {\n  // 已经加载过的模块\n  var installedModules = {};\n\n  // 模块加载函数\n  function __webpack_require__(moduleId) {\n    if(installedModules[moduleId]) {\n      return installedModules[moduleId].exports;\n    }\n    var module = installedModules[moduleId] = {\n      i: moduleId,\n      l: false,\n      exports: {}\n    };\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    module.l = true;\n    return module.exports;\n  }\n  return __webpack_require__(__webpack_require__.s = 3);\n})([\n/* 0 */\n(function(module, exports, __webpack_require__) {\n  var util = __webpack_require__(1);\n  console.log(util);\n  module.exports = \"index 2\";\n}),\n/* 1 */\n(function(module, exports) {\n  module.exports = \"Hello World\";\n}),\n/* 2 */\n(function(module, exports, __webpack_require__) {\n  var index2 = __webpack_require__(0);\n  index2 = __webpack_require__(0);\n  var util = __webpack_require__(1);\n  console.log(index2);\n  console.log(util);\n}),\n/* 3 */\n(function(module, exports, __webpack_require__) {\n  module.exports = __webpack_require__(2);\n})]);\n```\n\n将相对无关的代码剔除掉后，剩下主要的代码：\n\n- 首先 webpack 将所有模块(可以简单理解成文件)包裹于一个函数中，并传入默认参数，这里有三个文件再加上一个入口模块一共四个模块，将它们放入一个数组中，取名为 modules，并通过数组的下标来作为 moduleId。\n- 将 modules 传入一个自执行函数中，自执行函数中包含一个 `installedModules` 已经加载过的模块和一个模块加载函数，最后加载入口模块并返回。\n- `__webpack_require__` 模块加载，先判断 `installedModules` 是否已加载，加载过了就直接返回 `exports` 数据，没有加载过该模块就通过 `modules[moduleId].call(module.exports, module, module.exports, __webpack_require__)` 执行模块并且将 `module.exports` 给返回。\n\n很简单是不是，有些点需要注意的是：\n- 每个模块 webpack 只会加载一次,所以重复加载的模块只会执行一次，加载过的模块会放到 `installedModules`，下次需要需要该模块的值就直接从里面拿了。\n- 模块的 id 直接通过数组下标去一一对应的，这样能保证简单且唯一，通过其它方式比如文件名或文件路径的方式就比较麻烦，因为文件名可能出现重名，不唯一，文件路径则会增大文件体积，并且将路径暴露给前端，不够安全。\n- `modules[moduleId].call(module.exports, module, module.exports, __webpack_require__)` 保证了模块加载时 this 的指向 `module.exports` 并且传入默认参数，很简单，不过多解释。\n\n[深入理解 webpack 文件打包机制](https://github.com/happylindz/blog/issues/6)\n","source":"_posts/webpack打包原理.md","raw":"---\ntitle: webpack 文件打包机制\ndate: 2018-07-09 15:23:00\ntags: [webpack]\ncategories: 前端工程\n---\n\n\n```js\n// dist/index.xxxx.js\n(function(modules) {\n  // 已经加载过的模块\n  var installedModules = {};\n\n  // 模块加载函数\n  function __webpack_require__(moduleId) {\n    if(installedModules[moduleId]) {\n      return installedModules[moduleId].exports;\n    }\n    var module = installedModules[moduleId] = {\n      i: moduleId,\n      l: false,\n      exports: {}\n    };\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    module.l = true;\n    return module.exports;\n  }\n  return __webpack_require__(__webpack_require__.s = 3);\n})([\n/* 0 */\n(function(module, exports, __webpack_require__) {\n  var util = __webpack_require__(1);\n  console.log(util);\n  module.exports = \"index 2\";\n}),\n/* 1 */\n(function(module, exports) {\n  module.exports = \"Hello World\";\n}),\n/* 2 */\n(function(module, exports, __webpack_require__) {\n  var index2 = __webpack_require__(0);\n  index2 = __webpack_require__(0);\n  var util = __webpack_require__(1);\n  console.log(index2);\n  console.log(util);\n}),\n/* 3 */\n(function(module, exports, __webpack_require__) {\n  module.exports = __webpack_require__(2);\n})]);\n```\n\n将相对无关的代码剔除掉后，剩下主要的代码：\n\n- 首先 webpack 将所有模块(可以简单理解成文件)包裹于一个函数中，并传入默认参数，这里有三个文件再加上一个入口模块一共四个模块，将它们放入一个数组中，取名为 modules，并通过数组的下标来作为 moduleId。\n- 将 modules 传入一个自执行函数中，自执行函数中包含一个 `installedModules` 已经加载过的模块和一个模块加载函数，最后加载入口模块并返回。\n- `__webpack_require__` 模块加载，先判断 `installedModules` 是否已加载，加载过了就直接返回 `exports` 数据，没有加载过该模块就通过 `modules[moduleId].call(module.exports, module, module.exports, __webpack_require__)` 执行模块并且将 `module.exports` 给返回。\n\n很简单是不是，有些点需要注意的是：\n- 每个模块 webpack 只会加载一次,所以重复加载的模块只会执行一次，加载过的模块会放到 `installedModules`，下次需要需要该模块的值就直接从里面拿了。\n- 模块的 id 直接通过数组下标去一一对应的，这样能保证简单且唯一，通过其它方式比如文件名或文件路径的方式就比较麻烦，因为文件名可能出现重名，不唯一，文件路径则会增大文件体积，并且将路径暴露给前端，不够安全。\n- `modules[moduleId].call(module.exports, module, module.exports, __webpack_require__)` 保证了模块加载时 this 的指向 `module.exports` 并且传入默认参数，很简单，不过多解释。\n\n[深入理解 webpack 文件打包机制](https://github.com/happylindz/blog/issues/6)\n","slug":"webpack打包原理","published":1,"updated":"2018-07-29T12:11:11.671Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkwmni5500083pu72s90f5k6","content":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dist/index.xxxx.js</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">modules</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 已经加载过的模块</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> installedModules = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 模块加载函数</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__webpack_require__</span>(<span class=\"params\">moduleId</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(installedModules[moduleId]) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> installedModules[moduleId].exports;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> <span class=\"built_in\">module</span> = installedModules[moduleId] = &#123;</span><br><span class=\"line\">      i: moduleId,</span><br><span class=\"line\">      l: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      exports: &#123;&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    modules[moduleId].call(<span class=\"built_in\">module</span>.exports, <span class=\"built_in\">module</span>, <span class=\"built_in\">module</span>.exports, __webpack_require__);</span><br><span class=\"line\">    <span class=\"built_in\">module</span>.l = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">module</span>.exports;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> __webpack_require__(__webpack_require__.s = <span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;)([</span><br><span class=\"line\"><span class=\"comment\">/* 0 */</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, exports, __webpack_require__</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> util = __webpack_require__(<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(util);</span><br><span class=\"line\">  <span class=\"built_in\">module</span>.exports = <span class=\"string\">\"index 2\"</span>;</span><br><span class=\"line\">&#125;),</span><br><span class=\"line\"><span class=\"comment\">/* 1 */</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, exports</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">module</span>.exports = <span class=\"string\">\"Hello World\"</span>;</span><br><span class=\"line\">&#125;),</span><br><span class=\"line\"><span class=\"comment\">/* 2 */</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, exports, __webpack_require__</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> index2 = __webpack_require__(<span class=\"number\">0</span>);</span><br><span class=\"line\">  index2 = __webpack_require__(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> util = __webpack_require__(<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(index2);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(util);</span><br><span class=\"line\">&#125;),</span><br><span class=\"line\"><span class=\"comment\">/* 3 */</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, exports, __webpack_require__</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">module</span>.exports = __webpack_require__(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;)]);</span><br></pre></td></tr></table></figure>\n<p>将相对无关的代码剔除掉后，剩下主要的代码：</p>\n<ul>\n<li>首先 webpack 将所有模块(可以简单理解成文件)包裹于一个函数中，并传入默认参数，这里有三个文件再加上一个入口模块一共四个模块，将它们放入一个数组中，取名为 modules，并通过数组的下标来作为 moduleId。</li>\n<li>将 modules 传入一个自执行函数中，自执行函数中包含一个 <code>installedModules</code> 已经加载过的模块和一个模块加载函数，最后加载入口模块并返回。</li>\n<li><code>__webpack_require__</code> 模块加载，先判断 <code>installedModules</code> 是否已加载，加载过了就直接返回 <code>exports</code> 数据，没有加载过该模块就通过 <code>modules[moduleId].call(module.exports, module, module.exports, __webpack_require__)</code> 执行模块并且将 <code>module.exports</code> 给返回。</li>\n</ul>\n<p>很简单是不是，有些点需要注意的是：</p>\n<ul>\n<li>每个模块 webpack 只会加载一次,所以重复加载的模块只会执行一次，加载过的模块会放到 <code>installedModules</code>，下次需要需要该模块的值就直接从里面拿了。</li>\n<li>模块的 id 直接通过数组下标去一一对应的，这样能保证简单且唯一，通过其它方式比如文件名或文件路径的方式就比较麻烦，因为文件名可能出现重名，不唯一，文件路径则会增大文件体积，并且将路径暴露给前端，不够安全。</li>\n<li><code>modules[moduleId].call(module.exports, module, module.exports, __webpack_require__)</code> 保证了模块加载时 this 的指向 <code>module.exports</code> 并且传入默认参数，很简单，不过多解释。</li>\n</ul>\n<p><a href=\"https://github.com/happylindz/blog/issues/6\" target=\"_blank\" rel=\"noopener\">深入理解 webpack 文件打包机制</a></p>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dist/index.xxxx.js</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">modules</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 已经加载过的模块</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> installedModules = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 模块加载函数</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__webpack_require__</span>(<span class=\"params\">moduleId</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(installedModules[moduleId]) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> installedModules[moduleId].exports;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> <span class=\"built_in\">module</span> = installedModules[moduleId] = &#123;</span><br><span class=\"line\">      i: moduleId,</span><br><span class=\"line\">      l: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      exports: &#123;&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    modules[moduleId].call(<span class=\"built_in\">module</span>.exports, <span class=\"built_in\">module</span>, <span class=\"built_in\">module</span>.exports, __webpack_require__);</span><br><span class=\"line\">    <span class=\"built_in\">module</span>.l = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">module</span>.exports;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> __webpack_require__(__webpack_require__.s = <span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;)([</span><br><span class=\"line\"><span class=\"comment\">/* 0 */</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, exports, __webpack_require__</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> util = __webpack_require__(<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(util);</span><br><span class=\"line\">  <span class=\"built_in\">module</span>.exports = <span class=\"string\">\"index 2\"</span>;</span><br><span class=\"line\">&#125;),</span><br><span class=\"line\"><span class=\"comment\">/* 1 */</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, exports</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">module</span>.exports = <span class=\"string\">\"Hello World\"</span>;</span><br><span class=\"line\">&#125;),</span><br><span class=\"line\"><span class=\"comment\">/* 2 */</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, exports, __webpack_require__</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> index2 = __webpack_require__(<span class=\"number\">0</span>);</span><br><span class=\"line\">  index2 = __webpack_require__(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> util = __webpack_require__(<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(index2);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(util);</span><br><span class=\"line\">&#125;),</span><br><span class=\"line\"><span class=\"comment\">/* 3 */</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, exports, __webpack_require__</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">module</span>.exports = __webpack_require__(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;)]);</span><br></pre></td></tr></table></figure>\n<p>将相对无关的代码剔除掉后，剩下主要的代码：</p>\n<ul>\n<li>首先 webpack 将所有模块(可以简单理解成文件)包裹于一个函数中，并传入默认参数，这里有三个文件再加上一个入口模块一共四个模块，将它们放入一个数组中，取名为 modules，并通过数组的下标来作为 moduleId。</li>\n<li>将 modules 传入一个自执行函数中，自执行函数中包含一个 <code>installedModules</code> 已经加载过的模块和一个模块加载函数，最后加载入口模块并返回。</li>\n<li><code>__webpack_require__</code> 模块加载，先判断 <code>installedModules</code> 是否已加载，加载过了就直接返回 <code>exports</code> 数据，没有加载过该模块就通过 <code>modules[moduleId].call(module.exports, module, module.exports, __webpack_require__)</code> 执行模块并且将 <code>module.exports</code> 给返回。</li>\n</ul>\n<p>很简单是不是，有些点需要注意的是：</p>\n<ul>\n<li>每个模块 webpack 只会加载一次,所以重复加载的模块只会执行一次，加载过的模块会放到 <code>installedModules</code>，下次需要需要该模块的值就直接从里面拿了。</li>\n<li>模块的 id 直接通过数组下标去一一对应的，这样能保证简单且唯一，通过其它方式比如文件名或文件路径的方式就比较麻烦，因为文件名可能出现重名，不唯一，文件路径则会增大文件体积，并且将路径暴露给前端，不够安全。</li>\n<li><code>modules[moduleId].call(module.exports, module, module.exports, __webpack_require__)</code> 保证了模块加载时 this 的指向 <code>module.exports</code> 并且传入默认参数，很简单，不过多解释。</li>\n</ul>\n<p><a href=\"https://github.com/happylindz/blog/issues/6\" target=\"_blank\" rel=\"noopener\">深入理解 webpack 文件打包机制</a></p>\n"},{"title":"webpack 缓存","date":"2018-07-10T07:23:00.000Z","_content":"# webpack 缓存\nwebpack 中进行持久化缓存的呢，我们需要做到以下两点：\n- 保证 hash 值的**唯一性**，即为每个打包后的资源生成一个独一无二的 hash 值，只要打包内容不一致，那么 hash 值就不一致。\n- 保证 hash 值的**稳定性**，我们需要做到修改某个模块的时候，只有受影响的打包后文件 hash 值改变，与该模块无关的打包文件 hash 值不变。\n\nhash 文件名是实现持久化缓存的第一步，目前 webpack 有两种计算 hash 的方式([hash] 和 [chunkhash])\n- hash 代表每次 webpack 在编译的过程中会生成唯一的 hash 值，在项目中任何一个文件改动后就会被重新创建，然后 webpack 计算新的 hash 值。\n- chunkhash 是根据模块计算出来的 hash 值，所以某个文件的改动只会影响它本身的 hash 值，不会影响其他文件。\n\n所以如果你只是单纯地将所有内容打包成同一个文件，那么 hash 就能够满足你了，如果你的项目涉及到拆包，分模块进行加载等等，那么你需要用 chunkhash，来保证每次更新之后只有相关的文件 hash 值发生改变。\n\n所以我们在一份具有持久化缓存的 webpack 配置应该长这样：\n```js\n// 通过 config/webpack.config.js 打包\nconst path = require('path');\nconst webpack = require('webpack');\n\nmodule.exports = {\n    entry: {\n        index: './src/index.js',\n    },\n    output: {\n        filename: '[name].[chunkhash].js',\n        chunkFilename: '[name].[chunkhash].js',\n        path: path.resolve(__dirname, 'dist')\n    }\n};\n```\n\n上面代码的含义就是：以 index.js 为入口，将所有的代码全部打包成一个文件取名为 index.xxxx.js 并放到 dist 目录下，现在我们可以在每次更新项目的时候做到生成新命名的文件了。\n\n如果是应付简单的场景，这样做就够了，但是在大型多页面应用中，我们往往需要对页面进行性能优化：\n\n- 分离业务代码和第三方的代码：之所以将业务代码和第三方代码分离出来，是因为业务代码更新频率高，而第三方代码更新迭代速度慢，所以我们将第三方代码(库，框架)进行抽离，这样可以充分利用浏览器的缓存来加载第三方库。\n- 按需加载：比如在使用 React-Router 的时候，当用户需要访问到某个路由的时候再去加载对应的组件，那么用户没有必要在一开始的时候就将所有的路由组件下载到本地。\n- 在多页面应用中，我们往往可以将公共模块进行抽离，比如 header, footer 等等，这样页面在进行跳转的时候这些公共模块因为存在于缓存里，就可以直接进行加载了，而不是再进行网络请求了。\n\n那么如何进行拆包，分模块进行加载，这就需要 webpack 内置插件：CommonsChunkPlugin，下面我将通过一个例子，来诠释 webpack 该如何进行配置。\n\n```js\n// src/pageA.js\nimport componentA from './common/componentA';\n\n// 使用到 jquery 第三方库，需要抽离，避免业务打包文件过大\nimport $ from 'jquery';\n\n// 加载 css 文件，一部分为公共样式，一部分为独有样式，需要抽离\nimport './css/common.css'\nimport './css/pageA.css';\n\nconsole.log(componentA);\nconsole.log($.trim('    do something   '));\n\n// src/pageB.js\n// 页面 A 和 B 都用到了公共模块 componentA，需要抽离，避免重复加载\nimport componentA from './common/componentA';\nimport componentB from './common/componentB';\nimport './css/common.css'\nimport './css/pageB.css';\n\nconsole.log(componentA);\nconsole.log(componentB);\n\n// 用到异步加载模块 asyncComponent，需要抽离，加载首屏速度\ndocument.getElementById('xxxxx').addEventListener('click', () => {\n  import( /* webpackChunkName: \"async\" */\n    './common/asyncComponent.js').then((async) => {\n      async();\n  })\n})\n\n// 公共模块基本长这样\nexport default \"component X\";\n```\n上面的页面内容基本简单涉及到了我们拆分模块的三种模式：拆分公共库，按需加载和拆分公共模块。那么接下来要来配置 webpack：\n\n```js\nconst path = require('path');\nconst webpack = require('webpack');\nconst ExtractTextPlugin = require('extract-text-webpack-plugin');\nmodule.exports = {\n  entry: {\n    pageA: [path.resolve(__dirname, './src/pageA.js')],\n    pageB: path.resolve(__dirname, './src/pageB.js'),\n  },\n  output: {\n    path: path.resolve(__dirname, './dist'),\n    filename: 'js/[name].[chunkhash:8].js',\n    chunkFilename: 'js/[name].[chunkhash:8].js'\n  },\n  module: {\n    rules: [\n      {\n        // 用正则去匹配要用该 loader 转换的 CSS 文件\n        test: /\\.css$/,\n        use: ExtractTextPlugin.extract({\n          fallback: \"style-loader\",\n          use: [\"css-loader\"]\n        })  \n      }\n    ]\n  },\n  plugins: [\n    new webpack.optimize.CommonsChunkPlugin({\n      name: 'common',\n      minChunks: 2,\n    }),\n    new webpack.optimize.CommonsChunkPlugin({\n      name: 'vendor',\n      minChunks: ({ resource }) => (\n        resource && resource.indexOf('node_modules') >= 0 && resource.match(/\\.js$/)\n      )\n    }),\n    new ExtractTextPlugin({\n      filename: `css/[name].[chunkhash:8].css`,\n    }),\n  ]\n}\n```\n\n第一个 CommonsChunkPlugin 用于抽离公共模块，相当于是说 webpack 大佬，如果你看到某个模块被加载两次即以上，那么请你帮我移到 common chunk 里面，这里 minChunks 为 2，粒度拆解最细，你可以根据自己的实际情况，看选择是用多少次模块才将它们抽离。\n\n第二个 CommonsChunkPlugin 用来提取第三方代码，将它们进行抽离，判断资源是否来自 node_modules，如果是，则说明是第三方模块，那就将它们抽离。相当于是告诉 webpack 大佬，如果你看见某些模块是来自 node_modules 目录的，并且名字是 .js 结尾的话，麻烦把他们都移到 vendor chunk 里去，如果 vendor chunk 不存在的话，就创建一个新的。\n\n这样配置有什么好处，随着业务的增长，我们依赖的第三方库代码很可能会越来越多，如果我们专门配置一个入口来存放第三方代码，这时候我们的 webpack.config.js 就会变成：\n\n```js\n// 不利于拓展\nmodule.exports = {\n  entry: {\n    app: './src/main.js',\n    vendor: [\n      'vue',\n      'axio',\n      'vue-router',\n      'vuex',\n      // more\n    ],\n  },\n}\n```\n第三个 ExtractTextPlugin 插件用于将 css 从打包好的 js 文件中抽离，生成独立的 css 文件，想象一下，当你只是修改了下样式，并没有修改页面的功能逻辑，你肯定不希望你的 js 文件 hash 值变化，你肯定是希望 css 和 js 能够相互分开，且互不影响。\n\n运行 webpack 后可以看到打包之后的效果:\n\n```\n├── css\n│   ├── common.2beb7387.css\n│   ├── pageA.d178426d.css\n│   └── pageB.33931188.css\n└── js\n    ├── async.03f28faf.js\n    ├── common.2beb7387.js\n    ├── pageA.d178426d.js\n    ├── pageB.33931188.js\n    └── vendor.22a1d956.js\n```\n可以看出 css 和 js 已经分离，并且我们对模块进行了拆分，保证了模块 chunk 的唯一性，当你每次更新代码的时候，会生成不一样的 hash 值。\n\n唯一性有了，那么我们需要保证 hash 值的稳定性，试想下这样的场景，你肯定不希望你修改某部分的代码(模块，css)导致了文件的 hash 值全变了，那么显然是不明智的，那么我们去做到 hash 值变化最小化呢？\n\n换句话说，我们就要找出 webpack 编译中会导致缓存失效的因素，想办法去解决或优化它？影响 chunkhash 值变化主要由以下四个部分引起的：\n- 包含模块的源代码\n- webpack 用于启动运行的 runtime 代码\n- webpack 生成的模块 moduleid(包括包含模块 id 和被引用的依赖模块 id)\n- chunkID\n\n这四部分只要有任意部分发生变化，生成的分块文件就不一样了，缓存也就会失效，下面就从四个部分一一介绍：\n## 一、源代码变化：\n显然不用多说，缓存必须要刷新，不然就有问题了\n## 二、webpack 启动运行的 runtime 代码：\n\n\n```js\nmodule.exports = {\n  // ...\n  plugins: [\n    // ...\n    // 放到其他的 CommonsChunkPlugin 后面\n    new webpack.optimize.CommonsChunkPlugin({\n      name: 'runtime',\n      minChunks: Infinity,\n    }),\n  ]\n}\n```\n\n\n## 三、webpack 生成的模块 moduleid\n\n```js\nmodule.exports = {\n  plugins: [\n    new webpack.HashedModuleIdsPlugin(),\n    // 放在最前面\n    // ...\n  ]\n}\n```\n## 四、chunkID\n实际情况中分块的个数的顺序在多次编译之间大多都是固定的, 不太容易发生变化。\n\n这里涉及的只是比较基础的模块拆分，还有一些其它情况没有考虑到，比如异步加载组件中包含公共模块，可以再次将公共模块进行抽离。形成异步公共 chunk 模块。有想深入学习的可以看这篇文章：[Webpack 大法之 Code Splitting](https://zhuanlan.zhihu.com/p/26710831)\n\n# webpack 做缓存的一些注意点\n- CSS 文件 hash 值失效的问题\n- 不建议线上发布使用 DllPlugin 插件\n\n## CSS 文件 hash 值失效的问题：\nExtractTextPlugin 有个比较严重的问题，那就是它生成文件名所用的[chunkhash]是直接取自于引用该 css 代码段的 js chunk ；换句话说，如果我只是修改 css 代码段，而不动 js 代码，那么最后生成出来的 css 文件名依然没有变化。\n\n所以我们需要将 ExtractTextPlugin 中的 chunkhash 改为 contenthash，顾名思义，contenthash 代表的是文本文件内容的 hash 值，也就是只有 style 文件的 hash 值。这样编译出来的 js 和 css 文件就有独立的 hash 值了。\n\n\n```js\nmodule.exports = {\n  plugins: [\n    // ...\n    new ExtractTextPlugin({\n      filename: `css/[name].[contenthash:8].css`,\n    }),\n  ]\n}\n```\n\n## 不建议线上发布使用 DllPlugin 插件\n我认为的正确的姿势是：\n\n像 React、Vue 这样整体性偏强的库，可以生成 vendor 第三方库来去做缓存，因为你一般技术体系是固定的，一个站点里面基本上都会用到统一技术体系，所以生成 vendor 库用于缓存。\n像 antd、lodash 这种功能性组件库，可以通过 tree shaking 来进行消除，只保留有用的代码，千万不要直接打到 vendor 第三方库里，不然你将大量执行无用的代码。\n\n# 参考：\n[webpack 持久化缓存实践](https://github.com/happylindz/blog/issues/7)","source":"_posts/webpack缓存.md","raw":"---\ntitle: webpack 缓存\ndate: 2018-07-10 15:23:00\ntags: [webpack, 缓存]\ncategories: 前端工程\n---\n# webpack 缓存\nwebpack 中进行持久化缓存的呢，我们需要做到以下两点：\n- 保证 hash 值的**唯一性**，即为每个打包后的资源生成一个独一无二的 hash 值，只要打包内容不一致，那么 hash 值就不一致。\n- 保证 hash 值的**稳定性**，我们需要做到修改某个模块的时候，只有受影响的打包后文件 hash 值改变，与该模块无关的打包文件 hash 值不变。\n\nhash 文件名是实现持久化缓存的第一步，目前 webpack 有两种计算 hash 的方式([hash] 和 [chunkhash])\n- hash 代表每次 webpack 在编译的过程中会生成唯一的 hash 值，在项目中任何一个文件改动后就会被重新创建，然后 webpack 计算新的 hash 值。\n- chunkhash 是根据模块计算出来的 hash 值，所以某个文件的改动只会影响它本身的 hash 值，不会影响其他文件。\n\n所以如果你只是单纯地将所有内容打包成同一个文件，那么 hash 就能够满足你了，如果你的项目涉及到拆包，分模块进行加载等等，那么你需要用 chunkhash，来保证每次更新之后只有相关的文件 hash 值发生改变。\n\n所以我们在一份具有持久化缓存的 webpack 配置应该长这样：\n```js\n// 通过 config/webpack.config.js 打包\nconst path = require('path');\nconst webpack = require('webpack');\n\nmodule.exports = {\n    entry: {\n        index: './src/index.js',\n    },\n    output: {\n        filename: '[name].[chunkhash].js',\n        chunkFilename: '[name].[chunkhash].js',\n        path: path.resolve(__dirname, 'dist')\n    }\n};\n```\n\n上面代码的含义就是：以 index.js 为入口，将所有的代码全部打包成一个文件取名为 index.xxxx.js 并放到 dist 目录下，现在我们可以在每次更新项目的时候做到生成新命名的文件了。\n\n如果是应付简单的场景，这样做就够了，但是在大型多页面应用中，我们往往需要对页面进行性能优化：\n\n- 分离业务代码和第三方的代码：之所以将业务代码和第三方代码分离出来，是因为业务代码更新频率高，而第三方代码更新迭代速度慢，所以我们将第三方代码(库，框架)进行抽离，这样可以充分利用浏览器的缓存来加载第三方库。\n- 按需加载：比如在使用 React-Router 的时候，当用户需要访问到某个路由的时候再去加载对应的组件，那么用户没有必要在一开始的时候就将所有的路由组件下载到本地。\n- 在多页面应用中，我们往往可以将公共模块进行抽离，比如 header, footer 等等，这样页面在进行跳转的时候这些公共模块因为存在于缓存里，就可以直接进行加载了，而不是再进行网络请求了。\n\n那么如何进行拆包，分模块进行加载，这就需要 webpack 内置插件：CommonsChunkPlugin，下面我将通过一个例子，来诠释 webpack 该如何进行配置。\n\n```js\n// src/pageA.js\nimport componentA from './common/componentA';\n\n// 使用到 jquery 第三方库，需要抽离，避免业务打包文件过大\nimport $ from 'jquery';\n\n// 加载 css 文件，一部分为公共样式，一部分为独有样式，需要抽离\nimport './css/common.css'\nimport './css/pageA.css';\n\nconsole.log(componentA);\nconsole.log($.trim('    do something   '));\n\n// src/pageB.js\n// 页面 A 和 B 都用到了公共模块 componentA，需要抽离，避免重复加载\nimport componentA from './common/componentA';\nimport componentB from './common/componentB';\nimport './css/common.css'\nimport './css/pageB.css';\n\nconsole.log(componentA);\nconsole.log(componentB);\n\n// 用到异步加载模块 asyncComponent，需要抽离，加载首屏速度\ndocument.getElementById('xxxxx').addEventListener('click', () => {\n  import( /* webpackChunkName: \"async\" */\n    './common/asyncComponent.js').then((async) => {\n      async();\n  })\n})\n\n// 公共模块基本长这样\nexport default \"component X\";\n```\n上面的页面内容基本简单涉及到了我们拆分模块的三种模式：拆分公共库，按需加载和拆分公共模块。那么接下来要来配置 webpack：\n\n```js\nconst path = require('path');\nconst webpack = require('webpack');\nconst ExtractTextPlugin = require('extract-text-webpack-plugin');\nmodule.exports = {\n  entry: {\n    pageA: [path.resolve(__dirname, './src/pageA.js')],\n    pageB: path.resolve(__dirname, './src/pageB.js'),\n  },\n  output: {\n    path: path.resolve(__dirname, './dist'),\n    filename: 'js/[name].[chunkhash:8].js',\n    chunkFilename: 'js/[name].[chunkhash:8].js'\n  },\n  module: {\n    rules: [\n      {\n        // 用正则去匹配要用该 loader 转换的 CSS 文件\n        test: /\\.css$/,\n        use: ExtractTextPlugin.extract({\n          fallback: \"style-loader\",\n          use: [\"css-loader\"]\n        })  \n      }\n    ]\n  },\n  plugins: [\n    new webpack.optimize.CommonsChunkPlugin({\n      name: 'common',\n      minChunks: 2,\n    }),\n    new webpack.optimize.CommonsChunkPlugin({\n      name: 'vendor',\n      minChunks: ({ resource }) => (\n        resource && resource.indexOf('node_modules') >= 0 && resource.match(/\\.js$/)\n      )\n    }),\n    new ExtractTextPlugin({\n      filename: `css/[name].[chunkhash:8].css`,\n    }),\n  ]\n}\n```\n\n第一个 CommonsChunkPlugin 用于抽离公共模块，相当于是说 webpack 大佬，如果你看到某个模块被加载两次即以上，那么请你帮我移到 common chunk 里面，这里 minChunks 为 2，粒度拆解最细，你可以根据自己的实际情况，看选择是用多少次模块才将它们抽离。\n\n第二个 CommonsChunkPlugin 用来提取第三方代码，将它们进行抽离，判断资源是否来自 node_modules，如果是，则说明是第三方模块，那就将它们抽离。相当于是告诉 webpack 大佬，如果你看见某些模块是来自 node_modules 目录的，并且名字是 .js 结尾的话，麻烦把他们都移到 vendor chunk 里去，如果 vendor chunk 不存在的话，就创建一个新的。\n\n这样配置有什么好处，随着业务的增长，我们依赖的第三方库代码很可能会越来越多，如果我们专门配置一个入口来存放第三方代码，这时候我们的 webpack.config.js 就会变成：\n\n```js\n// 不利于拓展\nmodule.exports = {\n  entry: {\n    app: './src/main.js',\n    vendor: [\n      'vue',\n      'axio',\n      'vue-router',\n      'vuex',\n      // more\n    ],\n  },\n}\n```\n第三个 ExtractTextPlugin 插件用于将 css 从打包好的 js 文件中抽离，生成独立的 css 文件，想象一下，当你只是修改了下样式，并没有修改页面的功能逻辑，你肯定不希望你的 js 文件 hash 值变化，你肯定是希望 css 和 js 能够相互分开，且互不影响。\n\n运行 webpack 后可以看到打包之后的效果:\n\n```\n├── css\n│   ├── common.2beb7387.css\n│   ├── pageA.d178426d.css\n│   └── pageB.33931188.css\n└── js\n    ├── async.03f28faf.js\n    ├── common.2beb7387.js\n    ├── pageA.d178426d.js\n    ├── pageB.33931188.js\n    └── vendor.22a1d956.js\n```\n可以看出 css 和 js 已经分离，并且我们对模块进行了拆分，保证了模块 chunk 的唯一性，当你每次更新代码的时候，会生成不一样的 hash 值。\n\n唯一性有了，那么我们需要保证 hash 值的稳定性，试想下这样的场景，你肯定不希望你修改某部分的代码(模块，css)导致了文件的 hash 值全变了，那么显然是不明智的，那么我们去做到 hash 值变化最小化呢？\n\n换句话说，我们就要找出 webpack 编译中会导致缓存失效的因素，想办法去解决或优化它？影响 chunkhash 值变化主要由以下四个部分引起的：\n- 包含模块的源代码\n- webpack 用于启动运行的 runtime 代码\n- webpack 生成的模块 moduleid(包括包含模块 id 和被引用的依赖模块 id)\n- chunkID\n\n这四部分只要有任意部分发生变化，生成的分块文件就不一样了，缓存也就会失效，下面就从四个部分一一介绍：\n## 一、源代码变化：\n显然不用多说，缓存必须要刷新，不然就有问题了\n## 二、webpack 启动运行的 runtime 代码：\n\n\n```js\nmodule.exports = {\n  // ...\n  plugins: [\n    // ...\n    // 放到其他的 CommonsChunkPlugin 后面\n    new webpack.optimize.CommonsChunkPlugin({\n      name: 'runtime',\n      minChunks: Infinity,\n    }),\n  ]\n}\n```\n\n\n## 三、webpack 生成的模块 moduleid\n\n```js\nmodule.exports = {\n  plugins: [\n    new webpack.HashedModuleIdsPlugin(),\n    // 放在最前面\n    // ...\n  ]\n}\n```\n## 四、chunkID\n实际情况中分块的个数的顺序在多次编译之间大多都是固定的, 不太容易发生变化。\n\n这里涉及的只是比较基础的模块拆分，还有一些其它情况没有考虑到，比如异步加载组件中包含公共模块，可以再次将公共模块进行抽离。形成异步公共 chunk 模块。有想深入学习的可以看这篇文章：[Webpack 大法之 Code Splitting](https://zhuanlan.zhihu.com/p/26710831)\n\n# webpack 做缓存的一些注意点\n- CSS 文件 hash 值失效的问题\n- 不建议线上发布使用 DllPlugin 插件\n\n## CSS 文件 hash 值失效的问题：\nExtractTextPlugin 有个比较严重的问题，那就是它生成文件名所用的[chunkhash]是直接取自于引用该 css 代码段的 js chunk ；换句话说，如果我只是修改 css 代码段，而不动 js 代码，那么最后生成出来的 css 文件名依然没有变化。\n\n所以我们需要将 ExtractTextPlugin 中的 chunkhash 改为 contenthash，顾名思义，contenthash 代表的是文本文件内容的 hash 值，也就是只有 style 文件的 hash 值。这样编译出来的 js 和 css 文件就有独立的 hash 值了。\n\n\n```js\nmodule.exports = {\n  plugins: [\n    // ...\n    new ExtractTextPlugin({\n      filename: `css/[name].[contenthash:8].css`,\n    }),\n  ]\n}\n```\n\n## 不建议线上发布使用 DllPlugin 插件\n我认为的正确的姿势是：\n\n像 React、Vue 这样整体性偏强的库，可以生成 vendor 第三方库来去做缓存，因为你一般技术体系是固定的，一个站点里面基本上都会用到统一技术体系，所以生成 vendor 库用于缓存。\n像 antd、lodash 这种功能性组件库，可以通过 tree shaking 来进行消除，只保留有用的代码，千万不要直接打到 vendor 第三方库里，不然你将大量执行无用的代码。\n\n# 参考：\n[webpack 持久化缓存实践](https://github.com/happylindz/blog/issues/7)","slug":"webpack缓存","published":1,"updated":"2018-07-29T12:11:11.671Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkwmni58000a3pu78jps3nhc","content":"<h1 id=\"webpack-缓存\"><a href=\"#webpack-缓存\" class=\"headerlink\" title=\"webpack 缓存\"></a>webpack 缓存</h1><p>webpack 中进行持久化缓存的呢，我们需要做到以下两点：</p>\n<ul>\n<li>保证 hash 值的<strong>唯一性</strong>，即为每个打包后的资源生成一个独一无二的 hash 值，只要打包内容不一致，那么 hash 值就不一致。</li>\n<li>保证 hash 值的<strong>稳定性</strong>，我们需要做到修改某个模块的时候，只有受影响的打包后文件 hash 值改变，与该模块无关的打包文件 hash 值不变。</li>\n</ul>\n<p>hash 文件名是实现持久化缓存的第一步，目前 webpack 有两种计算 hash 的方式([hash] 和 [chunkhash])</p>\n<ul>\n<li>hash 代表每次 webpack 在编译的过程中会生成唯一的 hash 值，在项目中任何一个文件改动后就会被重新创建，然后 webpack 计算新的 hash 值。</li>\n<li>chunkhash 是根据模块计算出来的 hash 值，所以某个文件的改动只会影响它本身的 hash 值，不会影响其他文件。</li>\n</ul>\n<p>所以如果你只是单纯地将所有内容打包成同一个文件，那么 hash 就能够满足你了，如果你的项目涉及到拆包，分模块进行加载等等，那么你需要用 chunkhash，来保证每次更新之后只有相关的文件 hash 值发生改变。</p>\n<p>所以我们在一份具有持久化缓存的 webpack 配置应该长这样：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过 config/webpack.config.js 打包</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">        index: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename: <span class=\"string\">'[name].[chunkhash].js'</span>,</span><br><span class=\"line\">        chunkFilename: <span class=\"string\">'[name].[chunkhash].js'</span>,</span><br><span class=\"line\">        path: path.resolve(__dirname, <span class=\"string\">'dist'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>上面代码的含义就是：以 index.js 为入口，将所有的代码全部打包成一个文件取名为 index.xxxx.js 并放到 dist 目录下，现在我们可以在每次更新项目的时候做到生成新命名的文件了。</p>\n<p>如果是应付简单的场景，这样做就够了，但是在大型多页面应用中，我们往往需要对页面进行性能优化：</p>\n<ul>\n<li>分离业务代码和第三方的代码：之所以将业务代码和第三方代码分离出来，是因为业务代码更新频率高，而第三方代码更新迭代速度慢，所以我们将第三方代码(库，框架)进行抽离，这样可以充分利用浏览器的缓存来加载第三方库。</li>\n<li>按需加载：比如在使用 React-Router 的时候，当用户需要访问到某个路由的时候再去加载对应的组件，那么用户没有必要在一开始的时候就将所有的路由组件下载到本地。</li>\n<li>在多页面应用中，我们往往可以将公共模块进行抽离，比如 header, footer 等等，这样页面在进行跳转的时候这些公共模块因为存在于缓存里，就可以直接进行加载了，而不是再进行网络请求了。</li>\n</ul>\n<p>那么如何进行拆包，分模块进行加载，这就需要 webpack 内置插件：CommonsChunkPlugin，下面我将通过一个例子，来诠释 webpack 该如何进行配置。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/pageA.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> componentA <span class=\"keyword\">from</span> <span class=\"string\">'./common/componentA'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用到 jquery 第三方库，需要抽离，避免业务打包文件过大</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> $ <span class=\"keyword\">from</span> <span class=\"string\">'jquery'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 加载 css 文件，一部分为公共样式，一部分为独有样式，需要抽离</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./css/common.css'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./css/pageA.css'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(componentA);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log($.trim(<span class=\"string\">'    do something   '</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// src/pageB.js</span></span><br><span class=\"line\"><span class=\"comment\">// 页面 A 和 B 都用到了公共模块 componentA，需要抽离，避免重复加载</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> componentA <span class=\"keyword\">from</span> <span class=\"string\">'./common/componentA'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> componentB <span class=\"keyword\">from</span> <span class=\"string\">'./common/componentB'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./css/common.css'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./css/pageB.css'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(componentA);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(componentB);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 用到异步加载模块 asyncComponent，需要抽离，加载首屏速度</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'xxxxx'</span>).addEventListener(<span class=\"string\">'click'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">import</span>( <span class=\"comment\">/* webpackChunkName: \"async\" */</span></span><br><span class=\"line\">    <span class=\"string\">'./common/asyncComponent.js'</span>).then(<span class=\"function\">(<span class=\"params\"><span class=\"keyword\">async</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">async</span>();</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 公共模块基本长这样</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"string\">\"component X\"</span>;</span><br></pre></td></tr></table></figure>\n<p>上面的页面内容基本简单涉及到了我们拆分模块的三种模式：拆分公共库，按需加载和拆分公共模块。那么接下来要来配置 webpack：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> ExtractTextPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'extract-text-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    pageA: [path.resolve(__dirname, <span class=\"string\">'./src/pageA.js'</span>)],</span><br><span class=\"line\">    pageB: path.resolve(__dirname, <span class=\"string\">'./src/pageB.js'</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'./dist'</span>),</span><br><span class=\"line\">    filename: <span class=\"string\">'js/[name].[chunkhash:8].js'</span>,</span><br><span class=\"line\">    chunkFilename: <span class=\"string\">'js/[name].[chunkhash:8].js'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 用正则去匹配要用该 loader 转换的 CSS 文件</span></span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        use: ExtractTextPlugin.extract(&#123;</span><br><span class=\"line\">          fallback: <span class=\"string\">\"style-loader\"</span>,</span><br><span class=\"line\">          use: [<span class=\"string\">\"css-loader\"</span>]</span><br><span class=\"line\">        &#125;)  </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class=\"line\">      name: <span class=\"string\">'common'</span>,</span><br><span class=\"line\">      minChunks: <span class=\"number\">2</span>,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class=\"line\">      name: <span class=\"string\">'vendor'</span>,</span><br><span class=\"line\">      minChunks: <span class=\"function\">(<span class=\"params\">&#123; resource &#125;</span>) =&gt;</span> (</span><br><span class=\"line\">        resource &amp;&amp; resource.indexOf(<span class=\"string\">'node_modules'</span>) &gt;= <span class=\"number\">0</span> &amp;&amp; resource.match(<span class=\"regexp\">/\\.js$/</span>)</span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> ExtractTextPlugin(&#123;</span><br><span class=\"line\">      filename: <span class=\"string\">`css/[name].[chunkhash:8].css`</span>,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第一个 CommonsChunkPlugin 用于抽离公共模块，相当于是说 webpack 大佬，如果你看到某个模块被加载两次即以上，那么请你帮我移到 common chunk 里面，这里 minChunks 为 2，粒度拆解最细，你可以根据自己的实际情况，看选择是用多少次模块才将它们抽离。</p>\n<p>第二个 CommonsChunkPlugin 用来提取第三方代码，将它们进行抽离，判断资源是否来自 node_modules，如果是，则说明是第三方模块，那就将它们抽离。相当于是告诉 webpack 大佬，如果你看见某些模块是来自 node_modules 目录的，并且名字是 .js 结尾的话，麻烦把他们都移到 vendor chunk 里去，如果 vendor chunk 不存在的话，就创建一个新的。</p>\n<p>这样配置有什么好处，随着业务的增长，我们依赖的第三方库代码很可能会越来越多，如果我们专门配置一个入口来存放第三方代码，这时候我们的 webpack.config.js 就会变成：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 不利于拓展</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    app: <span class=\"string\">'./src/main.js'</span>,</span><br><span class=\"line\">    vendor: [</span><br><span class=\"line\">      <span class=\"string\">'vue'</span>,</span><br><span class=\"line\">      <span class=\"string\">'axio'</span>,</span><br><span class=\"line\">      <span class=\"string\">'vue-router'</span>,</span><br><span class=\"line\">      <span class=\"string\">'vuex'</span>,</span><br><span class=\"line\">      <span class=\"comment\">// more</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第三个 ExtractTextPlugin 插件用于将 css 从打包好的 js 文件中抽离，生成独立的 css 文件，想象一下，当你只是修改了下样式，并没有修改页面的功能逻辑，你肯定不希望你的 js 文件 hash 值变化，你肯定是希望 css 和 js 能够相互分开，且互不影响。</p>\n<p>运行 webpack 后可以看到打包之后的效果:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── css</span><br><span class=\"line\">│   ├── common.2beb7387.css</span><br><span class=\"line\">│   ├── pageA.d178426d.css</span><br><span class=\"line\">│   └── pageB.33931188.css</span><br><span class=\"line\">└── js</span><br><span class=\"line\">    ├── async.03f28faf.js</span><br><span class=\"line\">    ├── common.2beb7387.js</span><br><span class=\"line\">    ├── pageA.d178426d.js</span><br><span class=\"line\">    ├── pageB.33931188.js</span><br><span class=\"line\">    └── vendor.22a1d956.js</span><br></pre></td></tr></table></figure>\n<p>可以看出 css 和 js 已经分离，并且我们对模块进行了拆分，保证了模块 chunk 的唯一性，当你每次更新代码的时候，会生成不一样的 hash 值。</p>\n<p>唯一性有了，那么我们需要保证 hash 值的稳定性，试想下这样的场景，你肯定不希望你修改某部分的代码(模块，css)导致了文件的 hash 值全变了，那么显然是不明智的，那么我们去做到 hash 值变化最小化呢？</p>\n<p>换句话说，我们就要找出 webpack 编译中会导致缓存失效的因素，想办法去解决或优化它？影响 chunkhash 值变化主要由以下四个部分引起的：</p>\n<ul>\n<li>包含模块的源代码</li>\n<li>webpack 用于启动运行的 runtime 代码</li>\n<li>webpack 生成的模块 moduleid(包括包含模块 id 和被引用的依赖模块 id)</li>\n<li>chunkID</li>\n</ul>\n<p>这四部分只要有任意部分发生变化，生成的分块文件就不一样了，缓存也就会失效，下面就从四个部分一一介绍：</p>\n<h2 id=\"一、源代码变化：\"><a href=\"#一、源代码变化：\" class=\"headerlink\" title=\"一、源代码变化：\"></a>一、源代码变化：</h2><p>显然不用多说，缓存必须要刷新，不然就有问题了</p>\n<h2 id=\"二、webpack-启动运行的-runtime-代码：\"><a href=\"#二、webpack-启动运行的-runtime-代码：\" class=\"headerlink\" title=\"二、webpack 启动运行的 runtime 代码：\"></a>二、webpack 启动运行的 runtime 代码：</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"comment\">// 放到其他的 CommonsChunkPlugin 后面</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class=\"line\">      name: <span class=\"string\">'runtime'</span>,</span><br><span class=\"line\">      minChunks: <span class=\"literal\">Infinity</span>,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"三、webpack-生成的模块-moduleid\"><a href=\"#三、webpack-生成的模块-moduleid\" class=\"headerlink\" title=\"三、webpack 生成的模块 moduleid\"></a>三、webpack 生成的模块 moduleid</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.HashedModuleIdsPlugin(),</span><br><span class=\"line\">    <span class=\"comment\">// 放在最前面</span></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"四、chunkID\"><a href=\"#四、chunkID\" class=\"headerlink\" title=\"四、chunkID\"></a>四、chunkID</h2><p>实际情况中分块的个数的顺序在多次编译之间大多都是固定的, 不太容易发生变化。</p>\n<p>这里涉及的只是比较基础的模块拆分，还有一些其它情况没有考虑到，比如异步加载组件中包含公共模块，可以再次将公共模块进行抽离。形成异步公共 chunk 模块。有想深入学习的可以看这篇文章：<a href=\"https://zhuanlan.zhihu.com/p/26710831\" target=\"_blank\" rel=\"noopener\">Webpack 大法之 Code Splitting</a></p>\n<h1 id=\"webpack-做缓存的一些注意点\"><a href=\"#webpack-做缓存的一些注意点\" class=\"headerlink\" title=\"webpack 做缓存的一些注意点\"></a>webpack 做缓存的一些注意点</h1><ul>\n<li>CSS 文件 hash 值失效的问题</li>\n<li>不建议线上发布使用 DllPlugin 插件</li>\n</ul>\n<h2 id=\"CSS-文件-hash-值失效的问题：\"><a href=\"#CSS-文件-hash-值失效的问题：\" class=\"headerlink\" title=\"CSS 文件 hash 值失效的问题：\"></a>CSS 文件 hash 值失效的问题：</h2><p>ExtractTextPlugin 有个比较严重的问题，那就是它生成文件名所用的[chunkhash]是直接取自于引用该 css 代码段的 js chunk ；换句话说，如果我只是修改 css 代码段，而不动 js 代码，那么最后生成出来的 css 文件名依然没有变化。</p>\n<p>所以我们需要将 ExtractTextPlugin 中的 chunkhash 改为 contenthash，顾名思义，contenthash 代表的是文本文件内容的 hash 值，也就是只有 style 文件的 hash 值。这样编译出来的 js 和 css 文件就有独立的 hash 值了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> ExtractTextPlugin(&#123;</span><br><span class=\"line\">      filename: <span class=\"string\">`css/[name].[contenthash:8].css`</span>,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"不建议线上发布使用-DllPlugin-插件\"><a href=\"#不建议线上发布使用-DllPlugin-插件\" class=\"headerlink\" title=\"不建议线上发布使用 DllPlugin 插件\"></a>不建议线上发布使用 DllPlugin 插件</h2><p>我认为的正确的姿势是：</p>\n<p>像 React、Vue 这样整体性偏强的库，可以生成 vendor 第三方库来去做缓存，因为你一般技术体系是固定的，一个站点里面基本上都会用到统一技术体系，所以生成 vendor 库用于缓存。<br>像 antd、lodash 这种功能性组件库，可以通过 tree shaking 来进行消除，只保留有用的代码，千万不要直接打到 vendor 第三方库里，不然你将大量执行无用的代码。</p>\n<h1 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h1><p><a href=\"https://github.com/happylindz/blog/issues/7\" target=\"_blank\" rel=\"noopener\">webpack 持久化缓存实践</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"webpack-缓存\"><a href=\"#webpack-缓存\" class=\"headerlink\" title=\"webpack 缓存\"></a>webpack 缓存</h1><p>webpack 中进行持久化缓存的呢，我们需要做到以下两点：</p>\n<ul>\n<li>保证 hash 值的<strong>唯一性</strong>，即为每个打包后的资源生成一个独一无二的 hash 值，只要打包内容不一致，那么 hash 值就不一致。</li>\n<li>保证 hash 值的<strong>稳定性</strong>，我们需要做到修改某个模块的时候，只有受影响的打包后文件 hash 值改变，与该模块无关的打包文件 hash 值不变。</li>\n</ul>\n<p>hash 文件名是实现持久化缓存的第一步，目前 webpack 有两种计算 hash 的方式([hash] 和 [chunkhash])</p>\n<ul>\n<li>hash 代表每次 webpack 在编译的过程中会生成唯一的 hash 值，在项目中任何一个文件改动后就会被重新创建，然后 webpack 计算新的 hash 值。</li>\n<li>chunkhash 是根据模块计算出来的 hash 值，所以某个文件的改动只会影响它本身的 hash 值，不会影响其他文件。</li>\n</ul>\n<p>所以如果你只是单纯地将所有内容打包成同一个文件，那么 hash 就能够满足你了，如果你的项目涉及到拆包，分模块进行加载等等，那么你需要用 chunkhash，来保证每次更新之后只有相关的文件 hash 值发生改变。</p>\n<p>所以我们在一份具有持久化缓存的 webpack 配置应该长这样：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过 config/webpack.config.js 打包</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">        index: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename: <span class=\"string\">'[name].[chunkhash].js'</span>,</span><br><span class=\"line\">        chunkFilename: <span class=\"string\">'[name].[chunkhash].js'</span>,</span><br><span class=\"line\">        path: path.resolve(__dirname, <span class=\"string\">'dist'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>上面代码的含义就是：以 index.js 为入口，将所有的代码全部打包成一个文件取名为 index.xxxx.js 并放到 dist 目录下，现在我们可以在每次更新项目的时候做到生成新命名的文件了。</p>\n<p>如果是应付简单的场景，这样做就够了，但是在大型多页面应用中，我们往往需要对页面进行性能优化：</p>\n<ul>\n<li>分离业务代码和第三方的代码：之所以将业务代码和第三方代码分离出来，是因为业务代码更新频率高，而第三方代码更新迭代速度慢，所以我们将第三方代码(库，框架)进行抽离，这样可以充分利用浏览器的缓存来加载第三方库。</li>\n<li>按需加载：比如在使用 React-Router 的时候，当用户需要访问到某个路由的时候再去加载对应的组件，那么用户没有必要在一开始的时候就将所有的路由组件下载到本地。</li>\n<li>在多页面应用中，我们往往可以将公共模块进行抽离，比如 header, footer 等等，这样页面在进行跳转的时候这些公共模块因为存在于缓存里，就可以直接进行加载了，而不是再进行网络请求了。</li>\n</ul>\n<p>那么如何进行拆包，分模块进行加载，这就需要 webpack 内置插件：CommonsChunkPlugin，下面我将通过一个例子，来诠释 webpack 该如何进行配置。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/pageA.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> componentA <span class=\"keyword\">from</span> <span class=\"string\">'./common/componentA'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用到 jquery 第三方库，需要抽离，避免业务打包文件过大</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> $ <span class=\"keyword\">from</span> <span class=\"string\">'jquery'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 加载 css 文件，一部分为公共样式，一部分为独有样式，需要抽离</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./css/common.css'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./css/pageA.css'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(componentA);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log($.trim(<span class=\"string\">'    do something   '</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// src/pageB.js</span></span><br><span class=\"line\"><span class=\"comment\">// 页面 A 和 B 都用到了公共模块 componentA，需要抽离，避免重复加载</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> componentA <span class=\"keyword\">from</span> <span class=\"string\">'./common/componentA'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> componentB <span class=\"keyword\">from</span> <span class=\"string\">'./common/componentB'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./css/common.css'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./css/pageB.css'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(componentA);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(componentB);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 用到异步加载模块 asyncComponent，需要抽离，加载首屏速度</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'xxxxx'</span>).addEventListener(<span class=\"string\">'click'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">import</span>( <span class=\"comment\">/* webpackChunkName: \"async\" */</span></span><br><span class=\"line\">    <span class=\"string\">'./common/asyncComponent.js'</span>).then(<span class=\"function\">(<span class=\"params\"><span class=\"keyword\">async</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">async</span>();</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 公共模块基本长这样</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"string\">\"component X\"</span>;</span><br></pre></td></tr></table></figure>\n<p>上面的页面内容基本简单涉及到了我们拆分模块的三种模式：拆分公共库，按需加载和拆分公共模块。那么接下来要来配置 webpack：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> ExtractTextPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'extract-text-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    pageA: [path.resolve(__dirname, <span class=\"string\">'./src/pageA.js'</span>)],</span><br><span class=\"line\">    pageB: path.resolve(__dirname, <span class=\"string\">'./src/pageB.js'</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'./dist'</span>),</span><br><span class=\"line\">    filename: <span class=\"string\">'js/[name].[chunkhash:8].js'</span>,</span><br><span class=\"line\">    chunkFilename: <span class=\"string\">'js/[name].[chunkhash:8].js'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 用正则去匹配要用该 loader 转换的 CSS 文件</span></span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        use: ExtractTextPlugin.extract(&#123;</span><br><span class=\"line\">          fallback: <span class=\"string\">\"style-loader\"</span>,</span><br><span class=\"line\">          use: [<span class=\"string\">\"css-loader\"</span>]</span><br><span class=\"line\">        &#125;)  </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class=\"line\">      name: <span class=\"string\">'common'</span>,</span><br><span class=\"line\">      minChunks: <span class=\"number\">2</span>,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class=\"line\">      name: <span class=\"string\">'vendor'</span>,</span><br><span class=\"line\">      minChunks: <span class=\"function\">(<span class=\"params\">&#123; resource &#125;</span>) =&gt;</span> (</span><br><span class=\"line\">        resource &amp;&amp; resource.indexOf(<span class=\"string\">'node_modules'</span>) &gt;= <span class=\"number\">0</span> &amp;&amp; resource.match(<span class=\"regexp\">/\\.js$/</span>)</span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> ExtractTextPlugin(&#123;</span><br><span class=\"line\">      filename: <span class=\"string\">`css/[name].[chunkhash:8].css`</span>,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第一个 CommonsChunkPlugin 用于抽离公共模块，相当于是说 webpack 大佬，如果你看到某个模块被加载两次即以上，那么请你帮我移到 common chunk 里面，这里 minChunks 为 2，粒度拆解最细，你可以根据自己的实际情况，看选择是用多少次模块才将它们抽离。</p>\n<p>第二个 CommonsChunkPlugin 用来提取第三方代码，将它们进行抽离，判断资源是否来自 node_modules，如果是，则说明是第三方模块，那就将它们抽离。相当于是告诉 webpack 大佬，如果你看见某些模块是来自 node_modules 目录的，并且名字是 .js 结尾的话，麻烦把他们都移到 vendor chunk 里去，如果 vendor chunk 不存在的话，就创建一个新的。</p>\n<p>这样配置有什么好处，随着业务的增长，我们依赖的第三方库代码很可能会越来越多，如果我们专门配置一个入口来存放第三方代码，这时候我们的 webpack.config.js 就会变成：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 不利于拓展</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    app: <span class=\"string\">'./src/main.js'</span>,</span><br><span class=\"line\">    vendor: [</span><br><span class=\"line\">      <span class=\"string\">'vue'</span>,</span><br><span class=\"line\">      <span class=\"string\">'axio'</span>,</span><br><span class=\"line\">      <span class=\"string\">'vue-router'</span>,</span><br><span class=\"line\">      <span class=\"string\">'vuex'</span>,</span><br><span class=\"line\">      <span class=\"comment\">// more</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第三个 ExtractTextPlugin 插件用于将 css 从打包好的 js 文件中抽离，生成独立的 css 文件，想象一下，当你只是修改了下样式，并没有修改页面的功能逻辑，你肯定不希望你的 js 文件 hash 值变化，你肯定是希望 css 和 js 能够相互分开，且互不影响。</p>\n<p>运行 webpack 后可以看到打包之后的效果:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── css</span><br><span class=\"line\">│   ├── common.2beb7387.css</span><br><span class=\"line\">│   ├── pageA.d178426d.css</span><br><span class=\"line\">│   └── pageB.33931188.css</span><br><span class=\"line\">└── js</span><br><span class=\"line\">    ├── async.03f28faf.js</span><br><span class=\"line\">    ├── common.2beb7387.js</span><br><span class=\"line\">    ├── pageA.d178426d.js</span><br><span class=\"line\">    ├── pageB.33931188.js</span><br><span class=\"line\">    └── vendor.22a1d956.js</span><br></pre></td></tr></table></figure>\n<p>可以看出 css 和 js 已经分离，并且我们对模块进行了拆分，保证了模块 chunk 的唯一性，当你每次更新代码的时候，会生成不一样的 hash 值。</p>\n<p>唯一性有了，那么我们需要保证 hash 值的稳定性，试想下这样的场景，你肯定不希望你修改某部分的代码(模块，css)导致了文件的 hash 值全变了，那么显然是不明智的，那么我们去做到 hash 值变化最小化呢？</p>\n<p>换句话说，我们就要找出 webpack 编译中会导致缓存失效的因素，想办法去解决或优化它？影响 chunkhash 值变化主要由以下四个部分引起的：</p>\n<ul>\n<li>包含模块的源代码</li>\n<li>webpack 用于启动运行的 runtime 代码</li>\n<li>webpack 生成的模块 moduleid(包括包含模块 id 和被引用的依赖模块 id)</li>\n<li>chunkID</li>\n</ul>\n<p>这四部分只要有任意部分发生变化，生成的分块文件就不一样了，缓存也就会失效，下面就从四个部分一一介绍：</p>\n<h2 id=\"一、源代码变化：\"><a href=\"#一、源代码变化：\" class=\"headerlink\" title=\"一、源代码变化：\"></a>一、源代码变化：</h2><p>显然不用多说，缓存必须要刷新，不然就有问题了</p>\n<h2 id=\"二、webpack-启动运行的-runtime-代码：\"><a href=\"#二、webpack-启动运行的-runtime-代码：\" class=\"headerlink\" title=\"二、webpack 启动运行的 runtime 代码：\"></a>二、webpack 启动运行的 runtime 代码：</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"comment\">// 放到其他的 CommonsChunkPlugin 后面</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class=\"line\">      name: <span class=\"string\">'runtime'</span>,</span><br><span class=\"line\">      minChunks: <span class=\"literal\">Infinity</span>,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"三、webpack-生成的模块-moduleid\"><a href=\"#三、webpack-生成的模块-moduleid\" class=\"headerlink\" title=\"三、webpack 生成的模块 moduleid\"></a>三、webpack 生成的模块 moduleid</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.HashedModuleIdsPlugin(),</span><br><span class=\"line\">    <span class=\"comment\">// 放在最前面</span></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"四、chunkID\"><a href=\"#四、chunkID\" class=\"headerlink\" title=\"四、chunkID\"></a>四、chunkID</h2><p>实际情况中分块的个数的顺序在多次编译之间大多都是固定的, 不太容易发生变化。</p>\n<p>这里涉及的只是比较基础的模块拆分，还有一些其它情况没有考虑到，比如异步加载组件中包含公共模块，可以再次将公共模块进行抽离。形成异步公共 chunk 模块。有想深入学习的可以看这篇文章：<a href=\"https://zhuanlan.zhihu.com/p/26710831\" target=\"_blank\" rel=\"noopener\">Webpack 大法之 Code Splitting</a></p>\n<h1 id=\"webpack-做缓存的一些注意点\"><a href=\"#webpack-做缓存的一些注意点\" class=\"headerlink\" title=\"webpack 做缓存的一些注意点\"></a>webpack 做缓存的一些注意点</h1><ul>\n<li>CSS 文件 hash 值失效的问题</li>\n<li>不建议线上发布使用 DllPlugin 插件</li>\n</ul>\n<h2 id=\"CSS-文件-hash-值失效的问题：\"><a href=\"#CSS-文件-hash-值失效的问题：\" class=\"headerlink\" title=\"CSS 文件 hash 值失效的问题：\"></a>CSS 文件 hash 值失效的问题：</h2><p>ExtractTextPlugin 有个比较严重的问题，那就是它生成文件名所用的[chunkhash]是直接取自于引用该 css 代码段的 js chunk ；换句话说，如果我只是修改 css 代码段，而不动 js 代码，那么最后生成出来的 css 文件名依然没有变化。</p>\n<p>所以我们需要将 ExtractTextPlugin 中的 chunkhash 改为 contenthash，顾名思义，contenthash 代表的是文本文件内容的 hash 值，也就是只有 style 文件的 hash 值。这样编译出来的 js 和 css 文件就有独立的 hash 值了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> ExtractTextPlugin(&#123;</span><br><span class=\"line\">      filename: <span class=\"string\">`css/[name].[contenthash:8].css`</span>,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"不建议线上发布使用-DllPlugin-插件\"><a href=\"#不建议线上发布使用-DllPlugin-插件\" class=\"headerlink\" title=\"不建议线上发布使用 DllPlugin 插件\"></a>不建议线上发布使用 DllPlugin 插件</h2><p>我认为的正确的姿势是：</p>\n<p>像 React、Vue 这样整体性偏强的库，可以生成 vendor 第三方库来去做缓存，因为你一般技术体系是固定的，一个站点里面基本上都会用到统一技术体系，所以生成 vendor 库用于缓存。<br>像 antd、lodash 这种功能性组件库，可以通过 tree shaking 来进行消除，只保留有用的代码，千万不要直接打到 vendor 第三方库里，不然你将大量执行无用的代码。</p>\n<h1 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h1><p><a href=\"https://github.com/happylindz/blog/issues/7\" target=\"_blank\" rel=\"noopener\">webpack 持久化缓存实践</a></p>\n"},{"title":"前端异常监控","date":"2018-06-05T11:23:00.000Z","_content":"本文大致围绕下面几点展开讨论：\n\n- JS 处理异常的方式\n- 上报方式\n- 异常监控上报常见问题\n\n# JS 异常处理\n\n对于 Javascript 而言，我们面对的仅仅只是异常，异常的出现不会直接导致 JS 引擎崩溃，最多只会使当前执行的任务终止。\n\n- 当前代码块将作为一个任务压入任务队列中，JS 线程会不断地从任务队列中提取任务执行。\n- 当任务执行过程中出现异常，且异常没有捕获处理，则会一直沿着调用栈一层层向外抛出，最终终止当前任务的执行。\n- JS 线程会继续从任务队列中提取下一个任务继续执行。\n\n```html\n<script>\n  error\n  console.log('永远不会执行');\n</script>\n<script>\n  console.log('我继续执行')\n</script>\n```\n\n在对脚本错误进行上报之前，我们需要对异常进行处理，程序需要先感知到脚本错误的发生，然后再谈异常上报。\n\n脚本错误一般分为两种：语法错误，运行时错误。\n\n下面就谈谈几种异常监控的处理方式：\n\n## try-catch 异常处理\ntry-catch 在我们的代码中经常见到，通过给代码块进行 try-catch 进行包装后，当代码块发生出错时 catch 将能捕捉到错误的信息，页面也将可以继续执行。\n但是 try-catch 处理异常的能力有限，只能捕获捉到**运行时非异步错误**，对于**语法错误**和**异步错误**就显得无能为力，捕捉不到。\n\n示例：运行时错误\n```js\ntry {\n  error    // 未定义变量 \n} catch(e) {\n  console.log('我知道错误了');\n  console.log(e);\n}\n```\n一般语法错误在编辑器就会体现出来，常表现的错误信息为： `Uncaught SyntaxError: Invalid or unexpected token xxx` 这样。但是这种错误会直接抛出异常，常使程序崩溃，一般在编码时候容易观察得到。\n\n示例：异步错误\n```js\ntry {\n  setTimeout(() => {\n    error        // 异步错误\n  })\n} catch(e) {\n  console.log('我感知不到错误');\n  console.log(e);\n}\n```\n除非你在 setTimeout 函数中再套上一层 try-catch，否则就无法感知到其错误，但这样代码写起来比较啰嗦。\n\n\n## window.onerror 异常处理\n\nwindow.onerror 捕获异常能力比 try-catch 稍微强点，无论是异步还是非异步错误，onerror 都能捕获到运行时错误。\n\n示例：运行时同步错误\n```js\n * @param {String}  msg    错误信息\n * @param {String}  url    出错文件\n * @param {Number}  row    行号\n * @param {Number}  col    列号\n * @param {Object}  error  错误详细信息\n */\n window.onerror = function (msg, url, row, col, error) {\n  console.log('我知道错误了');\n  console.log({\n    msg,  url,  row, col, error\n  })\n  return true;\n};\nerror;\n```\n\n示例：异步错误\n```js\nwindow.onerror = function (msg, url, row, col, error) {\n  console.log('我知道异步错误了');\n  console.log({\n    msg,  url,  row, col, error\n  })\n  return true;\n};\nsetTimeout(() => {\n  error;\n});\n```\n然而 window.onerror 对于**语法错误**还是无能为力，所以我们在写代码的时候要尽可能避免语法错误的，不过一般这样的错误会使得整个页面崩溃，还是比较容易能够察觉到的。\n\n\n在实际的使用过程中，onerror 主要是来捕获预料之外的错误，而 try-catch 则是用来在可预见情况下监控特定的错误，两者结合使用更加高效。\n\n\n需要注意的是，window.onerror 函数只有在返回 true 的时候，异常才不会向上抛出，否则即使是知道异常的发生控制台还是会显示 Uncaught Error: xxxxx。\n\n\n关于 window.onerror 还有两点需要值得注意\n\n- 对于 onerror 这种全局捕获，最好写在所有 JS 脚本的前面，因为你无法保证你写的代码是否出错，如果写在后面，一旦发生错误的话是不会被 onerror 捕获到的。\n- 另外 onerror 是无法捕获到网络异常的错误。\n\n当我们遇到 `<img src=\"./404.png\">` 报 404 网络请求异常的时候，onerror 是无法帮助我们捕获到异常的。\n\n```html\n<script>\n  window.onerror = function (msg, url, row, col, error) {\n    console.log('我知道异步错误了');\n    console.log({\n      msg,  url,  row, col, error\n    })\n    return true;\n  };\n</script>\n<img src=\"./404.png\">\n```\n由于网络请求异常不会事件冒泡，因此必须在捕获阶段将其捕捉到才行，但是这种方式虽然可以捕捉到网络请求的异常，但是无法判断 HTTP 的状态是 404 还是其他比如 500 等等，所以还需要配合服务端日志才进行排查分析才可以。\n\n```html\n<script>\nwindow.addEventListener('error', (msg, url, row, col, error) => {\n  console.log('我知道 404 错误了');\n  console.log(\n    msg, url, row, col, error\n  );\n  return true;\n}, true);\n</script>\n<img src=\"./404.png\" alt=\"\">\n```\n\n这点知识还是需要知道，要不然用户访问网站，图片 CDN 无法服务，图片加载不出来而开发人员没有察觉就尴尬了。\n\n## Promise 错误\n\n通过 Promise 可以帮助我们解决异步回调地狱的问题，但是一旦 Promise 实例抛出异常而你没有用 catch 去捕获的话，onerror 或 try-catch 也无能为力，无法捕捉到错误。\n```js\nwindow.addEventListener('error', (msg, url, row, col, error) => {\n  console.log('我感知不到 promise 错误');\n  console.log(\n    msg, url, row, col, error\n  );\n}, true);\nPromise.reject('promise error');\nnew Promise((resolve, reject) => {\n  reject('promise error');\n});\nnew Promise((resolve) => {\n  resolve();\n}).then(() => {\n  throw 'promise error'\n});\n```\n虽然在写 Promise 实例的时候养成最后写上 catch 函数是个好习惯，但是代码写多了就容易糊涂，忘记写 catch。\n\n所以如果你的应用用到很多的 Promise 实例的话，特别是你在一些基于 promise 的异步库比如 axios 等一定要小心，因为你不知道什么时候这些异步请求会抛出异常而你并没有处理它，所以你最好添加一个 Promise 全局异常捕获事件 unhandledrejection。\n\n```js\nwindow.addEventListener(\"unhandledrejection\", function(e){\n  e.preventDefault()\n  console.log('我知道 promise 的错误了');\n  console.log(e.reason);\n  return true;\n});\nPromise.reject('promise error');\nnew Promise((resolve, reject) => {\n  reject('promise error');\n});\nnew Promise((resolve) => {\n  resolve();\n}).then(() => {\n  throw 'promise error'\n});\n```\n\n# 异常上报方式\n\n监控拿到报错信息之后，接下来就需要将捕捉到的错误信息发送到信息收集平台上，常用的发送形式主要有两种:\n\n- 通过 Ajax 发送数据\n- 动态创建 img 标签的形式\n\n实例 - 动态创建 img 标签进行上报\n```js\nfunction report(error) {\n  var reportUrl = 'http://xxxx/report';\n  new Image().src = reportUrl + 'error=' + error;\n}\n```\n\n\n# 参考\n[前端代码异常监控实战](https://github.com/happylindz/blog/issues/5)","source":"_posts/前端异常监控.md","raw":"---\ntitle: 前端异常监控\ndate: 2018-06-05 19:23:00\ntags: [前端, 异常监控, javascript]\ncategories: 前端\n---\n本文大致围绕下面几点展开讨论：\n\n- JS 处理异常的方式\n- 上报方式\n- 异常监控上报常见问题\n\n# JS 异常处理\n\n对于 Javascript 而言，我们面对的仅仅只是异常，异常的出现不会直接导致 JS 引擎崩溃，最多只会使当前执行的任务终止。\n\n- 当前代码块将作为一个任务压入任务队列中，JS 线程会不断地从任务队列中提取任务执行。\n- 当任务执行过程中出现异常，且异常没有捕获处理，则会一直沿着调用栈一层层向外抛出，最终终止当前任务的执行。\n- JS 线程会继续从任务队列中提取下一个任务继续执行。\n\n```html\n<script>\n  error\n  console.log('永远不会执行');\n</script>\n<script>\n  console.log('我继续执行')\n</script>\n```\n\n在对脚本错误进行上报之前，我们需要对异常进行处理，程序需要先感知到脚本错误的发生，然后再谈异常上报。\n\n脚本错误一般分为两种：语法错误，运行时错误。\n\n下面就谈谈几种异常监控的处理方式：\n\n## try-catch 异常处理\ntry-catch 在我们的代码中经常见到，通过给代码块进行 try-catch 进行包装后，当代码块发生出错时 catch 将能捕捉到错误的信息，页面也将可以继续执行。\n但是 try-catch 处理异常的能力有限，只能捕获捉到**运行时非异步错误**，对于**语法错误**和**异步错误**就显得无能为力，捕捉不到。\n\n示例：运行时错误\n```js\ntry {\n  error    // 未定义变量 \n} catch(e) {\n  console.log('我知道错误了');\n  console.log(e);\n}\n```\n一般语法错误在编辑器就会体现出来，常表现的错误信息为： `Uncaught SyntaxError: Invalid or unexpected token xxx` 这样。但是这种错误会直接抛出异常，常使程序崩溃，一般在编码时候容易观察得到。\n\n示例：异步错误\n```js\ntry {\n  setTimeout(() => {\n    error        // 异步错误\n  })\n} catch(e) {\n  console.log('我感知不到错误');\n  console.log(e);\n}\n```\n除非你在 setTimeout 函数中再套上一层 try-catch，否则就无法感知到其错误，但这样代码写起来比较啰嗦。\n\n\n## window.onerror 异常处理\n\nwindow.onerror 捕获异常能力比 try-catch 稍微强点，无论是异步还是非异步错误，onerror 都能捕获到运行时错误。\n\n示例：运行时同步错误\n```js\n * @param {String}  msg    错误信息\n * @param {String}  url    出错文件\n * @param {Number}  row    行号\n * @param {Number}  col    列号\n * @param {Object}  error  错误详细信息\n */\n window.onerror = function (msg, url, row, col, error) {\n  console.log('我知道错误了');\n  console.log({\n    msg,  url,  row, col, error\n  })\n  return true;\n};\nerror;\n```\n\n示例：异步错误\n```js\nwindow.onerror = function (msg, url, row, col, error) {\n  console.log('我知道异步错误了');\n  console.log({\n    msg,  url,  row, col, error\n  })\n  return true;\n};\nsetTimeout(() => {\n  error;\n});\n```\n然而 window.onerror 对于**语法错误**还是无能为力，所以我们在写代码的时候要尽可能避免语法错误的，不过一般这样的错误会使得整个页面崩溃，还是比较容易能够察觉到的。\n\n\n在实际的使用过程中，onerror 主要是来捕获预料之外的错误，而 try-catch 则是用来在可预见情况下监控特定的错误，两者结合使用更加高效。\n\n\n需要注意的是，window.onerror 函数只有在返回 true 的时候，异常才不会向上抛出，否则即使是知道异常的发生控制台还是会显示 Uncaught Error: xxxxx。\n\n\n关于 window.onerror 还有两点需要值得注意\n\n- 对于 onerror 这种全局捕获，最好写在所有 JS 脚本的前面，因为你无法保证你写的代码是否出错，如果写在后面，一旦发生错误的话是不会被 onerror 捕获到的。\n- 另外 onerror 是无法捕获到网络异常的错误。\n\n当我们遇到 `<img src=\"./404.png\">` 报 404 网络请求异常的时候，onerror 是无法帮助我们捕获到异常的。\n\n```html\n<script>\n  window.onerror = function (msg, url, row, col, error) {\n    console.log('我知道异步错误了');\n    console.log({\n      msg,  url,  row, col, error\n    })\n    return true;\n  };\n</script>\n<img src=\"./404.png\">\n```\n由于网络请求异常不会事件冒泡，因此必须在捕获阶段将其捕捉到才行，但是这种方式虽然可以捕捉到网络请求的异常，但是无法判断 HTTP 的状态是 404 还是其他比如 500 等等，所以还需要配合服务端日志才进行排查分析才可以。\n\n```html\n<script>\nwindow.addEventListener('error', (msg, url, row, col, error) => {\n  console.log('我知道 404 错误了');\n  console.log(\n    msg, url, row, col, error\n  );\n  return true;\n}, true);\n</script>\n<img src=\"./404.png\" alt=\"\">\n```\n\n这点知识还是需要知道，要不然用户访问网站，图片 CDN 无法服务，图片加载不出来而开发人员没有察觉就尴尬了。\n\n## Promise 错误\n\n通过 Promise 可以帮助我们解决异步回调地狱的问题，但是一旦 Promise 实例抛出异常而你没有用 catch 去捕获的话，onerror 或 try-catch 也无能为力，无法捕捉到错误。\n```js\nwindow.addEventListener('error', (msg, url, row, col, error) => {\n  console.log('我感知不到 promise 错误');\n  console.log(\n    msg, url, row, col, error\n  );\n}, true);\nPromise.reject('promise error');\nnew Promise((resolve, reject) => {\n  reject('promise error');\n});\nnew Promise((resolve) => {\n  resolve();\n}).then(() => {\n  throw 'promise error'\n});\n```\n虽然在写 Promise 实例的时候养成最后写上 catch 函数是个好习惯，但是代码写多了就容易糊涂，忘记写 catch。\n\n所以如果你的应用用到很多的 Promise 实例的话，特别是你在一些基于 promise 的异步库比如 axios 等一定要小心，因为你不知道什么时候这些异步请求会抛出异常而你并没有处理它，所以你最好添加一个 Promise 全局异常捕获事件 unhandledrejection。\n\n```js\nwindow.addEventListener(\"unhandledrejection\", function(e){\n  e.preventDefault()\n  console.log('我知道 promise 的错误了');\n  console.log(e.reason);\n  return true;\n});\nPromise.reject('promise error');\nnew Promise((resolve, reject) => {\n  reject('promise error');\n});\nnew Promise((resolve) => {\n  resolve();\n}).then(() => {\n  throw 'promise error'\n});\n```\n\n# 异常上报方式\n\n监控拿到报错信息之后，接下来就需要将捕捉到的错误信息发送到信息收集平台上，常用的发送形式主要有两种:\n\n- 通过 Ajax 发送数据\n- 动态创建 img 标签的形式\n\n实例 - 动态创建 img 标签进行上报\n```js\nfunction report(error) {\n  var reportUrl = 'http://xxxx/report';\n  new Image().src = reportUrl + 'error=' + error;\n}\n```\n\n\n# 参考\n[前端代码异常监控实战](https://github.com/happylindz/blog/issues/5)","slug":"前端异常监控","published":1,"updated":"2018-07-29T12:11:11.671Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkwmni5f000c3pu7cfi2v323","content":"<p>本文大致围绕下面几点展开讨论：</p>\n<ul>\n<li>JS 处理异常的方式</li>\n<li>上报方式</li>\n<li>异常监控上报常见问题</li>\n</ul>\n<h1 id=\"JS-异常处理\"><a href=\"#JS-异常处理\" class=\"headerlink\" title=\"JS 异常处理\"></a>JS 异常处理</h1><p>对于 Javascript 而言，我们面对的仅仅只是异常，异常的出现不会直接导致 JS 引擎崩溃，最多只会使当前执行的任务终止。</p>\n<ul>\n<li>当前代码块将作为一个任务压入任务队列中，JS 线程会不断地从任务队列中提取任务执行。</li>\n<li>当任务执行过程中出现异常，且异常没有捕获处理，则会一直沿着调用栈一层层向外抛出，最终终止当前任务的执行。</li>\n<li>JS 线程会继续从任务队列中提取下一个任务继续执行。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">  error</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'永远不会执行'</span>);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'我继续执行'</span>)</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在对脚本错误进行上报之前，我们需要对异常进行处理，程序需要先感知到脚本错误的发生，然后再谈异常上报。</p>\n<p>脚本错误一般分为两种：语法错误，运行时错误。</p>\n<p>下面就谈谈几种异常监控的处理方式：</p>\n<h2 id=\"try-catch-异常处理\"><a href=\"#try-catch-异常处理\" class=\"headerlink\" title=\"try-catch 异常处理\"></a>try-catch 异常处理</h2><p>try-catch 在我们的代码中经常见到，通过给代码块进行 try-catch 进行包装后，当代码块发生出错时 catch 将能捕捉到错误的信息，页面也将可以继续执行。<br>但是 try-catch 处理异常的能力有限，只能捕获捉到<strong>运行时非异步错误</strong>，对于<strong>语法错误</strong>和<strong>异步错误</strong>就显得无能为力，捕捉不到。</p>\n<p>示例：运行时错误<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  error    <span class=\"comment\">// 未定义变量 </span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'我知道错误了'</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(e);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>一般语法错误在编辑器就会体现出来，常表现的错误信息为： <code>Uncaught SyntaxError: Invalid or unexpected token xxx</code> 这样。但是这种错误会直接抛出异常，常使程序崩溃，一般在编码时候容易观察得到。</p>\n<p>示例：异步错误<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    error        <span class=\"comment\">// 异步错误</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'我感知不到错误'</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(e);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>除非你在 setTimeout 函数中再套上一层 try-catch，否则就无法感知到其错误，但这样代码写起来比较啰嗦。</p>\n<h2 id=\"window-onerror-异常处理\"><a href=\"#window-onerror-异常处理\" class=\"headerlink\" title=\"window.onerror 异常处理\"></a>window.onerror 异常处理</h2><p>window.onerror 捕获异常能力比 try-catch 稍微强点，无论是异步还是非异步错误，onerror 都能捕获到运行时错误。</p>\n<p>示例：运行时同步错误<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> * @param &#123;<span class=\"built_in\">String</span>&#125;  msg    错误信息</span><br><span class=\"line\"> * @param &#123;<span class=\"built_in\">String</span>&#125;  url    出错文件</span><br><span class=\"line\"> * @param &#123;<span class=\"built_in\">Number</span>&#125;  row    行号</span><br><span class=\"line\"> * @param &#123;<span class=\"built_in\">Number</span>&#125;  col    列号</span><br><span class=\"line\"> * @param &#123;<span class=\"built_in\">Object</span>&#125;  error  错误详细信息</span><br><span class=\"line\"> *<span class=\"regexp\">/</span></span><br><span class=\"line\"><span class=\"regexp\"> window.onerror = function (msg, url, row, col, error) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  console.log('我知道错误了');</span></span><br><span class=\"line\"><span class=\"regexp\">  console.log(&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    msg,  url,  row, col, error</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;)</span></span><br><span class=\"line\"><span class=\"regexp\">  return true;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;;</span></span><br><span class=\"line\"><span class=\"regexp\">error;</span></span><br></pre></td></tr></table></figure></p>\n<p>示例：异步错误<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">msg, url, row, col, error</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'我知道异步错误了'</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(&#123;</span><br><span class=\"line\">    msg,  url,  row, col, error</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  error;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>然而 window.onerror 对于<strong>语法错误</strong>还是无能为力，所以我们在写代码的时候要尽可能避免语法错误的，不过一般这样的错误会使得整个页面崩溃，还是比较容易能够察觉到的。</p>\n<p>在实际的使用过程中，onerror 主要是来捕获预料之外的错误，而 try-catch 则是用来在可预见情况下监控特定的错误，两者结合使用更加高效。</p>\n<p>需要注意的是，window.onerror 函数只有在返回 true 的时候，异常才不会向上抛出，否则即使是知道异常的发生控制台还是会显示 Uncaught Error: xxxxx。</p>\n<p>关于 window.onerror 还有两点需要值得注意</p>\n<ul>\n<li>对于 onerror 这种全局捕获，最好写在所有 JS 脚本的前面，因为你无法保证你写的代码是否出错，如果写在后面，一旦发生错误的话是不会被 onerror 捕获到的。</li>\n<li>另外 onerror 是无法捕获到网络异常的错误。</li>\n</ul>\n<p>当我们遇到 <code>&lt;img src=&quot;./404.png&quot;&gt;</code> 报 404 网络请求异常的时候，onerror 是无法帮助我们捕获到异常的。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"built_in\">window</span>.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">msg, url, row, col, error</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'我知道异步错误了'</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      msg,  url,  row, col, error</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;)</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./404.png\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>由于网络请求异常不会事件冒泡，因此必须在捕获阶段将其捕捉到才行，但是这种方式虽然可以捕捉到网络请求的异常，但是无法判断 HTTP 的状态是 404 还是其他比如 500 等等，所以还需要配合服务端日志才进行排查分析才可以。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'error'</span>, (msg, url, row, col, error) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'我知道 404 错误了'</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"built_in\">console</span>.log(</span></span><br><span class=\"line\"><span class=\"undefined\">    msg, url, row, col, error</span></span><br><span class=\"line\"><span class=\"undefined\">  );</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">&#125;, <span class=\"literal\">true</span>);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./404.png\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这点知识还是需要知道，要不然用户访问网站，图片 CDN 无法服务，图片加载不出来而开发人员没有察觉就尴尬了。</p>\n<h2 id=\"Promise-错误\"><a href=\"#Promise-错误\" class=\"headerlink\" title=\"Promise 错误\"></a>Promise 错误</h2><p>通过 Promise 可以帮助我们解决异步回调地狱的问题，但是一旦 Promise 实例抛出异常而你没有用 catch 去捕获的话，onerror 或 try-catch 也无能为力，无法捕捉到错误。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'error'</span>, (msg, url, row, col, error) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'我感知不到 promise 错误'</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">    msg, url, row, col, error</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;, <span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.reject(<span class=\"string\">'promise error'</span>);</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  reject(<span class=\"string\">'promise error'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  resolve();</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"string\">'promise error'</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>虽然在写 Promise 实例的时候养成最后写上 catch 函数是个好习惯，但是代码写多了就容易糊涂，忘记写 catch。</p>\n<p>所以如果你的应用用到很多的 Promise 实例的话，特别是你在一些基于 promise 的异步库比如 axios 等一定要小心，因为你不知道什么时候这些异步请求会抛出异常而你并没有处理它，所以你最好添加一个 Promise 全局异常捕获事件 unhandledrejection。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">\"unhandledrejection\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">  e.preventDefault()</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'我知道 promise 的错误了'</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(e.reason);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.reject(<span class=\"string\">'promise error'</span>);</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  reject(<span class=\"string\">'promise error'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  resolve();</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"string\">'promise error'</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h1 id=\"异常上报方式\"><a href=\"#异常上报方式\" class=\"headerlink\" title=\"异常上报方式\"></a>异常上报方式</h1><p>监控拿到报错信息之后，接下来就需要将捕捉到的错误信息发送到信息收集平台上，常用的发送形式主要有两种:</p>\n<ul>\n<li>通过 Ajax 发送数据</li>\n<li>动态创建 img 标签的形式</li>\n</ul>\n<p>实例 - 动态创建 img 标签进行上报<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">report</span>(<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> reportUrl = <span class=\"string\">'http://xxxx/report'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">new</span> Image().src = reportUrl + <span class=\"string\">'error='</span> + error;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://github.com/happylindz/blog/issues/5\" target=\"_blank\" rel=\"noopener\">前端代码异常监控实战</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文大致围绕下面几点展开讨论：</p>\n<ul>\n<li>JS 处理异常的方式</li>\n<li>上报方式</li>\n<li>异常监控上报常见问题</li>\n</ul>\n<h1 id=\"JS-异常处理\"><a href=\"#JS-异常处理\" class=\"headerlink\" title=\"JS 异常处理\"></a>JS 异常处理</h1><p>对于 Javascript 而言，我们面对的仅仅只是异常，异常的出现不会直接导致 JS 引擎崩溃，最多只会使当前执行的任务终止。</p>\n<ul>\n<li>当前代码块将作为一个任务压入任务队列中，JS 线程会不断地从任务队列中提取任务执行。</li>\n<li>当任务执行过程中出现异常，且异常没有捕获处理，则会一直沿着调用栈一层层向外抛出，最终终止当前任务的执行。</li>\n<li>JS 线程会继续从任务队列中提取下一个任务继续执行。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">  error</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'永远不会执行'</span>);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'我继续执行'</span>)</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在对脚本错误进行上报之前，我们需要对异常进行处理，程序需要先感知到脚本错误的发生，然后再谈异常上报。</p>\n<p>脚本错误一般分为两种：语法错误，运行时错误。</p>\n<p>下面就谈谈几种异常监控的处理方式：</p>\n<h2 id=\"try-catch-异常处理\"><a href=\"#try-catch-异常处理\" class=\"headerlink\" title=\"try-catch 异常处理\"></a>try-catch 异常处理</h2><p>try-catch 在我们的代码中经常见到，通过给代码块进行 try-catch 进行包装后，当代码块发生出错时 catch 将能捕捉到错误的信息，页面也将可以继续执行。<br>但是 try-catch 处理异常的能力有限，只能捕获捉到<strong>运行时非异步错误</strong>，对于<strong>语法错误</strong>和<strong>异步错误</strong>就显得无能为力，捕捉不到。</p>\n<p>示例：运行时错误<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  error    <span class=\"comment\">// 未定义变量 </span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'我知道错误了'</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(e);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>一般语法错误在编辑器就会体现出来，常表现的错误信息为： <code>Uncaught SyntaxError: Invalid or unexpected token xxx</code> 这样。但是这种错误会直接抛出异常，常使程序崩溃，一般在编码时候容易观察得到。</p>\n<p>示例：异步错误<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    error        <span class=\"comment\">// 异步错误</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'我感知不到错误'</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(e);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>除非你在 setTimeout 函数中再套上一层 try-catch，否则就无法感知到其错误，但这样代码写起来比较啰嗦。</p>\n<h2 id=\"window-onerror-异常处理\"><a href=\"#window-onerror-异常处理\" class=\"headerlink\" title=\"window.onerror 异常处理\"></a>window.onerror 异常处理</h2><p>window.onerror 捕获异常能力比 try-catch 稍微强点，无论是异步还是非异步错误，onerror 都能捕获到运行时错误。</p>\n<p>示例：运行时同步错误<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> * @param &#123;<span class=\"built_in\">String</span>&#125;  msg    错误信息</span><br><span class=\"line\"> * @param &#123;<span class=\"built_in\">String</span>&#125;  url    出错文件</span><br><span class=\"line\"> * @param &#123;<span class=\"built_in\">Number</span>&#125;  row    行号</span><br><span class=\"line\"> * @param &#123;<span class=\"built_in\">Number</span>&#125;  col    列号</span><br><span class=\"line\"> * @param &#123;<span class=\"built_in\">Object</span>&#125;  error  错误详细信息</span><br><span class=\"line\"> *<span class=\"regexp\">/</span></span><br><span class=\"line\"><span class=\"regexp\"> window.onerror = function (msg, url, row, col, error) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  console.log('我知道错误了');</span></span><br><span class=\"line\"><span class=\"regexp\">  console.log(&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    msg,  url,  row, col, error</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;)</span></span><br><span class=\"line\"><span class=\"regexp\">  return true;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;;</span></span><br><span class=\"line\"><span class=\"regexp\">error;</span></span><br></pre></td></tr></table></figure></p>\n<p>示例：异步错误<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">msg, url, row, col, error</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'我知道异步错误了'</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(&#123;</span><br><span class=\"line\">    msg,  url,  row, col, error</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  error;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>然而 window.onerror 对于<strong>语法错误</strong>还是无能为力，所以我们在写代码的时候要尽可能避免语法错误的，不过一般这样的错误会使得整个页面崩溃，还是比较容易能够察觉到的。</p>\n<p>在实际的使用过程中，onerror 主要是来捕获预料之外的错误，而 try-catch 则是用来在可预见情况下监控特定的错误，两者结合使用更加高效。</p>\n<p>需要注意的是，window.onerror 函数只有在返回 true 的时候，异常才不会向上抛出，否则即使是知道异常的发生控制台还是会显示 Uncaught Error: xxxxx。</p>\n<p>关于 window.onerror 还有两点需要值得注意</p>\n<ul>\n<li>对于 onerror 这种全局捕获，最好写在所有 JS 脚本的前面，因为你无法保证你写的代码是否出错，如果写在后面，一旦发生错误的话是不会被 onerror 捕获到的。</li>\n<li>另外 onerror 是无法捕获到网络异常的错误。</li>\n</ul>\n<p>当我们遇到 <code>&lt;img src=&quot;./404.png&quot;&gt;</code> 报 404 网络请求异常的时候，onerror 是无法帮助我们捕获到异常的。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"built_in\">window</span>.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">msg, url, row, col, error</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'我知道异步错误了'</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      msg,  url,  row, col, error</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;)</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./404.png\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>由于网络请求异常不会事件冒泡，因此必须在捕获阶段将其捕捉到才行，但是这种方式虽然可以捕捉到网络请求的异常，但是无法判断 HTTP 的状态是 404 还是其他比如 500 等等，所以还需要配合服务端日志才进行排查分析才可以。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'error'</span>, (msg, url, row, col, error) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'我知道 404 错误了'</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"built_in\">console</span>.log(</span></span><br><span class=\"line\"><span class=\"undefined\">    msg, url, row, col, error</span></span><br><span class=\"line\"><span class=\"undefined\">  );</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">&#125;, <span class=\"literal\">true</span>);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./404.png\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这点知识还是需要知道，要不然用户访问网站，图片 CDN 无法服务，图片加载不出来而开发人员没有察觉就尴尬了。</p>\n<h2 id=\"Promise-错误\"><a href=\"#Promise-错误\" class=\"headerlink\" title=\"Promise 错误\"></a>Promise 错误</h2><p>通过 Promise 可以帮助我们解决异步回调地狱的问题，但是一旦 Promise 实例抛出异常而你没有用 catch 去捕获的话，onerror 或 try-catch 也无能为力，无法捕捉到错误。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'error'</span>, (msg, url, row, col, error) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'我感知不到 promise 错误'</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">    msg, url, row, col, error</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;, <span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.reject(<span class=\"string\">'promise error'</span>);</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  reject(<span class=\"string\">'promise error'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  resolve();</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"string\">'promise error'</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>虽然在写 Promise 实例的时候养成最后写上 catch 函数是个好习惯，但是代码写多了就容易糊涂，忘记写 catch。</p>\n<p>所以如果你的应用用到很多的 Promise 实例的话，特别是你在一些基于 promise 的异步库比如 axios 等一定要小心，因为你不知道什么时候这些异步请求会抛出异常而你并没有处理它，所以你最好添加一个 Promise 全局异常捕获事件 unhandledrejection。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">\"unhandledrejection\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">  e.preventDefault()</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'我知道 promise 的错误了'</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(e.reason);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.reject(<span class=\"string\">'promise error'</span>);</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  reject(<span class=\"string\">'promise error'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  resolve();</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"string\">'promise error'</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h1 id=\"异常上报方式\"><a href=\"#异常上报方式\" class=\"headerlink\" title=\"异常上报方式\"></a>异常上报方式</h1><p>监控拿到报错信息之后，接下来就需要将捕捉到的错误信息发送到信息收集平台上，常用的发送形式主要有两种:</p>\n<ul>\n<li>通过 Ajax 发送数据</li>\n<li>动态创建 img 标签的形式</li>\n</ul>\n<p>实例 - 动态创建 img 标签进行上报<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">report</span>(<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> reportUrl = <span class=\"string\">'http://xxxx/report'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">new</span> Image().src = reportUrl + <span class=\"string\">'error='</span> + error;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://github.com/happylindz/blog/issues/5\" target=\"_blank\" rel=\"noopener\">前端代码异常监控实战</a></p>\n"},{"title":"前端缓存","date":"2018-06-13T06:31:52.000Z","_content":"\n# 缓存分类\n&emsp;&emsp;web缓存分为很多种，比如数据库缓存、代理服务器缓存、还有我们熟悉的CDN缓存，以及浏览器缓存。对于太多文字的阅读其实我是拒绝的，于是就画了个图来解释下。\n{% asset_img 1.PNG  浏览器通过代理服务器向源服务器发起请求的原理图 %}\n&emsp;&emsp;浏览器先向代理服务器发起Web请求，再将请求转发到源服务器。它属于共享缓存，所以很多地方都可以使用其缓存资源，因此对于节省流量有很大作用。\n&emsp;&emsp;浏览器缓存是将文件保存在客户端，在同一个会话过程中会检查缓存的副本是否足够新，在后退网页时，访问过的资源可以从浏览器缓存中拿出使用。通过减少服务器处理请求的数量，用户将获得更快的体验\n\n# 浏览器缓存\n页面的缓存状态是由header决定的，header的参数有四种：\n## Cache-Control\n### max-age\nmax-age（单位为s）指定设置缓存最大的有效时间，定义的是时间长短。当浏览器向服务器发送请求后，在max-age这段时间里浏览器就不会再向服务器发送请求了。\n\n我们来找个资源看下。比如shang.qq.com上的css资源，max-age=2592000，也就是说缓存有效期为2592000秒（也就是30天）。于是在30天内都会使用这个版本的资源，即使服务器上的资源发生了变化，浏览器也不会得到通知。max-age会覆盖掉Expires，后面会有讨论。\n{% asset_img 2.png  max-age请求图 %}\n### s-maxage\ns-maxage（单位为s）同max-age，只用于共享缓存（比如CDN缓存）。\n比如，当s-maxage=60时，在这60秒中，即使更新了CDN的内容，浏览器也不会进行请求。也就是说max-age用于普通缓存，而s-maxage用于代理缓存。如果存在s-maxage，则会覆盖掉max-age和Expires header。\n### public\npublic 指定响应会被缓存，并且在多用户间共享。也就是下图的意思。如果没有指定是public还是private，则默认为public。\n{% asset_img 3.png  public请求图 %}\n### private \nprivate 响应只作为私有的缓存（见下图），不能在用户间共享。如果要求HTTP认证，响应会自动设置为private。\n{% asset_img 4.png  private请求图 %}\n### no-cache\nno-cache 指定不缓存响应，表明资源不进行缓存，比如，\n{% asset_img 5.png  no-cache请求图 %}\n但是设置了no-cache之后并不代表浏览器不缓存，而是在缓存前要向服务器确认资源是否被更改。因此有的时候只设置no-cache防止缓存还是不够保险，还可以加上private指令，将过期时间设为过去的时间。\n### no-store\nno-store 绝对禁止缓存，一看就知道如果用了这个命令当然就是不会进行缓存啦～每次请求资源都要从服务器重新获取。\n### must-revalidate\nmust-revalidate指定如果页面是过期的，则去服务器进行获取。这个指令并不常用，就不做过多的讨论了。\n\n```bash\ns-maxage > max-age > Expires > Last-Modified\n```\n## Expires\n&emsp;&emsp;缓存过期时间，用来指定资源到期的时间，是服务器端的具体的时间点。也就是说，Expires=max-age + 请求时间，需要和Last-modified结合使用。但在上面我们提到过，cache-control的优先级更高。 Expires是Web服务器响应消息头字段，在响应http请求时告诉浏览器在过期时间前浏览器可以直接从浏览器缓存取数据，而无需再次请求。\n{% asset_img 6.png  Expires请求图 %}\n## Last-modified\n&emsp;&emsp;服务器端文件的最后修改时间，需要和cache-control共同使用，是检查服务器端资源是否更新的一种方式。当浏览器再次进行请求时，会向服务器传送If-Modified-Since报头，询问Last-Modified时间点之后资源是否被修改过。如果没有修改，则返回码为304，使用缓存；如果修改过，则再次去服务器请求资源，返回码和首次请求相同为200，资源为服务器最新资源。\n如下图，最后修改时间为2014年12月19日星期五2点50分47秒\n{% asset_img 7.png  Last-modified请求图 %}\n## ETag\n&emsp;&emsp;根据实体内容生成一段hash字符串，标识资源的状态，由服务端产生。浏览器会将这串字符串传回服务器，验证资源是否已经修改，如果没有修改，过程如下：\n{% asset_img 8.png  ETag请求图 %}\n使用ETag可以解决Last-modified存在的一些问题：\n- 某些服务器不能精确得到资源的最后修改时间，这样就无法通过最后修改时间判断资源是否更新。\n- 如果资源修改非常频繁，在秒以下的时间内进行修改，而Last-modified只能精确到秒。\n- 一些资源的最后修改时间改变了，但是内容没改变，使用ETag就认为资源还是没有修改的。\n\n# 使用缓存流程\n还是用图说话，下面是我所总结的从浏览器请求到展示资源的过程：\n{% asset_img 9.png  浏览器请求到展示资源的过程图 %}\n## cache-control指令使用\n{% asset_img 10.png  cache-control指令使用 %}\n\n\n\n# 参考\n[前端必须知道的http缓存 ](https://github.com/Pines-Cheng/blog/issues/5)\n[浅谈web缓存](http://www.alloyteam.com/2016/03/discussion-on-web-caching/)\n","source":"_posts/前端缓存.md","raw":"---\ntitle: 前端缓存\ndate: 2018-06-13 14:31:52\ntags: [前端, 缓存, http, 计算机网络]\n---\n\n# 缓存分类\n&emsp;&emsp;web缓存分为很多种，比如数据库缓存、代理服务器缓存、还有我们熟悉的CDN缓存，以及浏览器缓存。对于太多文字的阅读其实我是拒绝的，于是就画了个图来解释下。\n{% asset_img 1.PNG  浏览器通过代理服务器向源服务器发起请求的原理图 %}\n&emsp;&emsp;浏览器先向代理服务器发起Web请求，再将请求转发到源服务器。它属于共享缓存，所以很多地方都可以使用其缓存资源，因此对于节省流量有很大作用。\n&emsp;&emsp;浏览器缓存是将文件保存在客户端，在同一个会话过程中会检查缓存的副本是否足够新，在后退网页时，访问过的资源可以从浏览器缓存中拿出使用。通过减少服务器处理请求的数量，用户将获得更快的体验\n\n# 浏览器缓存\n页面的缓存状态是由header决定的，header的参数有四种：\n## Cache-Control\n### max-age\nmax-age（单位为s）指定设置缓存最大的有效时间，定义的是时间长短。当浏览器向服务器发送请求后，在max-age这段时间里浏览器就不会再向服务器发送请求了。\n\n我们来找个资源看下。比如shang.qq.com上的css资源，max-age=2592000，也就是说缓存有效期为2592000秒（也就是30天）。于是在30天内都会使用这个版本的资源，即使服务器上的资源发生了变化，浏览器也不会得到通知。max-age会覆盖掉Expires，后面会有讨论。\n{% asset_img 2.png  max-age请求图 %}\n### s-maxage\ns-maxage（单位为s）同max-age，只用于共享缓存（比如CDN缓存）。\n比如，当s-maxage=60时，在这60秒中，即使更新了CDN的内容，浏览器也不会进行请求。也就是说max-age用于普通缓存，而s-maxage用于代理缓存。如果存在s-maxage，则会覆盖掉max-age和Expires header。\n### public\npublic 指定响应会被缓存，并且在多用户间共享。也就是下图的意思。如果没有指定是public还是private，则默认为public。\n{% asset_img 3.png  public请求图 %}\n### private \nprivate 响应只作为私有的缓存（见下图），不能在用户间共享。如果要求HTTP认证，响应会自动设置为private。\n{% asset_img 4.png  private请求图 %}\n### no-cache\nno-cache 指定不缓存响应，表明资源不进行缓存，比如，\n{% asset_img 5.png  no-cache请求图 %}\n但是设置了no-cache之后并不代表浏览器不缓存，而是在缓存前要向服务器确认资源是否被更改。因此有的时候只设置no-cache防止缓存还是不够保险，还可以加上private指令，将过期时间设为过去的时间。\n### no-store\nno-store 绝对禁止缓存，一看就知道如果用了这个命令当然就是不会进行缓存啦～每次请求资源都要从服务器重新获取。\n### must-revalidate\nmust-revalidate指定如果页面是过期的，则去服务器进行获取。这个指令并不常用，就不做过多的讨论了。\n\n```bash\ns-maxage > max-age > Expires > Last-Modified\n```\n## Expires\n&emsp;&emsp;缓存过期时间，用来指定资源到期的时间，是服务器端的具体的时间点。也就是说，Expires=max-age + 请求时间，需要和Last-modified结合使用。但在上面我们提到过，cache-control的优先级更高。 Expires是Web服务器响应消息头字段，在响应http请求时告诉浏览器在过期时间前浏览器可以直接从浏览器缓存取数据，而无需再次请求。\n{% asset_img 6.png  Expires请求图 %}\n## Last-modified\n&emsp;&emsp;服务器端文件的最后修改时间，需要和cache-control共同使用，是检查服务器端资源是否更新的一种方式。当浏览器再次进行请求时，会向服务器传送If-Modified-Since报头，询问Last-Modified时间点之后资源是否被修改过。如果没有修改，则返回码为304，使用缓存；如果修改过，则再次去服务器请求资源，返回码和首次请求相同为200，资源为服务器最新资源。\n如下图，最后修改时间为2014年12月19日星期五2点50分47秒\n{% asset_img 7.png  Last-modified请求图 %}\n## ETag\n&emsp;&emsp;根据实体内容生成一段hash字符串，标识资源的状态，由服务端产生。浏览器会将这串字符串传回服务器，验证资源是否已经修改，如果没有修改，过程如下：\n{% asset_img 8.png  ETag请求图 %}\n使用ETag可以解决Last-modified存在的一些问题：\n- 某些服务器不能精确得到资源的最后修改时间，这样就无法通过最后修改时间判断资源是否更新。\n- 如果资源修改非常频繁，在秒以下的时间内进行修改，而Last-modified只能精确到秒。\n- 一些资源的最后修改时间改变了，但是内容没改变，使用ETag就认为资源还是没有修改的。\n\n# 使用缓存流程\n还是用图说话，下面是我所总结的从浏览器请求到展示资源的过程：\n{% asset_img 9.png  浏览器请求到展示资源的过程图 %}\n## cache-control指令使用\n{% asset_img 10.png  cache-control指令使用 %}\n\n\n\n# 参考\n[前端必须知道的http缓存 ](https://github.com/Pines-Cheng/blog/issues/5)\n[浅谈web缓存](http://www.alloyteam.com/2016/03/discussion-on-web-caching/)\n","slug":"前端缓存","published":1,"updated":"2018-07-29T12:11:11.672Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkwmni5g000e3pu7vo418amw","content":"<h1 id=\"缓存分类\"><a href=\"#缓存分类\" class=\"headerlink\" title=\"缓存分类\"></a>缓存分类</h1><p>&emsp;&emsp;web缓存分为很多种，比如数据库缓存、代理服务器缓存、还有我们熟悉的CDN缓存，以及浏览器缓存。对于太多文字的阅读其实我是拒绝的，于是就画了个图来解释下。<br><img src=\"/2018/06/13/前端缓存/1.PNG\" title=\"浏览器通过代理服务器向源服务器发起请求的原理图\"><br>&emsp;&emsp;浏览器先向代理服务器发起Web请求，再将请求转发到源服务器。它属于共享缓存，所以很多地方都可以使用其缓存资源，因此对于节省流量有很大作用。<br>&emsp;&emsp;浏览器缓存是将文件保存在客户端，在同一个会话过程中会检查缓存的副本是否足够新，在后退网页时，访问过的资源可以从浏览器缓存中拿出使用。通过减少服务器处理请求的数量，用户将获得更快的体验</p>\n<h1 id=\"浏览器缓存\"><a href=\"#浏览器缓存\" class=\"headerlink\" title=\"浏览器缓存\"></a>浏览器缓存</h1><p>页面的缓存状态是由header决定的，header的参数有四种：</p>\n<h2 id=\"Cache-Control\"><a href=\"#Cache-Control\" class=\"headerlink\" title=\"Cache-Control\"></a>Cache-Control</h2><h3 id=\"max-age\"><a href=\"#max-age\" class=\"headerlink\" title=\"max-age\"></a>max-age</h3><p>max-age（单位为s）指定设置缓存最大的有效时间，定义的是时间长短。当浏览器向服务器发送请求后，在max-age这段时间里浏览器就不会再向服务器发送请求了。</p>\n<p>我们来找个资源看下。比如shang.qq.com上的css资源，max-age=2592000，也就是说缓存有效期为2592000秒（也就是30天）。于是在30天内都会使用这个版本的资源，即使服务器上的资源发生了变化，浏览器也不会得到通知。max-age会覆盖掉Expires，后面会有讨论。<br><img src=\"/2018/06/13/前端缓存/2.png\" title=\"max-age请求图\"></p>\n<h3 id=\"s-maxage\"><a href=\"#s-maxage\" class=\"headerlink\" title=\"s-maxage\"></a>s-maxage</h3><p>s-maxage（单位为s）同max-age，只用于共享缓存（比如CDN缓存）。<br>比如，当s-maxage=60时，在这60秒中，即使更新了CDN的内容，浏览器也不会进行请求。也就是说max-age用于普通缓存，而s-maxage用于代理缓存。如果存在s-maxage，则会覆盖掉max-age和Expires header。</p>\n<h3 id=\"public\"><a href=\"#public\" class=\"headerlink\" title=\"public\"></a>public</h3><p>public 指定响应会被缓存，并且在多用户间共享。也就是下图的意思。如果没有指定是public还是private，则默认为public。<br><img src=\"/2018/06/13/前端缓存/3.png\" title=\"public请求图\"></p>\n<h3 id=\"private\"><a href=\"#private\" class=\"headerlink\" title=\"private\"></a>private</h3><p>private 响应只作为私有的缓存（见下图），不能在用户间共享。如果要求HTTP认证，响应会自动设置为private。<br><img src=\"/2018/06/13/前端缓存/4.png\" title=\"private请求图\"></p>\n<h3 id=\"no-cache\"><a href=\"#no-cache\" class=\"headerlink\" title=\"no-cache\"></a>no-cache</h3><p>no-cache 指定不缓存响应，表明资源不进行缓存，比如，<br><img src=\"/2018/06/13/前端缓存/5.png\" title=\"no-cache请求图\"><br>但是设置了no-cache之后并不代表浏览器不缓存，而是在缓存前要向服务器确认资源是否被更改。因此有的时候只设置no-cache防止缓存还是不够保险，还可以加上private指令，将过期时间设为过去的时间。</p>\n<h3 id=\"no-store\"><a href=\"#no-store\" class=\"headerlink\" title=\"no-store\"></a>no-store</h3><p>no-store 绝对禁止缓存，一看就知道如果用了这个命令当然就是不会进行缓存啦～每次请求资源都要从服务器重新获取。</p>\n<h3 id=\"must-revalidate\"><a href=\"#must-revalidate\" class=\"headerlink\" title=\"must-revalidate\"></a>must-revalidate</h3><p>must-revalidate指定如果页面是过期的，则去服务器进行获取。这个指令并不常用，就不做过多的讨论了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s-maxage &gt; max-age &gt; Expires &gt; Last-Modified</span><br></pre></td></tr></table></figure>\n<h2 id=\"Expires\"><a href=\"#Expires\" class=\"headerlink\" title=\"Expires\"></a>Expires</h2><p>&emsp;&emsp;缓存过期时间，用来指定资源到期的时间，是服务器端的具体的时间点。也就是说，Expires=max-age + 请求时间，需要和Last-modified结合使用。但在上面我们提到过，cache-control的优先级更高。 Expires是Web服务器响应消息头字段，在响应http请求时告诉浏览器在过期时间前浏览器可以直接从浏览器缓存取数据，而无需再次请求。<br><img src=\"/2018/06/13/前端缓存/6.png\" title=\"Expires请求图\"></p>\n<h2 id=\"Last-modified\"><a href=\"#Last-modified\" class=\"headerlink\" title=\"Last-modified\"></a>Last-modified</h2><p>&emsp;&emsp;服务器端文件的最后修改时间，需要和cache-control共同使用，是检查服务器端资源是否更新的一种方式。当浏览器再次进行请求时，会向服务器传送If-Modified-Since报头，询问Last-Modified时间点之后资源是否被修改过。如果没有修改，则返回码为304，使用缓存；如果修改过，则再次去服务器请求资源，返回码和首次请求相同为200，资源为服务器最新资源。<br>如下图，最后修改时间为2014年12月19日星期五2点50分47秒<br><img src=\"/2018/06/13/前端缓存/7.png\" title=\"Last-modified请求图\"></p>\n<h2 id=\"ETag\"><a href=\"#ETag\" class=\"headerlink\" title=\"ETag\"></a>ETag</h2><p>&emsp;&emsp;根据实体内容生成一段hash字符串，标识资源的状态，由服务端产生。浏览器会将这串字符串传回服务器，验证资源是否已经修改，如果没有修改，过程如下：<br><img src=\"/2018/06/13/前端缓存/8.png\" title=\"ETag请求图\"><br>使用ETag可以解决Last-modified存在的一些问题：</p>\n<ul>\n<li>某些服务器不能精确得到资源的最后修改时间，这样就无法通过最后修改时间判断资源是否更新。</li>\n<li>如果资源修改非常频繁，在秒以下的时间内进行修改，而Last-modified只能精确到秒。</li>\n<li>一些资源的最后修改时间改变了，但是内容没改变，使用ETag就认为资源还是没有修改的。</li>\n</ul>\n<h1 id=\"使用缓存流程\"><a href=\"#使用缓存流程\" class=\"headerlink\" title=\"使用缓存流程\"></a>使用缓存流程</h1><p>还是用图说话，下面是我所总结的从浏览器请求到展示资源的过程：<br><img src=\"/2018/06/13/前端缓存/9.png\" title=\"浏览器请求到展示资源的过程图\"></p>\n<h2 id=\"cache-control指令使用\"><a href=\"#cache-control指令使用\" class=\"headerlink\" title=\"cache-control指令使用\"></a>cache-control指令使用</h2><img src=\"/2018/06/13/前端缓存/10.png\" title=\"cache-control指令使用\">\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://github.com/Pines-Cheng/blog/issues/5\" target=\"_blank\" rel=\"noopener\">前端必须知道的http缓存 </a><br><a href=\"http://www.alloyteam.com/2016/03/discussion-on-web-caching/\" target=\"_blank\" rel=\"noopener\">浅谈web缓存</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"缓存分类\"><a href=\"#缓存分类\" class=\"headerlink\" title=\"缓存分类\"></a>缓存分类</h1><p>&emsp;&emsp;web缓存分为很多种，比如数据库缓存、代理服务器缓存、还有我们熟悉的CDN缓存，以及浏览器缓存。对于太多文字的阅读其实我是拒绝的，于是就画了个图来解释下。<br><img src=\"/2018/06/13/前端缓存/1.PNG\" title=\"浏览器通过代理服务器向源服务器发起请求的原理图\"><br>&emsp;&emsp;浏览器先向代理服务器发起Web请求，再将请求转发到源服务器。它属于共享缓存，所以很多地方都可以使用其缓存资源，因此对于节省流量有很大作用。<br>&emsp;&emsp;浏览器缓存是将文件保存在客户端，在同一个会话过程中会检查缓存的副本是否足够新，在后退网页时，访问过的资源可以从浏览器缓存中拿出使用。通过减少服务器处理请求的数量，用户将获得更快的体验</p>\n<h1 id=\"浏览器缓存\"><a href=\"#浏览器缓存\" class=\"headerlink\" title=\"浏览器缓存\"></a>浏览器缓存</h1><p>页面的缓存状态是由header决定的，header的参数有四种：</p>\n<h2 id=\"Cache-Control\"><a href=\"#Cache-Control\" class=\"headerlink\" title=\"Cache-Control\"></a>Cache-Control</h2><h3 id=\"max-age\"><a href=\"#max-age\" class=\"headerlink\" title=\"max-age\"></a>max-age</h3><p>max-age（单位为s）指定设置缓存最大的有效时间，定义的是时间长短。当浏览器向服务器发送请求后，在max-age这段时间里浏览器就不会再向服务器发送请求了。</p>\n<p>我们来找个资源看下。比如shang.qq.com上的css资源，max-age=2592000，也就是说缓存有效期为2592000秒（也就是30天）。于是在30天内都会使用这个版本的资源，即使服务器上的资源发生了变化，浏览器也不会得到通知。max-age会覆盖掉Expires，后面会有讨论。<br><img src=\"/2018/06/13/前端缓存/2.png\" title=\"max-age请求图\"></p>\n<h3 id=\"s-maxage\"><a href=\"#s-maxage\" class=\"headerlink\" title=\"s-maxage\"></a>s-maxage</h3><p>s-maxage（单位为s）同max-age，只用于共享缓存（比如CDN缓存）。<br>比如，当s-maxage=60时，在这60秒中，即使更新了CDN的内容，浏览器也不会进行请求。也就是说max-age用于普通缓存，而s-maxage用于代理缓存。如果存在s-maxage，则会覆盖掉max-age和Expires header。</p>\n<h3 id=\"public\"><a href=\"#public\" class=\"headerlink\" title=\"public\"></a>public</h3><p>public 指定响应会被缓存，并且在多用户间共享。也就是下图的意思。如果没有指定是public还是private，则默认为public。<br><img src=\"/2018/06/13/前端缓存/3.png\" title=\"public请求图\"></p>\n<h3 id=\"private\"><a href=\"#private\" class=\"headerlink\" title=\"private\"></a>private</h3><p>private 响应只作为私有的缓存（见下图），不能在用户间共享。如果要求HTTP认证，响应会自动设置为private。<br><img src=\"/2018/06/13/前端缓存/4.png\" title=\"private请求图\"></p>\n<h3 id=\"no-cache\"><a href=\"#no-cache\" class=\"headerlink\" title=\"no-cache\"></a>no-cache</h3><p>no-cache 指定不缓存响应，表明资源不进行缓存，比如，<br><img src=\"/2018/06/13/前端缓存/5.png\" title=\"no-cache请求图\"><br>但是设置了no-cache之后并不代表浏览器不缓存，而是在缓存前要向服务器确认资源是否被更改。因此有的时候只设置no-cache防止缓存还是不够保险，还可以加上private指令，将过期时间设为过去的时间。</p>\n<h3 id=\"no-store\"><a href=\"#no-store\" class=\"headerlink\" title=\"no-store\"></a>no-store</h3><p>no-store 绝对禁止缓存，一看就知道如果用了这个命令当然就是不会进行缓存啦～每次请求资源都要从服务器重新获取。</p>\n<h3 id=\"must-revalidate\"><a href=\"#must-revalidate\" class=\"headerlink\" title=\"must-revalidate\"></a>must-revalidate</h3><p>must-revalidate指定如果页面是过期的，则去服务器进行获取。这个指令并不常用，就不做过多的讨论了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s-maxage &gt; max-age &gt; Expires &gt; Last-Modified</span><br></pre></td></tr></table></figure>\n<h2 id=\"Expires\"><a href=\"#Expires\" class=\"headerlink\" title=\"Expires\"></a>Expires</h2><p>&emsp;&emsp;缓存过期时间，用来指定资源到期的时间，是服务器端的具体的时间点。也就是说，Expires=max-age + 请求时间，需要和Last-modified结合使用。但在上面我们提到过，cache-control的优先级更高。 Expires是Web服务器响应消息头字段，在响应http请求时告诉浏览器在过期时间前浏览器可以直接从浏览器缓存取数据，而无需再次请求。<br><img src=\"/2018/06/13/前端缓存/6.png\" title=\"Expires请求图\"></p>\n<h2 id=\"Last-modified\"><a href=\"#Last-modified\" class=\"headerlink\" title=\"Last-modified\"></a>Last-modified</h2><p>&emsp;&emsp;服务器端文件的最后修改时间，需要和cache-control共同使用，是检查服务器端资源是否更新的一种方式。当浏览器再次进行请求时，会向服务器传送If-Modified-Since报头，询问Last-Modified时间点之后资源是否被修改过。如果没有修改，则返回码为304，使用缓存；如果修改过，则再次去服务器请求资源，返回码和首次请求相同为200，资源为服务器最新资源。<br>如下图，最后修改时间为2014年12月19日星期五2点50分47秒<br><img src=\"/2018/06/13/前端缓存/7.png\" title=\"Last-modified请求图\"></p>\n<h2 id=\"ETag\"><a href=\"#ETag\" class=\"headerlink\" title=\"ETag\"></a>ETag</h2><p>&emsp;&emsp;根据实体内容生成一段hash字符串，标识资源的状态，由服务端产生。浏览器会将这串字符串传回服务器，验证资源是否已经修改，如果没有修改，过程如下：<br><img src=\"/2018/06/13/前端缓存/8.png\" title=\"ETag请求图\"><br>使用ETag可以解决Last-modified存在的一些问题：</p>\n<ul>\n<li>某些服务器不能精确得到资源的最后修改时间，这样就无法通过最后修改时间判断资源是否更新。</li>\n<li>如果资源修改非常频繁，在秒以下的时间内进行修改，而Last-modified只能精确到秒。</li>\n<li>一些资源的最后修改时间改变了，但是内容没改变，使用ETag就认为资源还是没有修改的。</li>\n</ul>\n<h1 id=\"使用缓存流程\"><a href=\"#使用缓存流程\" class=\"headerlink\" title=\"使用缓存流程\"></a>使用缓存流程</h1><p>还是用图说话，下面是我所总结的从浏览器请求到展示资源的过程：<br><img src=\"/2018/06/13/前端缓存/9.png\" title=\"浏览器请求到展示资源的过程图\"></p>\n<h2 id=\"cache-control指令使用\"><a href=\"#cache-control指令使用\" class=\"headerlink\" title=\"cache-control指令使用\"></a>cache-control指令使用</h2><img src=\"/2018/06/13/前端缓存/10.png\" title=\"cache-control指令使用\">\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://github.com/Pines-Cheng/blog/issues/5\" target=\"_blank\" rel=\"noopener\">前端必须知道的http缓存 </a><br><a href=\"http://www.alloyteam.com/2016/03/discussion-on-web-caching/\" target=\"_blank\" rel=\"noopener\">浅谈web缓存</a></p>\n"},{"title":"前端静态资源缓存策略","date":"2018-06-14T08:31:56.000Z","_content":"\n# 效果\n对于页面中静态资源（html/js/css/img/webfont），理想中的效果：\n\n- 页面以最快的速度获取到所有必须静态资源，渲染飞快；\n- 服务器上静态资源未更新时再次访问不请求服务器；\n- 服务器上静态资源更新时请求服务器最新资源，加载又飞快。\n\n总结下来也就是2个指标：\n\n- 静态资源加载速度\n- 页面渲染速度\n\n# 性能优化原则及分类\n| 优化方向 | 优化手段 |\n| - | - |\n| 请求数量 | 合并脚本和样式表，CSS Sprites，拆分初始化负载，划分主域 |\n| 请求带宽 | 开启GZip，精简JavaScript，移除重复脚本，图像优化 |\n| 缓存利用 | 使用CDN，使用外部JavaScript和CSS，添加Expires头，减少DNS查找，配置ETag，使AjaX可缓存 |\n| 页面结构 | 将样式表放在顶部，将脚本放在底部，尽早刷新文档的输出 |\n| 代码校验 | 避免CSS表达式，避免重定向 |\n\n目前大多数前端团队可以利用 yui compressor 或者 google closure compiler 等压缩工具很容易做到 精简Javascript 这条原则；同样的，也可以使用图片压缩工具对图像进行压缩，实现 图像优化 原则。这两条原则是对单个资源的处理，因此不会引起任何工程方面的问题。很多团队也通过引入代码校验流程来确保实现 避免css表达式 和 避免重定向 原则。目前绝大多数互联网公司也已经开启了服务端的Gzip压缩，并使用CDN实现静态资源的缓存和快速访问；一些技术实力雄厚的前端团队甚至研发出了自动CSS Sprites工具，解决了CSS Sprites在工程维护方面的难题。使用“查找-替换”思路，我们似乎也可以很好的实现 划分主域 原则。\n\n# 静态资源版本更新与缓存\n缓存利用分类中保留了 添加`Expires`头 和 配置`ETag` 两项。或许有些人会质疑，明明这两项只要配置了服务器的相关选项就可以实现，为什么说它们难以解决呢？确实，开启这两项很容易，但开启了缓存后，我们的项目就开始面临另一个挑战： 如何更新这些缓存？\n相信大多数团队也找到了类似的答案，它和《高性能网站建设指南》关于“添加Expires头”所说的原则一样——修订文件名。即：\n> 最有效的解决方案是修改其所有链接，这样，全新的请求将从原始服务器下载最新的内容。\n\n思路没错，但要怎么改变链接呢？变成什么样的链接才能有效更新缓存，又能最大限度避免那些没有修改过的文件缓存不失效呢？\n\n先来看看现在一般前端团队的做法：\n```html\n<h1>hello world</h1>\n\n<script type=\"text/javascript\" src=\"a.js?t=201404231123\"></script>\n<script type=\"text/javascript\" src=\"b.js?t=201404231123\"></script>\n<script type=\"text/javascript\" src=\"c.js?t=201404231123\"></script>\n<script type=\"text/javascript\" src=\"d.js?t=201404231123\"></script>\n<script type=\"text/javascript\" src=\"e.js?t=201404231123\"></script>\n```\n> ps: 也有团队采用构建版本号为静态资源请求添加query，它们在本质上是没有区别的，在此就不赘述了。\n\n接下来，项目升级，比如页面上的html结构发生变化，对应还要修改 a.js 这个文件，得到的构建结果如下：\n```html\n<header>hello world</header>\n\n<script type=\"text/javascript\" src=\"a.js?t=201404231826\"></script>\n<script type=\"text/javascript\" src=\"b.js?t=201404231826\"></script>\n<script type=\"text/javascript\" src=\"c.js?t=201404231826\"></script>\n<script type=\"text/javascript\" src=\"d.js?t=201404231826\"></script>\n<script type=\"text/javascript\" src=\"e.js?t=201404231826\"></script>\n```\n为了触发用户浏览器的缓存更新，我们需要更改静态资源的url地址，如果采用构建信息（时间戳、版本号等）作为url修改的依据，如上述代码所示，我们只修改了一个a.js文件，但再次构建会让所有请求都更改了url地址，用户再度访问页面那些没有修改过的静态资源的(b.js，b.js，c.js，d.js，e.js)的浏览器缓存也一同失效了。\n\n> 使用构建信息作为静态资源更新标记会导致每次构建发布后所有静态资源都被迫更新，浏览器缓存利用率降低，给性能带来伤害。\n\n此外，采用添加query的方式来清除缓存还有一个弊端，就是`覆盖式发布`的上线问题。\n{% asset_img deploy.png  覆盖式发布 %}\n\n采用`query`更新缓存的方式实际上要覆盖线上文件的，`index.html`和`a.js`总有一个先后的顺序，从而中间出现一段或大或小的时间间隔。尤其是当页面是后端渲染的模板的时候，静态资源和模板是部署在不同的机器集群上的，上线的过程中，静态资源和页面文件的部署时间间隔可能会非常长，对于一个大型互联网应用来说即使在一个很小的时间间隔内，都有可能出现新用户访问。在这个时间间隔中，访问了网站的用户会发生什么情况呢？\n- 如果先覆盖`index.html`，后覆盖`a.js`，用户在这个时间间隙访问，会得到新的`index.html`配合旧的`a.js`的情况，从而出现错误的页面。\n- 如果先覆盖`a.js`，后覆盖`index.html`，用户在这个间隙访问，会得到旧的`index.html`配合新的`a.js`的情况，从而也出现了错误的页面。\n这就是为什么大型web应用在版本上线的过程中经常会较集中的出现前端报错日志的原因，也是一些互联网公司选择加班到半夜等待访问低峰期再上线的原因之一。\n\n对于静态资源缓存更新的问题，目前来说最优方案就是 基于文件内容的hash版本冗余机制 了。也就是说，我们希望项目源码是这么写的：\n```js\n<script type=\"text/javascript\" src=\"a.js\"></script>\n```\n发布后代码变成\n```js\n<script type=\"text/javascript\" src=\"a_8244e91.js\"></script>\n```\n也就是`a.js`发布出来后被修改了文件名，产生一个新文件，并不是覆盖已有文件。其中`_82244e91`这串字符是根据`a.js`的文件内容进行`hash`运算得到的，只有文件内容发生变化了才会有更改。由于将文件发布为带有`hash`的新文件，而不是同名文件覆盖，因此不会出现上述说的那些问题。同时，这么做还有其他的好处：\n- 上线的`a.js`不是同名文件覆盖，而是文件名+`hash`的冗余，所以可以先上线静态资源，再上线`html`页面，不存在间隙问题；\n- 遇到问题回滚版本的时候，无需回滚`a.js`，只须回滚页面即可；\n- 由于静态资源版本号是文件内容的`hash`，因此所有静态资源可以开启永久强缓存，只有更新了内容的文件才会缓存失效，缓存利用率大增；\n\n> 以文件内容的hash值为依据生产新文件的非覆盖式发布策略是解决静态资源缓存更新最有效的手段。\n\n虽然这种方案是相比之下最完美的解决方案，但它无法通过手工的形式来维护，因为要依靠手工的形式来计算和替换hash值，并生成相应的文件，将是一项非常繁琐且容易出错的工作，因此我们需要借助工具来处理。\n\n用grunt来实现md5功能是非常困难的，因为grunt只是一个task管理器，而md5计算需要构建工具具有递归编译的能，而不是简单的任务调度。考虑这样的例子：\n{% asset_img md5.png  %}\n由于我们的资源版本号是通过对文件内容进行hash运算得到，如上图所示，`index.html`中引用的`a.css`文件的内容其实也包含了`a.png`的`hash`运算结果，因此我们在修改`index.html`中`a.css`的引用时，不能直接计算`a.css`的内容`hash`，而是要先计算出`a.png`的内容`hash`，替换`a.css`中的引用，得到了`a.css`的最终内容，再做`hash`运算，最后替换`index.html`中的引用。\n> 计算`index.html`中引用的`a.css`文件的url过程：\n> 压缩`a.png`后计算其内容的md5值\n> 将`a.png`的`md5`写入`a.css`，再压缩`a.css`，计算其内容的md5值\n> 将`a.css`的`md5`值写入到`index.html`中\n\n`grunt`等`task-based`的工具是很难在task之间协作处理这样的需求的。\n在解决了基于内容hash的版本更新问题之后，我们可以将所有前端静态资源开启永久强缓存，每次版本发布都可以首先让静态资源全量上线，再进一步上线模板或者页面文件，再也不用担心各种缓存和时间间隙的问题了！\n\n\n## 参考\n1. [Web静态资源缓存及优化](https://zhuanlan.zhihu.com/p/30780216)\n2. [前端工程与性能优化](https://github.com/fouber/blog/issues/3)\n","source":"_posts/前端静态资源缓存策略.md","raw":"---\ntitle: 前端静态资源缓存策略\ndate: 2018-06-14 16:31:56\ntags: [前端,缓存]\n---\n\n# 效果\n对于页面中静态资源（html/js/css/img/webfont），理想中的效果：\n\n- 页面以最快的速度获取到所有必须静态资源，渲染飞快；\n- 服务器上静态资源未更新时再次访问不请求服务器；\n- 服务器上静态资源更新时请求服务器最新资源，加载又飞快。\n\n总结下来也就是2个指标：\n\n- 静态资源加载速度\n- 页面渲染速度\n\n# 性能优化原则及分类\n| 优化方向 | 优化手段 |\n| - | - |\n| 请求数量 | 合并脚本和样式表，CSS Sprites，拆分初始化负载，划分主域 |\n| 请求带宽 | 开启GZip，精简JavaScript，移除重复脚本，图像优化 |\n| 缓存利用 | 使用CDN，使用外部JavaScript和CSS，添加Expires头，减少DNS查找，配置ETag，使AjaX可缓存 |\n| 页面结构 | 将样式表放在顶部，将脚本放在底部，尽早刷新文档的输出 |\n| 代码校验 | 避免CSS表达式，避免重定向 |\n\n目前大多数前端团队可以利用 yui compressor 或者 google closure compiler 等压缩工具很容易做到 精简Javascript 这条原则；同样的，也可以使用图片压缩工具对图像进行压缩，实现 图像优化 原则。这两条原则是对单个资源的处理，因此不会引起任何工程方面的问题。很多团队也通过引入代码校验流程来确保实现 避免css表达式 和 避免重定向 原则。目前绝大多数互联网公司也已经开启了服务端的Gzip压缩，并使用CDN实现静态资源的缓存和快速访问；一些技术实力雄厚的前端团队甚至研发出了自动CSS Sprites工具，解决了CSS Sprites在工程维护方面的难题。使用“查找-替换”思路，我们似乎也可以很好的实现 划分主域 原则。\n\n# 静态资源版本更新与缓存\n缓存利用分类中保留了 添加`Expires`头 和 配置`ETag` 两项。或许有些人会质疑，明明这两项只要配置了服务器的相关选项就可以实现，为什么说它们难以解决呢？确实，开启这两项很容易，但开启了缓存后，我们的项目就开始面临另一个挑战： 如何更新这些缓存？\n相信大多数团队也找到了类似的答案，它和《高性能网站建设指南》关于“添加Expires头”所说的原则一样——修订文件名。即：\n> 最有效的解决方案是修改其所有链接，这样，全新的请求将从原始服务器下载最新的内容。\n\n思路没错，但要怎么改变链接呢？变成什么样的链接才能有效更新缓存，又能最大限度避免那些没有修改过的文件缓存不失效呢？\n\n先来看看现在一般前端团队的做法：\n```html\n<h1>hello world</h1>\n\n<script type=\"text/javascript\" src=\"a.js?t=201404231123\"></script>\n<script type=\"text/javascript\" src=\"b.js?t=201404231123\"></script>\n<script type=\"text/javascript\" src=\"c.js?t=201404231123\"></script>\n<script type=\"text/javascript\" src=\"d.js?t=201404231123\"></script>\n<script type=\"text/javascript\" src=\"e.js?t=201404231123\"></script>\n```\n> ps: 也有团队采用构建版本号为静态资源请求添加query，它们在本质上是没有区别的，在此就不赘述了。\n\n接下来，项目升级，比如页面上的html结构发生变化，对应还要修改 a.js 这个文件，得到的构建结果如下：\n```html\n<header>hello world</header>\n\n<script type=\"text/javascript\" src=\"a.js?t=201404231826\"></script>\n<script type=\"text/javascript\" src=\"b.js?t=201404231826\"></script>\n<script type=\"text/javascript\" src=\"c.js?t=201404231826\"></script>\n<script type=\"text/javascript\" src=\"d.js?t=201404231826\"></script>\n<script type=\"text/javascript\" src=\"e.js?t=201404231826\"></script>\n```\n为了触发用户浏览器的缓存更新，我们需要更改静态资源的url地址，如果采用构建信息（时间戳、版本号等）作为url修改的依据，如上述代码所示，我们只修改了一个a.js文件，但再次构建会让所有请求都更改了url地址，用户再度访问页面那些没有修改过的静态资源的(b.js，b.js，c.js，d.js，e.js)的浏览器缓存也一同失效了。\n\n> 使用构建信息作为静态资源更新标记会导致每次构建发布后所有静态资源都被迫更新，浏览器缓存利用率降低，给性能带来伤害。\n\n此外，采用添加query的方式来清除缓存还有一个弊端，就是`覆盖式发布`的上线问题。\n{% asset_img deploy.png  覆盖式发布 %}\n\n采用`query`更新缓存的方式实际上要覆盖线上文件的，`index.html`和`a.js`总有一个先后的顺序，从而中间出现一段或大或小的时间间隔。尤其是当页面是后端渲染的模板的时候，静态资源和模板是部署在不同的机器集群上的，上线的过程中，静态资源和页面文件的部署时间间隔可能会非常长，对于一个大型互联网应用来说即使在一个很小的时间间隔内，都有可能出现新用户访问。在这个时间间隔中，访问了网站的用户会发生什么情况呢？\n- 如果先覆盖`index.html`，后覆盖`a.js`，用户在这个时间间隙访问，会得到新的`index.html`配合旧的`a.js`的情况，从而出现错误的页面。\n- 如果先覆盖`a.js`，后覆盖`index.html`，用户在这个间隙访问，会得到旧的`index.html`配合新的`a.js`的情况，从而也出现了错误的页面。\n这就是为什么大型web应用在版本上线的过程中经常会较集中的出现前端报错日志的原因，也是一些互联网公司选择加班到半夜等待访问低峰期再上线的原因之一。\n\n对于静态资源缓存更新的问题，目前来说最优方案就是 基于文件内容的hash版本冗余机制 了。也就是说，我们希望项目源码是这么写的：\n```js\n<script type=\"text/javascript\" src=\"a.js\"></script>\n```\n发布后代码变成\n```js\n<script type=\"text/javascript\" src=\"a_8244e91.js\"></script>\n```\n也就是`a.js`发布出来后被修改了文件名，产生一个新文件，并不是覆盖已有文件。其中`_82244e91`这串字符是根据`a.js`的文件内容进行`hash`运算得到的，只有文件内容发生变化了才会有更改。由于将文件发布为带有`hash`的新文件，而不是同名文件覆盖，因此不会出现上述说的那些问题。同时，这么做还有其他的好处：\n- 上线的`a.js`不是同名文件覆盖，而是文件名+`hash`的冗余，所以可以先上线静态资源，再上线`html`页面，不存在间隙问题；\n- 遇到问题回滚版本的时候，无需回滚`a.js`，只须回滚页面即可；\n- 由于静态资源版本号是文件内容的`hash`，因此所有静态资源可以开启永久强缓存，只有更新了内容的文件才会缓存失效，缓存利用率大增；\n\n> 以文件内容的hash值为依据生产新文件的非覆盖式发布策略是解决静态资源缓存更新最有效的手段。\n\n虽然这种方案是相比之下最完美的解决方案，但它无法通过手工的形式来维护，因为要依靠手工的形式来计算和替换hash值，并生成相应的文件，将是一项非常繁琐且容易出错的工作，因此我们需要借助工具来处理。\n\n用grunt来实现md5功能是非常困难的，因为grunt只是一个task管理器，而md5计算需要构建工具具有递归编译的能，而不是简单的任务调度。考虑这样的例子：\n{% asset_img md5.png  %}\n由于我们的资源版本号是通过对文件内容进行hash运算得到，如上图所示，`index.html`中引用的`a.css`文件的内容其实也包含了`a.png`的`hash`运算结果，因此我们在修改`index.html`中`a.css`的引用时，不能直接计算`a.css`的内容`hash`，而是要先计算出`a.png`的内容`hash`，替换`a.css`中的引用，得到了`a.css`的最终内容，再做`hash`运算，最后替换`index.html`中的引用。\n> 计算`index.html`中引用的`a.css`文件的url过程：\n> 压缩`a.png`后计算其内容的md5值\n> 将`a.png`的`md5`写入`a.css`，再压缩`a.css`，计算其内容的md5值\n> 将`a.css`的`md5`值写入到`index.html`中\n\n`grunt`等`task-based`的工具是很难在task之间协作处理这样的需求的。\n在解决了基于内容hash的版本更新问题之后，我们可以将所有前端静态资源开启永久强缓存，每次版本发布都可以首先让静态资源全量上线，再进一步上线模板或者页面文件，再也不用担心各种缓存和时间间隙的问题了！\n\n\n## 参考\n1. [Web静态资源缓存及优化](https://zhuanlan.zhihu.com/p/30780216)\n2. [前端工程与性能优化](https://github.com/fouber/blog/issues/3)\n","slug":"前端静态资源缓存策略","published":1,"updated":"2018-07-29T12:11:11.676Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkwmni63001g3pu7m2hq3j0k","content":"<h1 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h1><p>对于页面中静态资源（html/js/css/img/webfont），理想中的效果：</p>\n<ul>\n<li>页面以最快的速度获取到所有必须静态资源，渲染飞快；</li>\n<li>服务器上静态资源未更新时再次访问不请求服务器；</li>\n<li>服务器上静态资源更新时请求服务器最新资源，加载又飞快。</li>\n</ul>\n<p>总结下来也就是2个指标：</p>\n<ul>\n<li>静态资源加载速度</li>\n<li>页面渲染速度</li>\n</ul>\n<h1 id=\"性能优化原则及分类\"><a href=\"#性能优化原则及分类\" class=\"headerlink\" title=\"性能优化原则及分类\"></a>性能优化原则及分类</h1><table>\n<thead>\n<tr>\n<th>优化方向</th>\n<th>优化手段</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>请求数量</td>\n<td>合并脚本和样式表，CSS Sprites，拆分初始化负载，划分主域</td>\n</tr>\n<tr>\n<td>请求带宽</td>\n<td>开启GZip，精简JavaScript，移除重复脚本，图像优化</td>\n</tr>\n<tr>\n<td>缓存利用</td>\n<td>使用CDN，使用外部JavaScript和CSS，添加Expires头，减少DNS查找，配置ETag，使AjaX可缓存</td>\n</tr>\n<tr>\n<td>页面结构</td>\n<td>将样式表放在顶部，将脚本放在底部，尽早刷新文档的输出</td>\n</tr>\n<tr>\n<td>代码校验</td>\n<td>避免CSS表达式，避免重定向</td>\n</tr>\n</tbody>\n</table>\n<p>目前大多数前端团队可以利用 yui compressor 或者 google closure compiler 等压缩工具很容易做到 精简Javascript 这条原则；同样的，也可以使用图片压缩工具对图像进行压缩，实现 图像优化 原则。这两条原则是对单个资源的处理，因此不会引起任何工程方面的问题。很多团队也通过引入代码校验流程来确保实现 避免css表达式 和 避免重定向 原则。目前绝大多数互联网公司也已经开启了服务端的Gzip压缩，并使用CDN实现静态资源的缓存和快速访问；一些技术实力雄厚的前端团队甚至研发出了自动CSS Sprites工具，解决了CSS Sprites在工程维护方面的难题。使用“查找-替换”思路，我们似乎也可以很好的实现 划分主域 原则。</p>\n<h1 id=\"静态资源版本更新与缓存\"><a href=\"#静态资源版本更新与缓存\" class=\"headerlink\" title=\"静态资源版本更新与缓存\"></a>静态资源版本更新与缓存</h1><p>缓存利用分类中保留了 添加<code>Expires</code>头 和 配置<code>ETag</code> 两项。或许有些人会质疑，明明这两项只要配置了服务器的相关选项就可以实现，为什么说它们难以解决呢？确实，开启这两项很容易，但开启了缓存后，我们的项目就开始面临另一个挑战： 如何更新这些缓存？<br>相信大多数团队也找到了类似的答案，它和《高性能网站建设指南》关于“添加Expires头”所说的原则一样——修订文件名。即：</p>\n<blockquote>\n<p>最有效的解决方案是修改其所有链接，这样，全新的请求将从原始服务器下载最新的内容。</p>\n</blockquote>\n<p>思路没错，但要怎么改变链接呢？变成什么样的链接才能有效更新缓存，又能最大限度避免那些没有修改过的文件缓存不失效呢？</p>\n<p>先来看看现在一般前端团队的做法：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>hello world<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"a.js?t=201404231123\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"b.js?t=201404231123\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"c.js?t=201404231123\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"d.js?t=201404231123\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"e.js?t=201404231123\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>ps: 也有团队采用构建版本号为静态资源请求添加query，它们在本质上是没有区别的，在此就不赘述了。</p>\n</blockquote>\n<p>接下来，项目升级，比如页面上的html结构发生变化，对应还要修改 a.js 这个文件，得到的构建结果如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span>hello world<span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"a.js?t=201404231826\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"b.js?t=201404231826\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"c.js?t=201404231826\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"d.js?t=201404231826\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"e.js?t=201404231826\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>为了触发用户浏览器的缓存更新，我们需要更改静态资源的url地址，如果采用构建信息（时间戳、版本号等）作为url修改的依据，如上述代码所示，我们只修改了一个a.js文件，但再次构建会让所有请求都更改了url地址，用户再度访问页面那些没有修改过的静态资源的(b.js，b.js，c.js，d.js，e.js)的浏览器缓存也一同失效了。</p>\n<blockquote>\n<p>使用构建信息作为静态资源更新标记会导致每次构建发布后所有静态资源都被迫更新，浏览器缓存利用率降低，给性能带来伤害。</p>\n</blockquote>\n<p>此外，采用添加query的方式来清除缓存还有一个弊端，就是<code>覆盖式发布</code>的上线问题。<br><img src=\"/2018/06/14/前端静态资源缓存策略/deploy.png\" title=\"覆盖式发布\"></p>\n<p>采用<code>query</code>更新缓存的方式实际上要覆盖线上文件的，<code>index.html</code>和<code>a.js</code>总有一个先后的顺序，从而中间出现一段或大或小的时间间隔。尤其是当页面是后端渲染的模板的时候，静态资源和模板是部署在不同的机器集群上的，上线的过程中，静态资源和页面文件的部署时间间隔可能会非常长，对于一个大型互联网应用来说即使在一个很小的时间间隔内，都有可能出现新用户访问。在这个时间间隔中，访问了网站的用户会发生什么情况呢？</p>\n<ul>\n<li>如果先覆盖<code>index.html</code>，后覆盖<code>a.js</code>，用户在这个时间间隙访问，会得到新的<code>index.html</code>配合旧的<code>a.js</code>的情况，从而出现错误的页面。</li>\n<li>如果先覆盖<code>a.js</code>，后覆盖<code>index.html</code>，用户在这个间隙访问，会得到旧的<code>index.html</code>配合新的<code>a.js</code>的情况，从而也出现了错误的页面。<br>这就是为什么大型web应用在版本上线的过程中经常会较集中的出现前端报错日志的原因，也是一些互联网公司选择加班到半夜等待访问低峰期再上线的原因之一。</li>\n</ul>\n<p>对于静态资源缓存更新的问题，目前来说最优方案就是 基于文件内容的hash版本冗余机制 了。也就是说，我们希望项目源码是这么写的：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"a.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>\n<p>发布后代码变成<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"a_8244e91.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>\n<p>也就是<code>a.js</code>发布出来后被修改了文件名，产生一个新文件，并不是覆盖已有文件。其中<code>_82244e91</code>这串字符是根据<code>a.js</code>的文件内容进行<code>hash</code>运算得到的，只有文件内容发生变化了才会有更改。由于将文件发布为带有<code>hash</code>的新文件，而不是同名文件覆盖，因此不会出现上述说的那些问题。同时，这么做还有其他的好处：</p>\n<ul>\n<li>上线的<code>a.js</code>不是同名文件覆盖，而是文件名+<code>hash</code>的冗余，所以可以先上线静态资源，再上线<code>html</code>页面，不存在间隙问题；</li>\n<li>遇到问题回滚版本的时候，无需回滚<code>a.js</code>，只须回滚页面即可；</li>\n<li>由于静态资源版本号是文件内容的<code>hash</code>，因此所有静态资源可以开启永久强缓存，只有更新了内容的文件才会缓存失效，缓存利用率大增；</li>\n</ul>\n<blockquote>\n<p>以文件内容的hash值为依据生产新文件的非覆盖式发布策略是解决静态资源缓存更新最有效的手段。</p>\n</blockquote>\n<p>虽然这种方案是相比之下最完美的解决方案，但它无法通过手工的形式来维护，因为要依靠手工的形式来计算和替换hash值，并生成相应的文件，将是一项非常繁琐且容易出错的工作，因此我们需要借助工具来处理。</p>\n<p>用grunt来实现md5功能是非常困难的，因为grunt只是一个task管理器，而md5计算需要构建工具具有递归编译的能，而不是简单的任务调度。考虑这样的例子：<br><img src=\"/2018/06/14/前端静态资源缓存策略/md5.png\"><br>由于我们的资源版本号是通过对文件内容进行hash运算得到，如上图所示，<code>index.html</code>中引用的<code>a.css</code>文件的内容其实也包含了<code>a.png</code>的<code>hash</code>运算结果，因此我们在修改<code>index.html</code>中<code>a.css</code>的引用时，不能直接计算<code>a.css</code>的内容<code>hash</code>，而是要先计算出<code>a.png</code>的内容<code>hash</code>，替换<code>a.css</code>中的引用，得到了<code>a.css</code>的最终内容，再做<code>hash</code>运算，最后替换<code>index.html</code>中的引用。</p>\n<blockquote>\n<p>计算<code>index.html</code>中引用的<code>a.css</code>文件的url过程：<br>压缩<code>a.png</code>后计算其内容的md5值<br>将<code>a.png</code>的<code>md5</code>写入<code>a.css</code>，再压缩<code>a.css</code>，计算其内容的md5值<br>将<code>a.css</code>的<code>md5</code>值写入到<code>index.html</code>中</p>\n</blockquote>\n<p><code>grunt</code>等<code>task-based</code>的工具是很难在task之间协作处理这样的需求的。<br>在解决了基于内容hash的版本更新问题之后，我们可以将所有前端静态资源开启永久强缓存，每次版本发布都可以首先让静态资源全量上线，再进一步上线模板或者页面文件，再也不用担心各种缓存和时间间隙的问题了！</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"https://zhuanlan.zhihu.com/p/30780216\" target=\"_blank\" rel=\"noopener\">Web静态资源缓存及优化</a></li>\n<li><a href=\"https://github.com/fouber/blog/issues/3\" target=\"_blank\" rel=\"noopener\">前端工程与性能优化</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h1><p>对于页面中静态资源（html/js/css/img/webfont），理想中的效果：</p>\n<ul>\n<li>页面以最快的速度获取到所有必须静态资源，渲染飞快；</li>\n<li>服务器上静态资源未更新时再次访问不请求服务器；</li>\n<li>服务器上静态资源更新时请求服务器最新资源，加载又飞快。</li>\n</ul>\n<p>总结下来也就是2个指标：</p>\n<ul>\n<li>静态资源加载速度</li>\n<li>页面渲染速度</li>\n</ul>\n<h1 id=\"性能优化原则及分类\"><a href=\"#性能优化原则及分类\" class=\"headerlink\" title=\"性能优化原则及分类\"></a>性能优化原则及分类</h1><table>\n<thead>\n<tr>\n<th>优化方向</th>\n<th>优化手段</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>请求数量</td>\n<td>合并脚本和样式表，CSS Sprites，拆分初始化负载，划分主域</td>\n</tr>\n<tr>\n<td>请求带宽</td>\n<td>开启GZip，精简JavaScript，移除重复脚本，图像优化</td>\n</tr>\n<tr>\n<td>缓存利用</td>\n<td>使用CDN，使用外部JavaScript和CSS，添加Expires头，减少DNS查找，配置ETag，使AjaX可缓存</td>\n</tr>\n<tr>\n<td>页面结构</td>\n<td>将样式表放在顶部，将脚本放在底部，尽早刷新文档的输出</td>\n</tr>\n<tr>\n<td>代码校验</td>\n<td>避免CSS表达式，避免重定向</td>\n</tr>\n</tbody>\n</table>\n<p>目前大多数前端团队可以利用 yui compressor 或者 google closure compiler 等压缩工具很容易做到 精简Javascript 这条原则；同样的，也可以使用图片压缩工具对图像进行压缩，实现 图像优化 原则。这两条原则是对单个资源的处理，因此不会引起任何工程方面的问题。很多团队也通过引入代码校验流程来确保实现 避免css表达式 和 避免重定向 原则。目前绝大多数互联网公司也已经开启了服务端的Gzip压缩，并使用CDN实现静态资源的缓存和快速访问；一些技术实力雄厚的前端团队甚至研发出了自动CSS Sprites工具，解决了CSS Sprites在工程维护方面的难题。使用“查找-替换”思路，我们似乎也可以很好的实现 划分主域 原则。</p>\n<h1 id=\"静态资源版本更新与缓存\"><a href=\"#静态资源版本更新与缓存\" class=\"headerlink\" title=\"静态资源版本更新与缓存\"></a>静态资源版本更新与缓存</h1><p>缓存利用分类中保留了 添加<code>Expires</code>头 和 配置<code>ETag</code> 两项。或许有些人会质疑，明明这两项只要配置了服务器的相关选项就可以实现，为什么说它们难以解决呢？确实，开启这两项很容易，但开启了缓存后，我们的项目就开始面临另一个挑战： 如何更新这些缓存？<br>相信大多数团队也找到了类似的答案，它和《高性能网站建设指南》关于“添加Expires头”所说的原则一样——修订文件名。即：</p>\n<blockquote>\n<p>最有效的解决方案是修改其所有链接，这样，全新的请求将从原始服务器下载最新的内容。</p>\n</blockquote>\n<p>思路没错，但要怎么改变链接呢？变成什么样的链接才能有效更新缓存，又能最大限度避免那些没有修改过的文件缓存不失效呢？</p>\n<p>先来看看现在一般前端团队的做法：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>hello world<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"a.js?t=201404231123\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"b.js?t=201404231123\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"c.js?t=201404231123\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"d.js?t=201404231123\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"e.js?t=201404231123\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>ps: 也有团队采用构建版本号为静态资源请求添加query，它们在本质上是没有区别的，在此就不赘述了。</p>\n</blockquote>\n<p>接下来，项目升级，比如页面上的html结构发生变化，对应还要修改 a.js 这个文件，得到的构建结果如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span>hello world<span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"a.js?t=201404231826\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"b.js?t=201404231826\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"c.js?t=201404231826\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"d.js?t=201404231826\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"e.js?t=201404231826\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>为了触发用户浏览器的缓存更新，我们需要更改静态资源的url地址，如果采用构建信息（时间戳、版本号等）作为url修改的依据，如上述代码所示，我们只修改了一个a.js文件，但再次构建会让所有请求都更改了url地址，用户再度访问页面那些没有修改过的静态资源的(b.js，b.js，c.js，d.js，e.js)的浏览器缓存也一同失效了。</p>\n<blockquote>\n<p>使用构建信息作为静态资源更新标记会导致每次构建发布后所有静态资源都被迫更新，浏览器缓存利用率降低，给性能带来伤害。</p>\n</blockquote>\n<p>此外，采用添加query的方式来清除缓存还有一个弊端，就是<code>覆盖式发布</code>的上线问题。<br><img src=\"/2018/06/14/前端静态资源缓存策略/deploy.png\" title=\"覆盖式发布\"></p>\n<p>采用<code>query</code>更新缓存的方式实际上要覆盖线上文件的，<code>index.html</code>和<code>a.js</code>总有一个先后的顺序，从而中间出现一段或大或小的时间间隔。尤其是当页面是后端渲染的模板的时候，静态资源和模板是部署在不同的机器集群上的，上线的过程中，静态资源和页面文件的部署时间间隔可能会非常长，对于一个大型互联网应用来说即使在一个很小的时间间隔内，都有可能出现新用户访问。在这个时间间隔中，访问了网站的用户会发生什么情况呢？</p>\n<ul>\n<li>如果先覆盖<code>index.html</code>，后覆盖<code>a.js</code>，用户在这个时间间隙访问，会得到新的<code>index.html</code>配合旧的<code>a.js</code>的情况，从而出现错误的页面。</li>\n<li>如果先覆盖<code>a.js</code>，后覆盖<code>index.html</code>，用户在这个间隙访问，会得到旧的<code>index.html</code>配合新的<code>a.js</code>的情况，从而也出现了错误的页面。<br>这就是为什么大型web应用在版本上线的过程中经常会较集中的出现前端报错日志的原因，也是一些互联网公司选择加班到半夜等待访问低峰期再上线的原因之一。</li>\n</ul>\n<p>对于静态资源缓存更新的问题，目前来说最优方案就是 基于文件内容的hash版本冗余机制 了。也就是说，我们希望项目源码是这么写的：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"a.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>\n<p>发布后代码变成<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"a_8244e91.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>\n<p>也就是<code>a.js</code>发布出来后被修改了文件名，产生一个新文件，并不是覆盖已有文件。其中<code>_82244e91</code>这串字符是根据<code>a.js</code>的文件内容进行<code>hash</code>运算得到的，只有文件内容发生变化了才会有更改。由于将文件发布为带有<code>hash</code>的新文件，而不是同名文件覆盖，因此不会出现上述说的那些问题。同时，这么做还有其他的好处：</p>\n<ul>\n<li>上线的<code>a.js</code>不是同名文件覆盖，而是文件名+<code>hash</code>的冗余，所以可以先上线静态资源，再上线<code>html</code>页面，不存在间隙问题；</li>\n<li>遇到问题回滚版本的时候，无需回滚<code>a.js</code>，只须回滚页面即可；</li>\n<li>由于静态资源版本号是文件内容的<code>hash</code>，因此所有静态资源可以开启永久强缓存，只有更新了内容的文件才会缓存失效，缓存利用率大增；</li>\n</ul>\n<blockquote>\n<p>以文件内容的hash值为依据生产新文件的非覆盖式发布策略是解决静态资源缓存更新最有效的手段。</p>\n</blockquote>\n<p>虽然这种方案是相比之下最完美的解决方案，但它无法通过手工的形式来维护，因为要依靠手工的形式来计算和替换hash值，并生成相应的文件，将是一项非常繁琐且容易出错的工作，因此我们需要借助工具来处理。</p>\n<p>用grunt来实现md5功能是非常困难的，因为grunt只是一个task管理器，而md5计算需要构建工具具有递归编译的能，而不是简单的任务调度。考虑这样的例子：<br><img src=\"/2018/06/14/前端静态资源缓存策略/md5.png\"><br>由于我们的资源版本号是通过对文件内容进行hash运算得到，如上图所示，<code>index.html</code>中引用的<code>a.css</code>文件的内容其实也包含了<code>a.png</code>的<code>hash</code>运算结果，因此我们在修改<code>index.html</code>中<code>a.css</code>的引用时，不能直接计算<code>a.css</code>的内容<code>hash</code>，而是要先计算出<code>a.png</code>的内容<code>hash</code>，替换<code>a.css</code>中的引用，得到了<code>a.css</code>的最终内容，再做<code>hash</code>运算，最后替换<code>index.html</code>中的引用。</p>\n<blockquote>\n<p>计算<code>index.html</code>中引用的<code>a.css</code>文件的url过程：<br>压缩<code>a.png</code>后计算其内容的md5值<br>将<code>a.png</code>的<code>md5</code>写入<code>a.css</code>，再压缩<code>a.css</code>，计算其内容的md5值<br>将<code>a.css</code>的<code>md5</code>值写入到<code>index.html</code>中</p>\n</blockquote>\n<p><code>grunt</code>等<code>task-based</code>的工具是很难在task之间协作处理这样的需求的。<br>在解决了基于内容hash的版本更新问题之后，我们可以将所有前端静态资源开启永久强缓存，每次版本发布都可以首先让静态资源全量上线，再进一步上线模板或者页面文件，再也不用担心各种缓存和时间间隙的问题了！</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"https://zhuanlan.zhihu.com/p/30780216\" target=\"_blank\" rel=\"noopener\">Web静态资源缓存及优化</a></li>\n<li><a href=\"https://github.com/fouber/blog/issues/3\" target=\"_blank\" rel=\"noopener\">前端工程与性能优化</a></li>\n</ol>\n"},{"title":"缓存策略三要素分解法(转0)","date":"2018-06-15T11:31:50.000Z","_content":"\n原文：[彻底弄懂 Http 缓存机制 - 基于缓存策略三要素分解法](https://mp.weixin.qq.com/s/qOMO0LIdA47j3RjhbCWUEQ)\n","source":"_posts/缓存策略三要素分解法.md","raw":"---\ntitle: 缓存策略三要素分解法(转0)\ndate: 2018-06-15 19:31:50\ntag: 缓存\n---\n\n原文：[彻底弄懂 Http 缓存机制 - 基于缓存策略三要素分解法](https://mp.weixin.qq.com/s/qOMO0LIdA47j3RjhbCWUEQ)\n","slug":"缓存策略三要素分解法","published":1,"updated":"2018-07-29T12:11:11.677Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkwmni66001i3pu7bze8kvqd","content":"<p>原文：<a href=\"https://mp.weixin.qq.com/s/qOMO0LIdA47j3RjhbCWUEQ\" target=\"_blank\" rel=\"noopener\">彻底弄懂 Http 缓存机制 - 基于缓存策略三要素分解法</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>原文：<a href=\"https://mp.weixin.qq.com/s/qOMO0LIdA47j3RjhbCWUEQ\" target=\"_blank\" rel=\"noopener\">彻底弄懂 Http 缓存机制 - 基于缓存策略三要素分解法</a></p>\n"},{"title":"实用工具","_content":"http://www.tubangzhu.com/\nhttps://ppt.baomitu.com/\nhttps://www.chuangkit.com/designtools/startdesign\nhttp://js8.in/2013/11/16/%E6%8E%A8%E8%8D%90nodeppt%EF%BC%9A%E4%BD%BF%E7%94%A8markdown%E8%AF%AD%E6%B3%95%E6%9D%A5%E5%86%99%E7%BD%91%E9%A1%B5ppt/\nhttps://www.jianshu.com/p/e78cce9d5af0\n[nodeppt](https://github.com/ksky521/nodeppt)\n[reveal.js](https://github.com/hakimel/reveal.js/)\nhttps://slides.com/","source":"_drafts/实用工具.md","raw":"---\ntitle: 实用工具\n---\nhttp://www.tubangzhu.com/\nhttps://ppt.baomitu.com/\nhttps://www.chuangkit.com/designtools/startdesign\nhttp://js8.in/2013/11/16/%E6%8E%A8%E8%8D%90nodeppt%EF%BC%9A%E4%BD%BF%E7%94%A8markdown%E8%AF%AD%E6%B3%95%E6%9D%A5%E5%86%99%E7%BD%91%E9%A1%B5ppt/\nhttps://www.jianshu.com/p/e78cce9d5af0\n[nodeppt](https://github.com/ksky521/nodeppt)\n[reveal.js](https://github.com/hakimel/reveal.js/)\nhttps://slides.com/","slug":"实用工具","published":0,"date":"2018-07-29T12:11:11.676Z","updated":"2018-08-26T07:27:43.371Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlaj8cl40000n322ug8t4mhb","content":"<p><a href=\"http://www.tubangzhu.com/\" target=\"_blank\" rel=\"noopener\">http://www.tubangzhu.com/</a><br><a href=\"https://ppt.baomitu.com/\" target=\"_blank\" rel=\"noopener\">https://ppt.baomitu.com/</a><br><a href=\"https://www.chuangkit.com/designtools/startdesign\" target=\"_blank\" rel=\"noopener\">https://www.chuangkit.com/designtools/startdesign</a><br><a href=\"http://js8.in/2013/11/16/%E6%8E%A8%E8%8D%90nodeppt%EF%BC%9A%E4%BD%BF%E7%94%A8markdown%E8%AF%AD%E6%B3%95%E6%9D%A5%E5%86%99%E7%BD%91%E9%A1%B5ppt/\" target=\"_blank\" rel=\"noopener\">http://js8.in/2013/11/16/%E6%8E%A8%E8%8D%90nodeppt%EF%BC%9A%E4%BD%BF%E7%94%A8markdown%E8%AF%AD%E6%B3%95%E6%9D%A5%E5%86%99%E7%BD%91%E9%A1%B5ppt/</a><br><a href=\"https://www.jianshu.com/p/e78cce9d5af0\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/e78cce9d5af0</a><br><a href=\"https://github.com/ksky521/nodeppt\" target=\"_blank\" rel=\"noopener\">nodeppt</a><br><a href=\"https://github.com/hakimel/reveal.js/\" target=\"_blank\" rel=\"noopener\">reveal.js</a><br><a href=\"https://slides.com/\" target=\"_blank\" rel=\"noopener\">https://slides.com/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://www.tubangzhu.com/\" target=\"_blank\" rel=\"noopener\">http://www.tubangzhu.com/</a><br><a href=\"https://ppt.baomitu.com/\" target=\"_blank\" rel=\"noopener\">https://ppt.baomitu.com/</a><br><a href=\"https://www.chuangkit.com/designtools/startdesign\" target=\"_blank\" rel=\"noopener\">https://www.chuangkit.com/designtools/startdesign</a><br><a href=\"http://js8.in/2013/11/16/%E6%8E%A8%E8%8D%90nodeppt%EF%BC%9A%E4%BD%BF%E7%94%A8markdown%E8%AF%AD%E6%B3%95%E6%9D%A5%E5%86%99%E7%BD%91%E9%A1%B5ppt/\" target=\"_blank\" rel=\"noopener\">http://js8.in/2013/11/16/%E6%8E%A8%E8%8D%90nodeppt%EF%BC%9A%E4%BD%BF%E7%94%A8markdown%E8%AF%AD%E6%B3%95%E6%9D%A5%E5%86%99%E7%BD%91%E9%A1%B5ppt/</a><br><a href=\"https://www.jianshu.com/p/e78cce9d5af0\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/e78cce9d5af0</a><br><a href=\"https://github.com/ksky521/nodeppt\" target=\"_blank\" rel=\"noopener\">nodeppt</a><br><a href=\"https://github.com/hakimel/reveal.js/\" target=\"_blank\" rel=\"noopener\">reveal.js</a><br><a href=\"https://slides.com/\" target=\"_blank\" rel=\"noopener\">https://slides.com/</a></p>\n"}],"PostAsset":[{"_id":"source/_posts/linux下使用docker搭建sentry/11.png","slug":"11.png","post":"cjkwmni4y00043pu7p2c503mq","modified":0,"renderable":0},{"_id":"source/_posts/前端缓存/1.PNG","slug":"1.PNG","post":"cjkwmni5g000e3pu7vo418amw","modified":0,"renderable":0},{"_id":"source/_posts/前端缓存/10.png","slug":"10.png","post":"cjkwmni5g000e3pu7vo418amw","modified":0,"renderable":0},{"_id":"source/_posts/前端缓存/2.png","slug":"2.png","post":"cjkwmni5g000e3pu7vo418amw","modified":0,"renderable":0},{"_id":"source/_posts/前端缓存/3.png","slug":"3.png","post":"cjkwmni5g000e3pu7vo418amw","modified":0,"renderable":0},{"_id":"source/_posts/前端缓存/4.png","slug":"4.png","post":"cjkwmni5g000e3pu7vo418amw","modified":0,"renderable":0},{"_id":"source/_posts/前端缓存/5.png","slug":"5.png","post":"cjkwmni5g000e3pu7vo418amw","modified":0,"renderable":0},{"_id":"source/_posts/前端缓存/6.png","slug":"6.png","post":"cjkwmni5g000e3pu7vo418amw","modified":0,"renderable":0},{"_id":"source/_posts/前端缓存/7.png","slug":"7.png","post":"cjkwmni5g000e3pu7vo418amw","modified":0,"renderable":0},{"_id":"source/_posts/前端缓存/8.png","slug":"8.png","post":"cjkwmni5g000e3pu7vo418amw","modified":0,"renderable":0},{"_id":"source/_posts/前端缓存/9.png","slug":"9.png","post":"cjkwmni5g000e3pu7vo418amw","modified":0,"renderable":0},{"_id":"source/_posts/前端静态资源缓存策略/deploy.png","slug":"deploy.png","post":"cjkwmni63001g3pu7m2hq3j0k","modified":0,"renderable":0},{"_id":"source/_posts/前端静态资源缓存策略/md5.png","slug":"md5.png","post":"cjkwmni63001g3pu7m2hq3j0k","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cjkwmni5100053pu7brz5sabt","category_id":"cjkwmni5600093pu7hqgj8wej","_id":"cjkwmni5l000j3pu7ika9wx7b"},{"post_id":"cjkwmni5500083pu72s90f5k6","category_id":"cjkwmni5600093pu7hqgj8wej","_id":"cjkwmni5m000m3pu7b0vz6xvs"},{"post_id":"cjkwmni58000a3pu78jps3nhc","category_id":"cjkwmni5600093pu7hqgj8wej","_id":"cjkwmni5m000o3pu7a7wc5rck"},{"post_id":"cjkwmni5f000c3pu7cfi2v323","category_id":"cjkwmni5l000l3pu7km83xqex","_id":"cjkwmni5o000r3pu7v4f4wdjt"}],"PostTag":[{"post_id":"cjkwmni4h00003pu785d364iv","tag_id":"cjkwmni4t00023pu7zdjwltvg","_id":"cjkwmni5500073pu7zblhipbn"},{"post_id":"cjkwmni4o00013pu7rn6vh2u8","tag_id":"cjkwmni5400063pu7bc9l83k3","_id":"cjkwmni5g000d3pu7q1naafrf"},{"post_id":"cjkwmni4v00033pu7renvd3g5","tag_id":"cjkwmni5e000b3pu7m6mbxczc","_id":"cjkwmni5k000h3pu7lnoa8zad"},{"post_id":"cjkwmni4y00043pu7p2c503mq","tag_id":"cjkwmni5k000g3pu7mmrfanyp","_id":"cjkwmni5n000q3pu78w753a4g"},{"post_id":"cjkwmni4y00043pu7p2c503mq","tag_id":"cjkwmni5l000k3pu78kzlln38","_id":"cjkwmni5p000s3pu7yjlliesi"},{"post_id":"cjkwmni4y00043pu7p2c503mq","tag_id":"cjkwmni5m000n3pu7wh6072jk","_id":"cjkwmni5p000u3pu7jy46wp9n"},{"post_id":"cjkwmni5100053pu7brz5sabt","tag_id":"cjkwmni5n000p3pu7svieko3o","_id":"cjkwmni5q000v3pu7vu74f0ys"},{"post_id":"cjkwmni5500083pu72s90f5k6","tag_id":"cjkwmni5n000p3pu7svieko3o","_id":"cjkwmni5q000x3pu73rfgjcat"},{"post_id":"cjkwmni58000a3pu78jps3nhc","tag_id":"cjkwmni5n000p3pu7svieko3o","_id":"cjkwmni5r00103pu7v68eoqjq"},{"post_id":"cjkwmni58000a3pu78jps3nhc","tag_id":"cjkwmni5q000y3pu71bzeqkl5","_id":"cjkwmni5r00113pu7s35h4keh"},{"post_id":"cjkwmni5f000c3pu7cfi2v323","tag_id":"cjkwmni5r000z3pu7jqhqbuzm","_id":"cjkwmni5s00143pu79ktlut59"},{"post_id":"cjkwmni5f000c3pu7cfi2v323","tag_id":"cjkwmni5r00123pu7521yh6hj","_id":"cjkwmni5t00153pu7olp02jdu"},{"post_id":"cjkwmni5f000c3pu7cfi2v323","tag_id":"cjkwmni5400063pu7bc9l83k3","_id":"cjkwmni5t00173pu7x2kqc9ge"},{"post_id":"cjkwmni5g000e3pu7vo418amw","tag_id":"cjkwmni5r000z3pu7jqhqbuzm","_id":"cjkwmni5u001a3pu7ix2fbcin"},{"post_id":"cjkwmni5g000e3pu7vo418amw","tag_id":"cjkwmni5q000y3pu71bzeqkl5","_id":"cjkwmni5u001b3pu7pdzvdoir"},{"post_id":"cjkwmni5g000e3pu7vo418amw","tag_id":"cjkwmni5t00183pu7wzoe057o","_id":"cjkwmni5v001c3pu7nwbjrzjl"},{"post_id":"cjkwmni5g000e3pu7vo418amw","tag_id":"cjkwmni5u00193pu7rybljc4l","_id":"cjkwmni5v001d3pu704sivjvx"},{"post_id":"cjkwmni63001g3pu7m2hq3j0k","tag_id":"cjkwmni5r000z3pu7jqhqbuzm","_id":"cjkwmni67001j3pu7rhwsbjp6"},{"post_id":"cjkwmni63001g3pu7m2hq3j0k","tag_id":"cjkwmni5q000y3pu71bzeqkl5","_id":"cjkwmni68001k3pu7nxrrj9cz"},{"post_id":"cjkwmni66001i3pu7bze8kvqd","tag_id":"cjkwmni5q000y3pu71bzeqkl5","_id":"cjkwmni68001l3pu7ohpn9mfq"}],"Tag":[{"name":"git","_id":"cjkwmni4t00023pu7zdjwltvg"},{"name":"javascript","_id":"cjkwmni5400063pu7bc9l83k3"},{"name":"hexo","_id":"cjkwmni5e000b3pu7m6mbxczc"},{"name":"linux","_id":"cjkwmni5k000g3pu7mmrfanyp"},{"name":"docker","_id":"cjkwmni5l000k3pu78kzlln38"},{"name":"sentry","_id":"cjkwmni5m000n3pu7wh6072jk"},{"name":"webpack","_id":"cjkwmni5n000p3pu7svieko3o"},{"name":"缓存","_id":"cjkwmni5q000y3pu71bzeqkl5"},{"name":"前端","_id":"cjkwmni5r000z3pu7jqhqbuzm"},{"name":"异常监控","_id":"cjkwmni5r00123pu7521yh6hj"},{"name":"http","_id":"cjkwmni5t00183pu7wzoe057o"},{"name":"计算机网络","_id":"cjkwmni5u00193pu7rybljc4l"}]}}